// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v3.0.7
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_codegen.cpp:622

#ifndef _TAO_IDL_IFR_EXTENDEDS_MUDPPC_CPP_
#define _TAO_IDL_IFR_EXTENDEDS_MUDPPC_CPP_


#include "IFR_ExtendedS.h"
#include "tao/PortableServer/Operation_Table_Dynamic_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"
#include "cstring"

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



static const TAO_operation_db_entry CORBA_FixedDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::FixedDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::FixedDef::destroy_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::FixedDef::_get_type_skel), nullptr},
  {"_get_digits", std::addressof(POA_CORBA::FixedDef::_get_digits_skel), nullptr},
  {"_set_digits", std::addressof(POA_CORBA::FixedDef::_set_digits_skel), nullptr},
  {"_get_scale", std::addressof(POA_CORBA::FixedDef::_get_scale_skel), nullptr},
  {"_set_scale", std::addressof(POA_CORBA::FixedDef::_set_scale_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_FixedDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (36);
static char _tao_CORBA_FixedDef_optable_pool [_tao_CORBA_FixedDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_FixedDef_allocator (_tao_CORBA_FixedDef_optable_pool, _tao_CORBA_FixedDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_FixedDef_optable (
    CORBA_FixedDef_operations,
    12,
    24,
    &_tao_CORBA_FixedDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::FixedDef::FixedDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_FixedDef_optable);
}

POA_CORBA::FixedDef::FixedDef (const FixedDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::IDLType (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_digits_FixedDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_digits_FixedDef (
      POA_CORBA::FixedDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::UShort>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::UShort> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->digits ();
    }
  
  private:
    POA_CORBA::FixedDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::FixedDef::_get_digits_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::UShort>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::FixedDef * const impl =
    dynamic_cast<POA_CORBA::FixedDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_digits_FixedDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_digits_FixedDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_digits_FixedDef (
      POA_CORBA::FixedDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::UShort>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::UShort> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->digits (
        arg_1);
    }
  
  private:
    POA_CORBA::FixedDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::FixedDef::_set_digits_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::UShort>::in_arg_val _tao_digits;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_digits)
    };
  
  POA_CORBA::FixedDef * const impl =
    dynamic_cast<POA_CORBA::FixedDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_digits_FixedDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_scale_FixedDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_scale_FixedDef (
      POA_CORBA::FixedDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Short>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->scale ();
    }
  
  private:
    POA_CORBA::FixedDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::FixedDef::_get_scale_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::Short>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::FixedDef * const impl =
    dynamic_cast<POA_CORBA::FixedDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_scale_FixedDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_scale_FixedDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_scale_FixedDef (
      POA_CORBA::FixedDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->scale (
        arg_1);
    }
  
  private:
    POA_CORBA::FixedDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::FixedDef::_set_scale_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_scale;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_scale)
    };
  
  POA_CORBA::FixedDef * const impl =
    dynamic_cast<POA_CORBA::FixedDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_scale_FixedDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::FixedDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/FixedDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::FixedDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/FixedDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::FixedDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::FixedDef *
POA_CORBA::FixedDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::FixedDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_ValueMemberDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::ValueMemberDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::ValueMemberDef::destroy_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::ValueMemberDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::ValueMemberDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::ValueMemberDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::ValueMemberDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::ValueMemberDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::ValueMemberDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::ValueMemberDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::ValueMemberDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::ValueMemberDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::ValueMemberDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::ValueMemberDef::move_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::ValueMemberDef::_get_type_skel), nullptr},
  {"_get_type_def", std::addressof(POA_CORBA::ValueMemberDef::_get_type_def_skel), nullptr},
  {"_set_type_def", std::addressof(POA_CORBA::ValueMemberDef::_set_type_def_skel), nullptr},
  {"_get_access", std::addressof(POA_CORBA::ValueMemberDef::_get_access_skel), nullptr},
  {"_set_access", std::addressof(POA_CORBA::ValueMemberDef::_set_access_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_ValueMemberDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (69);
static char _tao_CORBA_ValueMemberDef_optable_pool [_tao_CORBA_ValueMemberDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_ValueMemberDef_allocator (_tao_CORBA_ValueMemberDef_optable_pool, _tao_CORBA_ValueMemberDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_ValueMemberDef_optable (
    CORBA_ValueMemberDef_operations,
    23,
    46,
    &_tao_CORBA_ValueMemberDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::ValueMemberDef::ValueMemberDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_ValueMemberDef_optable);
}

POA_CORBA::ValueMemberDef::ValueMemberDef (const ValueMemberDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Contained (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_type_ValueMemberDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_type_ValueMemberDef (
      POA_CORBA::ValueMemberDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::TypeCode>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::TypeCode> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->type ();
    }
  
  private:
    POA_CORBA::ValueMemberDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueMemberDef::_get_type_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::TypeCode>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ValueMemberDef * const impl =
    dynamic_cast<POA_CORBA::ValueMemberDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_type_ValueMemberDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_type_def_ValueMemberDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_type_def_ValueMemberDef (
      POA_CORBA::ValueMemberDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::IDLType>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->type_def ();
    }
  
  private:
    POA_CORBA::ValueMemberDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueMemberDef::_get_type_def_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::IDLType>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ValueMemberDef * const impl =
    dynamic_cast<POA_CORBA::ValueMemberDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_type_def_ValueMemberDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_type_def_ValueMemberDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_type_def_ValueMemberDef (
      POA_CORBA::ValueMemberDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->type_def (
        arg_1);
    }
  
  private:
    POA_CORBA::ValueMemberDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueMemberDef::_set_type_def_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_type_def;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_type_def)
    };
  
  POA_CORBA::ValueMemberDef * const impl =
    dynamic_cast<POA_CORBA::ValueMemberDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_type_def_ValueMemberDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_access_ValueMemberDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_access_ValueMemberDef (
      POA_CORBA::ValueMemberDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Short>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->access ();
    }
  
  private:
    POA_CORBA::ValueMemberDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueMemberDef::_get_access_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::Short>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ValueMemberDef * const impl =
    dynamic_cast<POA_CORBA::ValueMemberDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_access_ValueMemberDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_access_ValueMemberDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_access_ValueMemberDef (
      POA_CORBA::ValueMemberDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->access (
        arg_1);
    }
  
  private:
    POA_CORBA::ValueMemberDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueMemberDef::_set_access_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_access;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_access)
    };
  
  POA_CORBA::ValueMemberDef * const impl =
    dynamic_cast<POA_CORBA::ValueMemberDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_access_ValueMemberDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::ValueMemberDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/ValueMemberDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::ValueMemberDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/ValueMemberDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::ValueMemberDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::ValueMemberDef *
POA_CORBA::ValueMemberDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::ValueMemberDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_ValueDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::ValueDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::ValueDef::destroy_skel), nullptr},
  {"lookup", std::addressof(POA_CORBA::ValueDef::lookup_skel), nullptr},
  {"contents", std::addressof(POA_CORBA::ValueDef::contents_skel), nullptr},
  {"lookup_name", std::addressof(POA_CORBA::ValueDef::lookup_name_skel), nullptr},
  {"describe_contents", std::addressof(POA_CORBA::ValueDef::describe_contents_skel), nullptr},
  {"create_module", std::addressof(POA_CORBA::ValueDef::create_module_skel), nullptr},
  {"create_constant", std::addressof(POA_CORBA::ValueDef::create_constant_skel), nullptr},
  {"create_struct", std::addressof(POA_CORBA::ValueDef::create_struct_skel), nullptr},
  {"create_union", std::addressof(POA_CORBA::ValueDef::create_union_skel), nullptr},
  {"create_enum", std::addressof(POA_CORBA::ValueDef::create_enum_skel), nullptr},
  {"create_alias", std::addressof(POA_CORBA::ValueDef::create_alias_skel), nullptr},
  {"create_interface", std::addressof(POA_CORBA::ValueDef::create_interface_skel), nullptr},
  {"create_value", std::addressof(POA_CORBA::ValueDef::create_value_skel), nullptr},
  {"create_value_box", std::addressof(POA_CORBA::ValueDef::create_value_box_skel), nullptr},
  {"create_exception", std::addressof(POA_CORBA::ValueDef::create_exception_skel), nullptr},
  {"create_native", std::addressof(POA_CORBA::ValueDef::create_native_skel), nullptr},
  {"create_abstract_interface", std::addressof(POA_CORBA::ValueDef::create_abstract_interface_skel), nullptr},
  {"create_local_interface", std::addressof(POA_CORBA::ValueDef::create_local_interface_skel), nullptr},
  {"create_ext_value", std::addressof(POA_CORBA::ValueDef::create_ext_value_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::ValueDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::ValueDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::ValueDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::ValueDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::ValueDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::ValueDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::ValueDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::ValueDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::ValueDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::ValueDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::ValueDef::move_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::ValueDef::_get_type_skel), nullptr},
  {"_get_supported_interfaces", std::addressof(POA_CORBA::ValueDef::_get_supported_interfaces_skel), nullptr},
  {"_set_supported_interfaces", std::addressof(POA_CORBA::ValueDef::_set_supported_interfaces_skel), nullptr},
  {"_get_initializers", std::addressof(POA_CORBA::ValueDef::_get_initializers_skel), nullptr},
  {"_set_initializers", std::addressof(POA_CORBA::ValueDef::_set_initializers_skel), nullptr},
  {"_get_base_value", std::addressof(POA_CORBA::ValueDef::_get_base_value_skel), nullptr},
  {"_set_base_value", std::addressof(POA_CORBA::ValueDef::_set_base_value_skel), nullptr},
  {"_get_abstract_base_values", std::addressof(POA_CORBA::ValueDef::_get_abstract_base_values_skel), nullptr},
  {"_set_abstract_base_values", std::addressof(POA_CORBA::ValueDef::_set_abstract_base_values_skel), nullptr},
  {"_get_is_abstract", std::addressof(POA_CORBA::ValueDef::_get_is_abstract_skel), nullptr},
  {"_set_is_abstract", std::addressof(POA_CORBA::ValueDef::_set_is_abstract_skel), nullptr},
  {"_get_is_custom", std::addressof(POA_CORBA::ValueDef::_get_is_custom_skel), nullptr},
  {"_set_is_custom", std::addressof(POA_CORBA::ValueDef::_set_is_custom_skel), nullptr},
  {"_get_is_truncatable", std::addressof(POA_CORBA::ValueDef::_get_is_truncatable_skel), nullptr},
  {"_set_is_truncatable", std::addressof(POA_CORBA::ValueDef::_set_is_truncatable_skel), nullptr},
  {"is_a", std::addressof(POA_CORBA::ValueDef::is_a_skel), nullptr},
  {"describe_value", std::addressof(POA_CORBA::ValueDef::describe_value_skel), nullptr},
  {"create_value_member", std::addressof(POA_CORBA::ValueDef::create_value_member_skel), nullptr},
  {"create_attribute", std::addressof(POA_CORBA::ValueDef::create_attribute_skel), nullptr},
  {"create_operation", std::addressof(POA_CORBA::ValueDef::create_operation_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_ValueDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (168);
static char _tao_CORBA_ValueDef_optable_pool [_tao_CORBA_ValueDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_ValueDef_allocator (_tao_CORBA_ValueDef_optable_pool, _tao_CORBA_ValueDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_ValueDef_optable (
    CORBA_ValueDef_operations,
    56,
    112,
    &_tao_CORBA_ValueDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::ValueDef::ValueDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_ValueDef_optable);
}

POA_CORBA::ValueDef::ValueDef (const ValueDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Container (rhs),
    POA_CORBA::Contained (rhs),
    POA_CORBA::IDLType (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_supported_interfaces_ValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_supported_interfaces_ValueDef (
      POA_CORBA::ValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::InterfaceDefSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::InterfaceDefSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->supported_interfaces ();
    }
  
  private:
    POA_CORBA::ValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueDef::_get_supported_interfaces_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::InterfaceDefSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ValueDef * const impl =
    dynamic_cast<POA_CORBA::ValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_supported_interfaces_ValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_supported_interfaces_ValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_supported_interfaces_ValueDef (
      POA_CORBA::ValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::InterfaceDefSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::InterfaceDefSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->supported_interfaces (
        arg_1);
    }
  
  private:
    POA_CORBA::ValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueDef::_set_supported_interfaces_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::InterfaceDefSeq>::in_arg_val _tao_supported_interfaces;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_supported_interfaces)
    };
  
  POA_CORBA::ValueDef * const impl =
    dynamic_cast<POA_CORBA::ValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_supported_interfaces_ValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_initializers_ValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_initializers_ValueDef (
      POA_CORBA::ValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::InitializerSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::InitializerSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->initializers ();
    }
  
  private:
    POA_CORBA::ValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueDef::_get_initializers_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::InitializerSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ValueDef * const impl =
    dynamic_cast<POA_CORBA::ValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_initializers_ValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_initializers_ValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_initializers_ValueDef (
      POA_CORBA::ValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::InitializerSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::InitializerSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->initializers (
        arg_1);
    }
  
  private:
    POA_CORBA::ValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueDef::_set_initializers_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::InitializerSeq>::in_arg_val _tao_initializers;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_initializers)
    };
  
  POA_CORBA::ValueDef * const impl =
    dynamic_cast<POA_CORBA::ValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_initializers_ValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_base_value_ValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_base_value_ValueDef (
      POA_CORBA::ValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ValueDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ValueDef> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->base_value ();
    }
  
  private:
    POA_CORBA::ValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueDef::_get_base_value_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ValueDef>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ValueDef * const impl =
    dynamic_cast<POA_CORBA::ValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_base_value_ValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_base_value_ValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_base_value_ValueDef (
      POA_CORBA::ValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ValueDef>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ValueDef> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->base_value (
        arg_1);
    }
  
  private:
    POA_CORBA::ValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueDef::_set_base_value_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ValueDef>::in_arg_val _tao_base_value;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_base_value)
    };
  
  POA_CORBA::ValueDef * const impl =
    dynamic_cast<POA_CORBA::ValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_base_value_ValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_abstract_base_values_ValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_abstract_base_values_ValueDef (
      POA_CORBA::ValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ValueDefSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ValueDefSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->abstract_base_values ();
    }
  
  private:
    POA_CORBA::ValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueDef::_get_abstract_base_values_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ValueDefSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ValueDef * const impl =
    dynamic_cast<POA_CORBA::ValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_abstract_base_values_ValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_abstract_base_values_ValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_abstract_base_values_ValueDef (
      POA_CORBA::ValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ValueDefSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ValueDefSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->abstract_base_values (
        arg_1);
    }
  
  private:
    POA_CORBA::ValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueDef::_set_abstract_base_values_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ValueDefSeq>::in_arg_val _tao_abstract_base_values;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_abstract_base_values)
    };
  
  POA_CORBA::ValueDef * const impl =
    dynamic_cast<POA_CORBA::ValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_abstract_base_values_ValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_is_abstract_ValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_is_abstract_ValueDef (
      POA_CORBA::ValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->is_abstract ();
    }
  
  private:
    POA_CORBA::ValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueDef::_get_is_abstract_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ValueDef * const impl =
    dynamic_cast<POA_CORBA::ValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_is_abstract_ValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_is_abstract_ValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_is_abstract_ValueDef (
      POA_CORBA::ValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->is_abstract (
        arg_1);
    }
  
  private:
    POA_CORBA::ValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueDef::_set_is_abstract_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_is_abstract;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_is_abstract)
    };
  
  POA_CORBA::ValueDef * const impl =
    dynamic_cast<POA_CORBA::ValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_is_abstract_ValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_is_custom_ValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_is_custom_ValueDef (
      POA_CORBA::ValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->is_custom ();
    }
  
  private:
    POA_CORBA::ValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueDef::_get_is_custom_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ValueDef * const impl =
    dynamic_cast<POA_CORBA::ValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_is_custom_ValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_is_custom_ValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_is_custom_ValueDef (
      POA_CORBA::ValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->is_custom (
        arg_1);
    }
  
  private:
    POA_CORBA::ValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueDef::_set_is_custom_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_is_custom;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_is_custom)
    };
  
  POA_CORBA::ValueDef * const impl =
    dynamic_cast<POA_CORBA::ValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_is_custom_ValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_is_truncatable_ValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_is_truncatable_ValueDef (
      POA_CORBA::ValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->is_truncatable ();
    }
  
  private:
    POA_CORBA::ValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueDef::_get_is_truncatable_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ValueDef * const impl =
    dynamic_cast<POA_CORBA::ValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_is_truncatable_ValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_is_truncatable_ValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_is_truncatable_ValueDef (
      POA_CORBA::ValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->is_truncatable (
        arg_1);
    }
  
  private:
    POA_CORBA::ValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueDef::_set_is_truncatable_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_is_truncatable;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_is_truncatable)
    };
  
  POA_CORBA::ValueDef * const impl =
    dynamic_cast<POA_CORBA::ValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_is_truncatable_ValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class is_a_ValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline is_a_ValueDef (
      POA_CORBA::ValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->is_a (
          arg_1);
    }
  
  private:
    POA_CORBA::ValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueDef::is_a_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id)
    };
  
  POA_CORBA::ValueDef * const impl =
    dynamic_cast<POA_CORBA::ValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  is_a_ValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class describe_value_ValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline describe_value_ValueDef (
      POA_CORBA::ValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ValueDef::FullValueDescription>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ValueDef::FullValueDescription> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->describe_value ();
    }
  
  private:
    POA_CORBA::ValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueDef::describe_value_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ValueDef::FullValueDescription>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ValueDef * const impl =
    dynamic_cast<POA_CORBA::ValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  describe_value_ValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_value_member_ValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline create_value_member_ValueDef (
      POA_CORBA::ValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ValueMemberDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ValueMemberDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          4);
        
      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_5 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          5);
        
      retval =
        this->servant_->create_value_member (
          arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5);
    }
  
  private:
    POA_CORBA::ValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueDef::create_value_member_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ValueMemberDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_type;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_access;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version),
      std::addressof(_tao_type),
      std::addressof(_tao_access)
    };
  
  POA_CORBA::ValueDef * const impl =
    dynamic_cast<POA_CORBA::ValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_value_member_ValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 6
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_attribute_ValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline create_attribute_ValueDef (
      POA_CORBA::ValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::AttributeDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::AttributeDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          4);
        
      TAO::SArg_Traits< ::CORBA::AttributeMode>::in_arg_type arg_5 =
        TAO::Portable_Server::get_in_arg< ::CORBA::AttributeMode> (
          this->operation_details_,
          this->args_,
          5);
        
      retval =
        this->servant_->create_attribute (
          arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5);
    }
  
  private:
    POA_CORBA::ValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueDef::create_attribute_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::AttributeDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_type;
  TAO::SArg_Traits< ::CORBA::AttributeMode>::in_arg_val _tao_mode;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version),
      std::addressof(_tao_type),
      std::addressof(_tao_mode)
    };
  
  POA_CORBA::ValueDef * const impl =
    dynamic_cast<POA_CORBA::ValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_attribute_ValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 6
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_operation_ValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline create_operation_ValueDef (
      POA_CORBA::ValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::OperationDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::OperationDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          4);
        
      TAO::SArg_Traits< ::CORBA::OperationMode>::in_arg_type arg_5 =
        TAO::Portable_Server::get_in_arg< ::CORBA::OperationMode> (
          this->operation_details_,
          this->args_,
          5);
        
      TAO::SArg_Traits< ::CORBA::ParDescriptionSeq>::in_arg_type arg_6 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ParDescriptionSeq> (
          this->operation_details_,
          this->args_,
          6);
        
      TAO::SArg_Traits< ::CORBA::ExceptionDefSeq>::in_arg_type arg_7 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ExceptionDefSeq> (
          this->operation_details_,
          this->args_,
          7);
        
      TAO::SArg_Traits< ::CORBA::ContextIdSeq>::in_arg_type arg_8 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ContextIdSeq> (
          this->operation_details_,
          this->args_,
          8);
        
      retval =
        this->servant_->create_operation (
          arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5
          , arg_6
          , arg_7
          , arg_8);
    }
  
  private:
    POA_CORBA::ValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueDef::create_operation_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::OperationDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_result;
  TAO::SArg_Traits< ::CORBA::OperationMode>::in_arg_val _tao_mode;
  TAO::SArg_Traits< ::CORBA::ParDescriptionSeq>::in_arg_val _tao_params;
  TAO::SArg_Traits< ::CORBA::ExceptionDefSeq>::in_arg_val _tao_exceptions;
  TAO::SArg_Traits< ::CORBA::ContextIdSeq>::in_arg_val _tao_contexts;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version),
      std::addressof(_tao_result),
      std::addressof(_tao_mode),
      std::addressof(_tao_params),
      std::addressof(_tao_exceptions),
      std::addressof(_tao_contexts)
    };
  
  POA_CORBA::ValueDef * const impl =
    dynamic_cast<POA_CORBA::ValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_operation_ValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 9
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::ValueDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Container:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/ValueDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::ValueDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/ValueDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::ValueDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::ValueDef *
POA_CORBA::ValueDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::ValueDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_ExtValueDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::ExtValueDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::ExtValueDef::destroy_skel), nullptr},
  {"lookup", std::addressof(POA_CORBA::ExtValueDef::lookup_skel), nullptr},
  {"contents", std::addressof(POA_CORBA::ExtValueDef::contents_skel), nullptr},
  {"lookup_name", std::addressof(POA_CORBA::ExtValueDef::lookup_name_skel), nullptr},
  {"describe_contents", std::addressof(POA_CORBA::ExtValueDef::describe_contents_skel), nullptr},
  {"create_module", std::addressof(POA_CORBA::ExtValueDef::create_module_skel), nullptr},
  {"create_constant", std::addressof(POA_CORBA::ExtValueDef::create_constant_skel), nullptr},
  {"create_struct", std::addressof(POA_CORBA::ExtValueDef::create_struct_skel), nullptr},
  {"create_union", std::addressof(POA_CORBA::ExtValueDef::create_union_skel), nullptr},
  {"create_enum", std::addressof(POA_CORBA::ExtValueDef::create_enum_skel), nullptr},
  {"create_alias", std::addressof(POA_CORBA::ExtValueDef::create_alias_skel), nullptr},
  {"create_interface", std::addressof(POA_CORBA::ExtValueDef::create_interface_skel), nullptr},
  {"create_value", std::addressof(POA_CORBA::ExtValueDef::create_value_skel), nullptr},
  {"create_value_box", std::addressof(POA_CORBA::ExtValueDef::create_value_box_skel), nullptr},
  {"create_exception", std::addressof(POA_CORBA::ExtValueDef::create_exception_skel), nullptr},
  {"create_native", std::addressof(POA_CORBA::ExtValueDef::create_native_skel), nullptr},
  {"create_abstract_interface", std::addressof(POA_CORBA::ExtValueDef::create_abstract_interface_skel), nullptr},
  {"create_local_interface", std::addressof(POA_CORBA::ExtValueDef::create_local_interface_skel), nullptr},
  {"create_ext_value", std::addressof(POA_CORBA::ExtValueDef::create_ext_value_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::ExtValueDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::ExtValueDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::ExtValueDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::ExtValueDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::ExtValueDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::ExtValueDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::ExtValueDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::ExtValueDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::ExtValueDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::ExtValueDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::ExtValueDef::move_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::ExtValueDef::_get_type_skel), nullptr},
  {"_get_supported_interfaces", std::addressof(POA_CORBA::ExtValueDef::_get_supported_interfaces_skel), nullptr},
  {"_set_supported_interfaces", std::addressof(POA_CORBA::ExtValueDef::_set_supported_interfaces_skel), nullptr},
  {"_get_initializers", std::addressof(POA_CORBA::ExtValueDef::_get_initializers_skel), nullptr},
  {"_set_initializers", std::addressof(POA_CORBA::ExtValueDef::_set_initializers_skel), nullptr},
  {"_get_base_value", std::addressof(POA_CORBA::ExtValueDef::_get_base_value_skel), nullptr},
  {"_set_base_value", std::addressof(POA_CORBA::ExtValueDef::_set_base_value_skel), nullptr},
  {"_get_abstract_base_values", std::addressof(POA_CORBA::ExtValueDef::_get_abstract_base_values_skel), nullptr},
  {"_set_abstract_base_values", std::addressof(POA_CORBA::ExtValueDef::_set_abstract_base_values_skel), nullptr},
  {"_get_is_abstract", std::addressof(POA_CORBA::ExtValueDef::_get_is_abstract_skel), nullptr},
  {"_set_is_abstract", std::addressof(POA_CORBA::ExtValueDef::_set_is_abstract_skel), nullptr},
  {"_get_is_custom", std::addressof(POA_CORBA::ExtValueDef::_get_is_custom_skel), nullptr},
  {"_set_is_custom", std::addressof(POA_CORBA::ExtValueDef::_set_is_custom_skel), nullptr},
  {"_get_is_truncatable", std::addressof(POA_CORBA::ExtValueDef::_get_is_truncatable_skel), nullptr},
  {"_set_is_truncatable", std::addressof(POA_CORBA::ExtValueDef::_set_is_truncatable_skel), nullptr},
  {"is_a", std::addressof(POA_CORBA::ExtValueDef::is_a_skel), nullptr},
  {"describe_value", std::addressof(POA_CORBA::ExtValueDef::describe_value_skel), nullptr},
  {"create_value_member", std::addressof(POA_CORBA::ExtValueDef::create_value_member_skel), nullptr},
  {"create_attribute", std::addressof(POA_CORBA::ExtValueDef::create_attribute_skel), nullptr},
  {"create_operation", std::addressof(POA_CORBA::ExtValueDef::create_operation_skel), nullptr},
  {"_get_ext_initializers", std::addressof(POA_CORBA::ExtValueDef::_get_ext_initializers_skel), nullptr},
  {"_set_ext_initializers", std::addressof(POA_CORBA::ExtValueDef::_set_ext_initializers_skel), nullptr},
  {"describe_ext_value", std::addressof(POA_CORBA::ExtValueDef::describe_ext_value_skel), nullptr},
  {"create_ext_attribute", std::addressof(POA_CORBA::ExtValueDef::create_ext_attribute_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_ExtValueDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (180);
static char _tao_CORBA_ExtValueDef_optable_pool [_tao_CORBA_ExtValueDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_ExtValueDef_allocator (_tao_CORBA_ExtValueDef_optable_pool, _tao_CORBA_ExtValueDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_ExtValueDef_optable (
    CORBA_ExtValueDef_operations,
    60,
    120,
    &_tao_CORBA_ExtValueDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::ExtValueDef::ExtValueDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_ExtValueDef_optable);
}

POA_CORBA::ExtValueDef::ExtValueDef (const ExtValueDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Container (rhs),
    POA_CORBA::Contained (rhs),
    POA_CORBA::IDLType (rhs),
    POA_CORBA::ValueDef (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_ext_initializers_ExtValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_ext_initializers_ExtValueDef (
      POA_CORBA::ExtValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ExtInitializerSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ExtInitializerSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->ext_initializers ();
    }
  
  private:
    POA_CORBA::ExtValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ExtValueDef::_get_ext_initializers_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ExtInitializerSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ExtValueDef * const impl =
    dynamic_cast<POA_CORBA::ExtValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_ext_initializers_ExtValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_ext_initializers_ExtValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_ext_initializers_ExtValueDef (
      POA_CORBA::ExtValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ExtInitializerSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ExtInitializerSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->ext_initializers (
        arg_1);
    }
  
  private:
    POA_CORBA::ExtValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ExtValueDef::_set_ext_initializers_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ExtInitializerSeq>::in_arg_val _tao_ext_initializers;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_ext_initializers)
    };
  
  POA_CORBA::ExtValueDef * const impl =
    dynamic_cast<POA_CORBA::ExtValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_ext_initializers_ExtValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class describe_ext_value_ExtValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline describe_ext_value_ExtValueDef (
      POA_CORBA::ExtValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ExtValueDef::ExtFullValueDescription>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ExtValueDef::ExtFullValueDescription> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->describe_ext_value ();
    }
  
  private:
    POA_CORBA::ExtValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ExtValueDef::describe_ext_value_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ExtValueDef::ExtFullValueDescription>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ExtValueDef * const impl =
    dynamic_cast<POA_CORBA::ExtValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  describe_ext_value_ExtValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_ext_attribute_ExtValueDef
    : public TAO::Upcall_Command
  {
  public:
    inline create_ext_attribute_ExtValueDef (
      POA_CORBA::ExtValueDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ExtAttributeDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ExtAttributeDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          4);
        
      TAO::SArg_Traits< ::CORBA::AttributeMode>::in_arg_type arg_5 =
        TAO::Portable_Server::get_in_arg< ::CORBA::AttributeMode> (
          this->operation_details_,
          this->args_,
          5);
        
      TAO::SArg_Traits< ::CORBA::ExceptionDefSeq>::in_arg_type arg_6 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ExceptionDefSeq> (
          this->operation_details_,
          this->args_,
          6);
        
      TAO::SArg_Traits< ::CORBA::ExceptionDefSeq>::in_arg_type arg_7 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ExceptionDefSeq> (
          this->operation_details_,
          this->args_,
          7);
        
      retval =
        this->servant_->create_ext_attribute (
          arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5
          , arg_6
          , arg_7);
    }
  
  private:
    POA_CORBA::ExtValueDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ExtValueDef::create_ext_attribute_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ExtAttributeDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_type;
  TAO::SArg_Traits< ::CORBA::AttributeMode>::in_arg_val _tao_mode;
  TAO::SArg_Traits< ::CORBA::ExceptionDefSeq>::in_arg_val _tao_get_exceptions;
  TAO::SArg_Traits< ::CORBA::ExceptionDefSeq>::in_arg_val _tao_set_exceptions;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version),
      std::addressof(_tao_type),
      std::addressof(_tao_mode),
      std::addressof(_tao_get_exceptions),
      std::addressof(_tao_set_exceptions)
    };
  
  POA_CORBA::ExtValueDef * const impl =
    dynamic_cast<POA_CORBA::ExtValueDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_ext_attribute_ExtValueDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 8
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::ExtValueDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Container:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/ValueDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/ExtValueDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::ExtValueDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/ExtValueDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::ExtValueDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::ExtValueDef *
POA_CORBA::ExtValueDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::ExtValueDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_ValueBoxDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::ValueBoxDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::ValueBoxDef::destroy_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::ValueBoxDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::ValueBoxDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::ValueBoxDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::ValueBoxDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::ValueBoxDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::ValueBoxDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::ValueBoxDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::ValueBoxDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::ValueBoxDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::ValueBoxDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::ValueBoxDef::move_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::ValueBoxDef::_get_type_skel), nullptr},
  {"_get_original_type_def", std::addressof(POA_CORBA::ValueBoxDef::_get_original_type_def_skel), nullptr},
  {"_set_original_type_def", std::addressof(POA_CORBA::ValueBoxDef::_set_original_type_def_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_ValueBoxDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (63);
static char _tao_CORBA_ValueBoxDef_optable_pool [_tao_CORBA_ValueBoxDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_ValueBoxDef_allocator (_tao_CORBA_ValueBoxDef_optable_pool, _tao_CORBA_ValueBoxDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_ValueBoxDef_optable (
    CORBA_ValueBoxDef_operations,
    21,
    42,
    &_tao_CORBA_ValueBoxDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::ValueBoxDef::ValueBoxDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_ValueBoxDef_optable);
}

POA_CORBA::ValueBoxDef::ValueBoxDef (const ValueBoxDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Contained (rhs),
    POA_CORBA::IDLType (rhs),
    POA_CORBA::TypedefDef (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_original_type_def_ValueBoxDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_original_type_def_ValueBoxDef (
      POA_CORBA::ValueBoxDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::IDLType>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->original_type_def ();
    }
  
  private:
    POA_CORBA::ValueBoxDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueBoxDef::_get_original_type_def_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::IDLType>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ValueBoxDef * const impl =
    dynamic_cast<POA_CORBA::ValueBoxDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_original_type_def_ValueBoxDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_original_type_def_ValueBoxDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_original_type_def_ValueBoxDef (
      POA_CORBA::ValueBoxDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->original_type_def (
        arg_1);
    }
  
  private:
    POA_CORBA::ValueBoxDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ValueBoxDef::_set_original_type_def_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_original_type_def;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_original_type_def)
    };
  
  POA_CORBA::ValueBoxDef * const impl =
    dynamic_cast<POA_CORBA::ValueBoxDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_original_type_def_ValueBoxDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::ValueBoxDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/TypedefDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/ValueBoxDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::ValueBoxDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/ValueBoxDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::ValueBoxDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::ValueBoxDef *
POA_CORBA::ValueBoxDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::ValueBoxDef>::unchecked_narrow (obj.in ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* ifndef */

