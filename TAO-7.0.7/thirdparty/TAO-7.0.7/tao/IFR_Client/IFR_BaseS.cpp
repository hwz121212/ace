// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v3.0.7
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_codegen.cpp:622

#ifndef _TAO_IDL_IFR_BASES_ZLMYLG_CPP_
#define _TAO_IDL_IFR_BASES_ZLMYLG_CPP_


#include "IFR_BaseS.h"
#include "tao/PortableServer/Operation_Table_Dynamic_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"
#include "cstring"

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



static const TAO_operation_db_entry CORBA_IRObject_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::IRObject::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::IRObject::destroy_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_IRObject_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (21);
static char _tao_CORBA_IRObject_optable_pool [_tao_CORBA_IRObject_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_IRObject_allocator (_tao_CORBA_IRObject_optable_pool, _tao_CORBA_IRObject_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_IRObject_optable (
    CORBA_IRObject_operations,
    7,
    14,
    &_tao_CORBA_IRObject_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::IRObject::IRObject ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_IRObject_optable);
}

POA_CORBA::IRObject::IRObject (const IRObject& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_def_kind_IRObject
    : public TAO::Upcall_Command
  {
  public:
    inline _get_def_kind_IRObject (
      POA_CORBA::IRObject * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::DefinitionKind>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::DefinitionKind> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->def_kind ();
    }
  
  private:
    POA_CORBA::IRObject * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::IRObject::_get_def_kind_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::DefinitionKind>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::IRObject * const impl =
    dynamic_cast<POA_CORBA::IRObject *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_def_kind_IRObject command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class destroy_IRObject
    : public TAO::Upcall_Command
  {
  public:
    inline destroy_IRObject (
      POA_CORBA::IRObject * servant)
      : servant_ (servant)
    {
    }

    void execute () override
    {
      this->servant_->destroy ();
    }
  
  private:
    POA_CORBA::IRObject * const servant_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::IRObject::destroy_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::IRObject * const impl =
    dynamic_cast<POA_CORBA::IRObject *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  destroy_IRObject command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::IRObject::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::IRObject::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/IRObject:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::IRObject::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::IRObject *
POA_CORBA::IRObject::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::IRObject>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_Contained_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::Contained::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::Contained::destroy_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::Contained::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::Contained::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::Contained::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::Contained::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::Contained::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::Contained::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::Contained::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::Contained::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::Contained::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::Contained::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::Contained::move_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_Contained_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (54);
static char _tao_CORBA_Contained_optable_pool [_tao_CORBA_Contained_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_Contained_allocator (_tao_CORBA_Contained_optable_pool, _tao_CORBA_Contained_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_Contained_optable (
    CORBA_Contained_operations,
    18,
    36,
    &_tao_CORBA_Contained_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::Contained::Contained ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_Contained_optable);
}

POA_CORBA::Contained::Contained (const Contained& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_id_Contained
    : public TAO::Upcall_Command
  {
  public:
    inline _get_id_Contained (
      POA_CORBA::Contained * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->id ();
    }
  
  private:
    POA_CORBA::Contained * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Contained::_get_id_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::Contained * const impl =
    dynamic_cast<POA_CORBA::Contained *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_id_Contained command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_id_Contained
    : public TAO::Upcall_Command
  {
  public:
    inline _set_id_Contained (
      POA_CORBA::Contained * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->id (
        arg_1);
    }
  
  private:
    POA_CORBA::Contained * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Contained::_set_id_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id)
    };
  
  POA_CORBA::Contained * const impl =
    dynamic_cast<POA_CORBA::Contained *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_id_Contained command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_name_Contained
    : public TAO::Upcall_Command
  {
  public:
    inline _get_name_Contained (
      POA_CORBA::Contained * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->name ();
    }
  
  private:
    POA_CORBA::Contained * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Contained::_get_name_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::Contained * const impl =
    dynamic_cast<POA_CORBA::Contained *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_name_Contained command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_name_Contained
    : public TAO::Upcall_Command
  {
  public:
    inline _set_name_Contained (
      POA_CORBA::Contained * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->name (
        arg_1);
    }
  
  private:
    POA_CORBA::Contained * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Contained::_set_name_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_name)
    };
  
  POA_CORBA::Contained * const impl =
    dynamic_cast<POA_CORBA::Contained *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_name_Contained command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_version_Contained
    : public TAO::Upcall_Command
  {
  public:
    inline _get_version_Contained (
      POA_CORBA::Contained * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->version ();
    }
  
  private:
    POA_CORBA::Contained * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Contained::_get_version_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::Contained * const impl =
    dynamic_cast<POA_CORBA::Contained *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_version_Contained command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_version_Contained
    : public TAO::Upcall_Command
  {
  public:
    inline _set_version_Contained (
      POA_CORBA::Contained * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->version (
        arg_1);
    }
  
  private:
    POA_CORBA::Contained * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Contained::_set_version_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_version)
    };
  
  POA_CORBA::Contained * const impl =
    dynamic_cast<POA_CORBA::Contained *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_version_Contained command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_defined_in_Contained
    : public TAO::Upcall_Command
  {
  public:
    inline _get_defined_in_Contained (
      POA_CORBA::Contained * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Container>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Container> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->defined_in ();
    }
  
  private:
    POA_CORBA::Contained * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Contained::_get_defined_in_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::Container>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::Contained * const impl =
    dynamic_cast<POA_CORBA::Contained *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_defined_in_Contained command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_absolute_name_Contained
    : public TAO::Upcall_Command
  {
  public:
    inline _get_absolute_name_Contained (
      POA_CORBA::Contained * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->absolute_name ();
    }
  
  private:
    POA_CORBA::Contained * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Contained::_get_absolute_name_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::Contained * const impl =
    dynamic_cast<POA_CORBA::Contained *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_absolute_name_Contained command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_containing_repository_Contained
    : public TAO::Upcall_Command
  {
  public:
    inline _get_containing_repository_Contained (
      POA_CORBA::Contained * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Repository>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Repository> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->containing_repository ();
    }
  
  private:
    POA_CORBA::Contained * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Contained::_get_containing_repository_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::Repository>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::Contained * const impl =
    dynamic_cast<POA_CORBA::Contained *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_containing_repository_Contained command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class describe_Contained
    : public TAO::Upcall_Command
  {
  public:
    inline describe_Contained (
      POA_CORBA::Contained * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Contained::Description>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Contained::Description> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->describe ();
    }
  
  private:
    POA_CORBA::Contained * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Contained::describe_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::Contained::Description>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::Contained * const impl =
    dynamic_cast<POA_CORBA::Contained *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  describe_Contained command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class move_Contained
    : public TAO::Upcall_Command
  {
  public:
    inline move_Contained (
      POA_CORBA::Contained * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Container>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Container> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      this->servant_->move (
        arg_1
        , arg_2
        , arg_3);
    }
  
  private:
    POA_CORBA::Contained * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Contained::move_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Container>::in_arg_val _tao_new_container;
  TAO::SArg_Traits< char *>::in_arg_val _tao_new_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_new_version;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_new_container),
      std::addressof(_tao_new_name),
      std::addressof(_tao_new_version)
    };
  
  POA_CORBA::Contained * const impl =
    dynamic_cast<POA_CORBA::Contained *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  move_Contained command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 4
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::Contained::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::Contained::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/Contained:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::Contained::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::Contained *
POA_CORBA::Contained::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::Contained>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_Container_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::Container::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::Container::destroy_skel), nullptr},
  {"lookup", std::addressof(POA_CORBA::Container::lookup_skel), nullptr},
  {"contents", std::addressof(POA_CORBA::Container::contents_skel), nullptr},
  {"lookup_name", std::addressof(POA_CORBA::Container::lookup_name_skel), nullptr},
  {"describe_contents", std::addressof(POA_CORBA::Container::describe_contents_skel), nullptr},
  {"create_module", std::addressof(POA_CORBA::Container::create_module_skel), nullptr},
  {"create_constant", std::addressof(POA_CORBA::Container::create_constant_skel), nullptr},
  {"create_struct", std::addressof(POA_CORBA::Container::create_struct_skel), nullptr},
  {"create_union", std::addressof(POA_CORBA::Container::create_union_skel), nullptr},
  {"create_enum", std::addressof(POA_CORBA::Container::create_enum_skel), nullptr},
  {"create_alias", std::addressof(POA_CORBA::Container::create_alias_skel), nullptr},
  {"create_interface", std::addressof(POA_CORBA::Container::create_interface_skel), nullptr},
  {"create_value", std::addressof(POA_CORBA::Container::create_value_skel), nullptr},
  {"create_value_box", std::addressof(POA_CORBA::Container::create_value_box_skel), nullptr},
  {"create_exception", std::addressof(POA_CORBA::Container::create_exception_skel), nullptr},
  {"create_native", std::addressof(POA_CORBA::Container::create_native_skel), nullptr},
  {"create_abstract_interface", std::addressof(POA_CORBA::Container::create_abstract_interface_skel), nullptr},
  {"create_local_interface", std::addressof(POA_CORBA::Container::create_local_interface_skel), nullptr},
  {"create_ext_value", std::addressof(POA_CORBA::Container::create_ext_value_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_Container_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (75);
static char _tao_CORBA_Container_optable_pool [_tao_CORBA_Container_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_Container_allocator (_tao_CORBA_Container_optable_pool, _tao_CORBA_Container_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_Container_optable (
    CORBA_Container_operations,
    25,
    50,
    &_tao_CORBA_Container_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::Container::Container ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_Container_optable);
}

POA_CORBA::Container::Container (const Container& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class lookup_Container
    : public TAO::Upcall_Command
  {
  public:
    inline lookup_Container (
      POA_CORBA::Container * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Contained>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Contained> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->lookup (
          arg_1);
    }
  
  private:
    POA_CORBA::Container * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Container::lookup_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::Contained>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_search_name;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_search_name)
    };
  
  POA_CORBA::Container * const impl =
    dynamic_cast<POA_CORBA::Container *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  lookup_Container command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class contents_Container
    : public TAO::Upcall_Command
  {
  public:
    inline contents_Container (
      POA_CORBA::Container * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ContainedSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ContainedSeq> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::DefinitionKind>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::DefinitionKind> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->contents (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CORBA::Container * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Container::contents_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ContainedSeq>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::DefinitionKind>::in_arg_val _tao_limit_type;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_exclude_inherited;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_limit_type),
      std::addressof(_tao_exclude_inherited)
    };
  
  POA_CORBA::Container * const impl =
    dynamic_cast<POA_CORBA::Container *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  contents_Container command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 3
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class lookup_name_Container
    : public TAO::Upcall_Command
  {
  public:
    inline lookup_name_Container (
      POA_CORBA::Container * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ContainedSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ContainedSeq> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CORBA::DefinitionKind>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::CORBA::DefinitionKind> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          4);
        
      retval =
        this->servant_->lookup_name (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }
  
  private:
    POA_CORBA::Container * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Container::lookup_name_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ContainedSeq>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_search_name;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_levels_to_search;
  TAO::SArg_Traits< ::CORBA::DefinitionKind>::in_arg_val _tao_limit_type;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_exclude_inherited;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_search_name),
      std::addressof(_tao_levels_to_search),
      std::addressof(_tao_limit_type),
      std::addressof(_tao_exclude_inherited)
    };
  
  POA_CORBA::Container * const impl =
    dynamic_cast<POA_CORBA::Container *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  lookup_name_Container command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 5
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class describe_contents_Container
    : public TAO::Upcall_Command
  {
  public:
    inline describe_contents_Container (
      POA_CORBA::Container * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Container::DescriptionSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Container::DescriptionSeq> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::DefinitionKind>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::DefinitionKind> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->describe_contents (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_CORBA::Container * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Container::describe_contents_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::Container::DescriptionSeq>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::DefinitionKind>::in_arg_val _tao_limit_type;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_exclude_inherited;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_max_returned_objs;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_limit_type),
      std::addressof(_tao_exclude_inherited),
      std::addressof(_tao_max_returned_objs)
    };
  
  POA_CORBA::Container * const impl =
    dynamic_cast<POA_CORBA::Container *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  describe_contents_Container command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 4
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_module_Container
    : public TAO::Upcall_Command
  {
  public:
    inline create_module_Container (
      POA_CORBA::Container * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ModuleDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ModuleDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->create_module (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_CORBA::Container * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Container::create_module_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ModuleDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version)
    };
  
  POA_CORBA::Container * const impl =
    dynamic_cast<POA_CORBA::Container *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_module_Container command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 4
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_constant_Container
    : public TAO::Upcall_Command
  {
  public:
    inline create_constant_Container (
      POA_CORBA::Container * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ConstantDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ConstantDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          4);
        
      TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_5 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_,
          5);
        
      retval =
        this->servant_->create_constant (
          arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5);
    }
  
  private:
    POA_CORBA::Container * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Container::create_constant_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ConstantDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_type;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_value;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version),
      std::addressof(_tao_type),
      std::addressof(_tao_value)
    };
  
  POA_CORBA::Container * const impl =
    dynamic_cast<POA_CORBA::Container *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_constant_Container command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 6
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_struct_Container
    : public TAO::Upcall_Command
  {
  public:
    inline create_struct_Container (
      POA_CORBA::Container * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::StructDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::StructDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::StructMemberSeq>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::CORBA::StructMemberSeq> (
          this->operation_details_,
          this->args_,
          4);
        
      retval =
        this->servant_->create_struct (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }
  
  private:
    POA_CORBA::Container * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Container::create_struct_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::StructDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;
  TAO::SArg_Traits< ::CORBA::StructMemberSeq>::in_arg_val _tao_members;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version),
      std::addressof(_tao_members)
    };
  
  POA_CORBA::Container * const impl =
    dynamic_cast<POA_CORBA::Container *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_struct_Container command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 5
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_union_Container
    : public TAO::Upcall_Command
  {
  public:
    inline create_union_Container (
      POA_CORBA::Container * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::UnionDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::UnionDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          4);
        
      TAO::SArg_Traits< ::CORBA::UnionMemberSeq>::in_arg_type arg_5 =
        TAO::Portable_Server::get_in_arg< ::CORBA::UnionMemberSeq> (
          this->operation_details_,
          this->args_,
          5);
        
      retval =
        this->servant_->create_union (
          arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5);
    }
  
  private:
    POA_CORBA::Container * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Container::create_union_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::UnionDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_discriminator_type;
  TAO::SArg_Traits< ::CORBA::UnionMemberSeq>::in_arg_val _tao_members;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version),
      std::addressof(_tao_discriminator_type),
      std::addressof(_tao_members)
    };
  
  POA_CORBA::Container * const impl =
    dynamic_cast<POA_CORBA::Container *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_union_Container command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 6
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_enum_Container
    : public TAO::Upcall_Command
  {
  public:
    inline create_enum_Container (
      POA_CORBA::Container * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::EnumDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::EnumDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::EnumMemberSeq>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::CORBA::EnumMemberSeq> (
          this->operation_details_,
          this->args_,
          4);
        
      retval =
        this->servant_->create_enum (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }
  
  private:
    POA_CORBA::Container * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Container::create_enum_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::EnumDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;
  TAO::SArg_Traits< ::CORBA::EnumMemberSeq>::in_arg_val _tao_members;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version),
      std::addressof(_tao_members)
    };
  
  POA_CORBA::Container * const impl =
    dynamic_cast<POA_CORBA::Container *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_enum_Container command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 5
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_alias_Container
    : public TAO::Upcall_Command
  {
  public:
    inline create_alias_Container (
      POA_CORBA::Container * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::AliasDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::AliasDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          4);
        
      retval =
        this->servant_->create_alias (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }
  
  private:
    POA_CORBA::Container * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Container::create_alias_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::AliasDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_original_type;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version),
      std::addressof(_tao_original_type)
    };
  
  POA_CORBA::Container * const impl =
    dynamic_cast<POA_CORBA::Container *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_alias_Container command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 5
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_interface_Container
    : public TAO::Upcall_Command
  {
  public:
    inline create_interface_Container (
      POA_CORBA::Container * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::InterfaceDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::InterfaceDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::InterfaceDefSeq>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::CORBA::InterfaceDefSeq> (
          this->operation_details_,
          this->args_,
          4);
        
      retval =
        this->servant_->create_interface (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }
  
  private:
    POA_CORBA::Container * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Container::create_interface_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::InterfaceDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;
  TAO::SArg_Traits< ::CORBA::InterfaceDefSeq>::in_arg_val _tao_base_interfaces;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version),
      std::addressof(_tao_base_interfaces)
    };
  
  POA_CORBA::Container * const impl =
    dynamic_cast<POA_CORBA::Container *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_interface_Container command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 5
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_value_Container
    : public TAO::Upcall_Command
  {
  public:
    inline create_value_Container (
      POA_CORBA::Container * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ValueDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ValueDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          4);
        
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_5 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          5);
        
      TAO::SArg_Traits< ::CORBA::ValueDef>::in_arg_type arg_6 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ValueDef> (
          this->operation_details_,
          this->args_,
          6);
        
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_7 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          7);
        
      TAO::SArg_Traits< ::CORBA::ValueDefSeq>::in_arg_type arg_8 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ValueDefSeq> (
          this->operation_details_,
          this->args_,
          8);
        
      TAO::SArg_Traits< ::CORBA::InterfaceDefSeq>::in_arg_type arg_9 =
        TAO::Portable_Server::get_in_arg< ::CORBA::InterfaceDefSeq> (
          this->operation_details_,
          this->args_,
          9);
        
      TAO::SArg_Traits< ::CORBA::InitializerSeq>::in_arg_type arg_10 =
        TAO::Portable_Server::get_in_arg< ::CORBA::InitializerSeq> (
          this->operation_details_,
          this->args_,
          10);
        
      retval =
        this->servant_->create_value (
          arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5
          , arg_6
          , arg_7
          , arg_8
          , arg_9
          , arg_10);
    }
  
  private:
    POA_CORBA::Container * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Container::create_value_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ValueDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_is_custom;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_is_abstract;
  TAO::SArg_Traits< ::CORBA::ValueDef>::in_arg_val _tao_base_value;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_is_truncatable;
  TAO::SArg_Traits< ::CORBA::ValueDefSeq>::in_arg_val _tao_abstract_base_values;
  TAO::SArg_Traits< ::CORBA::InterfaceDefSeq>::in_arg_val _tao_supported_interfaces;
  TAO::SArg_Traits< ::CORBA::InitializerSeq>::in_arg_val _tao_initializers;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version),
      std::addressof(_tao_is_custom),
      std::addressof(_tao_is_abstract),
      std::addressof(_tao_base_value),
      std::addressof(_tao_is_truncatable),
      std::addressof(_tao_abstract_base_values),
      std::addressof(_tao_supported_interfaces),
      std::addressof(_tao_initializers)
    };
  
  POA_CORBA::Container * const impl =
    dynamic_cast<POA_CORBA::Container *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_value_Container command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 11
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_value_box_Container
    : public TAO::Upcall_Command
  {
  public:
    inline create_value_box_Container (
      POA_CORBA::Container * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ValueBoxDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ValueBoxDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          4);
        
      retval =
        this->servant_->create_value_box (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }
  
  private:
    POA_CORBA::Container * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Container::create_value_box_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ValueBoxDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_original_type_def;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version),
      std::addressof(_tao_original_type_def)
    };
  
  POA_CORBA::Container * const impl =
    dynamic_cast<POA_CORBA::Container *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_value_box_Container command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 5
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_exception_Container
    : public TAO::Upcall_Command
  {
  public:
    inline create_exception_Container (
      POA_CORBA::Container * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ExceptionDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ExceptionDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::StructMemberSeq>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::CORBA::StructMemberSeq> (
          this->operation_details_,
          this->args_,
          4);
        
      retval =
        this->servant_->create_exception (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }
  
  private:
    POA_CORBA::Container * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Container::create_exception_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ExceptionDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;
  TAO::SArg_Traits< ::CORBA::StructMemberSeq>::in_arg_val _tao_members;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version),
      std::addressof(_tao_members)
    };
  
  POA_CORBA::Container * const impl =
    dynamic_cast<POA_CORBA::Container *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_exception_Container command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 5
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_native_Container
    : public TAO::Upcall_Command
  {
  public:
    inline create_native_Container (
      POA_CORBA::Container * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::NativeDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::NativeDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->create_native (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_CORBA::Container * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Container::create_native_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::NativeDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version)
    };
  
  POA_CORBA::Container * const impl =
    dynamic_cast<POA_CORBA::Container *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_native_Container command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 4
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_abstract_interface_Container
    : public TAO::Upcall_Command
  {
  public:
    inline create_abstract_interface_Container (
      POA_CORBA::Container * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::AbstractInterfaceDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::AbstractInterfaceDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::AbstractInterfaceDefSeq>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::CORBA::AbstractInterfaceDefSeq> (
          this->operation_details_,
          this->args_,
          4);
        
      retval =
        this->servant_->create_abstract_interface (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }
  
  private:
    POA_CORBA::Container * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Container::create_abstract_interface_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::AbstractInterfaceDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;
  TAO::SArg_Traits< ::CORBA::AbstractInterfaceDefSeq>::in_arg_val _tao_base_interfaces;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version),
      std::addressof(_tao_base_interfaces)
    };
  
  POA_CORBA::Container * const impl =
    dynamic_cast<POA_CORBA::Container *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_abstract_interface_Container command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 5
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_local_interface_Container
    : public TAO::Upcall_Command
  {
  public:
    inline create_local_interface_Container (
      POA_CORBA::Container * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::LocalInterfaceDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::LocalInterfaceDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::InterfaceDefSeq>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::CORBA::InterfaceDefSeq> (
          this->operation_details_,
          this->args_,
          4);
        
      retval =
        this->servant_->create_local_interface (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }
  
  private:
    POA_CORBA::Container * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Container::create_local_interface_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::LocalInterfaceDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;
  TAO::SArg_Traits< ::CORBA::InterfaceDefSeq>::in_arg_val _tao_base_interfaces;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version),
      std::addressof(_tao_base_interfaces)
    };
  
  POA_CORBA::Container * const impl =
    dynamic_cast<POA_CORBA::Container *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_local_interface_Container command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 5
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_ext_value_Container
    : public TAO::Upcall_Command
  {
  public:
    inline create_ext_value_Container (
      POA_CORBA::Container * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ExtValueDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ExtValueDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          4);
        
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_5 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          5);
        
      TAO::SArg_Traits< ::CORBA::ValueDef>::in_arg_type arg_6 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ValueDef> (
          this->operation_details_,
          this->args_,
          6);
        
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_7 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          7);
        
      TAO::SArg_Traits< ::CORBA::ValueDefSeq>::in_arg_type arg_8 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ValueDefSeq> (
          this->operation_details_,
          this->args_,
          8);
        
      TAO::SArg_Traits< ::CORBA::InterfaceDefSeq>::in_arg_type arg_9 =
        TAO::Portable_Server::get_in_arg< ::CORBA::InterfaceDefSeq> (
          this->operation_details_,
          this->args_,
          9);
        
      TAO::SArg_Traits< ::CORBA::ExtInitializerSeq>::in_arg_type arg_10 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ExtInitializerSeq> (
          this->operation_details_,
          this->args_,
          10);
        
      retval =
        this->servant_->create_ext_value (
          arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5
          , arg_6
          , arg_7
          , arg_8
          , arg_9
          , arg_10);
    }
  
  private:
    POA_CORBA::Container * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Container::create_ext_value_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ExtValueDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_is_custom;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_is_abstract;
  TAO::SArg_Traits< ::CORBA::ValueDef>::in_arg_val _tao_base_value;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_is_truncatable;
  TAO::SArg_Traits< ::CORBA::ValueDefSeq>::in_arg_val _tao_abstract_base_values;
  TAO::SArg_Traits< ::CORBA::InterfaceDefSeq>::in_arg_val _tao_supported_interfaces;
  TAO::SArg_Traits< ::CORBA::ExtInitializerSeq>::in_arg_val _tao_initializers;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version),
      std::addressof(_tao_is_custom),
      std::addressof(_tao_is_abstract),
      std::addressof(_tao_base_value),
      std::addressof(_tao_is_truncatable),
      std::addressof(_tao_abstract_base_values),
      std::addressof(_tao_supported_interfaces),
      std::addressof(_tao_initializers)
    };
  
  POA_CORBA::Container * const impl =
    dynamic_cast<POA_CORBA::Container *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_ext_value_Container command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 11
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::Container::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Container:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::Container::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/Container:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::Container::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::Container *
POA_CORBA::Container::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::Container>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_IDLType_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::IDLType::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::IDLType::destroy_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::IDLType::_get_type_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_IDLType_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (24);
static char _tao_CORBA_IDLType_optable_pool [_tao_CORBA_IDLType_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_IDLType_allocator (_tao_CORBA_IDLType_optable_pool, _tao_CORBA_IDLType_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_IDLType_optable (
    CORBA_IDLType_operations,
    8,
    16,
    &_tao_CORBA_IDLType_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::IDLType::IDLType ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_IDLType_optable);
}

POA_CORBA::IDLType::IDLType (const IDLType& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_type_IDLType
    : public TAO::Upcall_Command
  {
  public:
    inline _get_type_IDLType (
      POA_CORBA::IDLType * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::TypeCode>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::TypeCode> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->type ();
    }
  
  private:
    POA_CORBA::IDLType * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::IDLType::_get_type_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::TypeCode>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::IDLType * const impl =
    dynamic_cast<POA_CORBA::IDLType *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_type_IDLType command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::IDLType::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::IDLType::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/IDLType:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::IDLType::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::IDLType *
POA_CORBA::IDLType::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::IDLType>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_TypedefDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::TypedefDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::TypedefDef::destroy_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::TypedefDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::TypedefDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::TypedefDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::TypedefDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::TypedefDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::TypedefDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::TypedefDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::TypedefDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::TypedefDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::TypedefDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::TypedefDef::move_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::TypedefDef::_get_type_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_TypedefDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (57);
static char _tao_CORBA_TypedefDef_optable_pool [_tao_CORBA_TypedefDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_TypedefDef_allocator (_tao_CORBA_TypedefDef_optable_pool, _tao_CORBA_TypedefDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_TypedefDef_optable (
    CORBA_TypedefDef_operations,
    19,
    38,
    &_tao_CORBA_TypedefDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::TypedefDef::TypedefDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_TypedefDef_optable);
}

POA_CORBA::TypedefDef::TypedefDef (const TypedefDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Contained (rhs),
    POA_CORBA::IDLType (rhs)
{
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::TypedefDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/TypedefDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::TypedefDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/TypedefDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::TypedefDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::TypedefDef *
POA_CORBA::TypedefDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::TypedefDef>::unchecked_narrow (obj.in ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* ifndef */

