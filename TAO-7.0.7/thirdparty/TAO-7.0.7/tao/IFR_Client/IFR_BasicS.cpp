// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v3.0.7
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_codegen.cpp:622

#ifndef _TAO_IDL_IFR_BASICS_FU8HFG_CPP_
#define _TAO_IDL_IFR_BASICS_FU8HFG_CPP_


#include "IFR_BasicS.h"
#include "tao/PortableServer/Operation_Table_Dynamic_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"
#include "cstring"

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



static const TAO_operation_db_entry CORBA_Repository_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::Repository::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::Repository::destroy_skel), nullptr},
  {"lookup", std::addressof(POA_CORBA::Repository::lookup_skel), nullptr},
  {"contents", std::addressof(POA_CORBA::Repository::contents_skel), nullptr},
  {"lookup_name", std::addressof(POA_CORBA::Repository::lookup_name_skel), nullptr},
  {"describe_contents", std::addressof(POA_CORBA::Repository::describe_contents_skel), nullptr},
  {"create_module", std::addressof(POA_CORBA::Repository::create_module_skel), nullptr},
  {"create_constant", std::addressof(POA_CORBA::Repository::create_constant_skel), nullptr},
  {"create_struct", std::addressof(POA_CORBA::Repository::create_struct_skel), nullptr},
  {"create_union", std::addressof(POA_CORBA::Repository::create_union_skel), nullptr},
  {"create_enum", std::addressof(POA_CORBA::Repository::create_enum_skel), nullptr},
  {"create_alias", std::addressof(POA_CORBA::Repository::create_alias_skel), nullptr},
  {"create_interface", std::addressof(POA_CORBA::Repository::create_interface_skel), nullptr},
  {"create_value", std::addressof(POA_CORBA::Repository::create_value_skel), nullptr},
  {"create_value_box", std::addressof(POA_CORBA::Repository::create_value_box_skel), nullptr},
  {"create_exception", std::addressof(POA_CORBA::Repository::create_exception_skel), nullptr},
  {"create_native", std::addressof(POA_CORBA::Repository::create_native_skel), nullptr},
  {"create_abstract_interface", std::addressof(POA_CORBA::Repository::create_abstract_interface_skel), nullptr},
  {"create_local_interface", std::addressof(POA_CORBA::Repository::create_local_interface_skel), nullptr},
  {"create_ext_value", std::addressof(POA_CORBA::Repository::create_ext_value_skel), nullptr},
  {"lookup_id", std::addressof(POA_CORBA::Repository::lookup_id_skel), nullptr},
  {"get_canonical_typecode", std::addressof(POA_CORBA::Repository::get_canonical_typecode_skel), nullptr},
  {"get_primitive", std::addressof(POA_CORBA::Repository::get_primitive_skel), nullptr},
  {"create_string", std::addressof(POA_CORBA::Repository::create_string_skel), nullptr},
  {"create_wstring", std::addressof(POA_CORBA::Repository::create_wstring_skel), nullptr},
  {"create_sequence", std::addressof(POA_CORBA::Repository::create_sequence_skel), nullptr},
  {"create_array", std::addressof(POA_CORBA::Repository::create_array_skel), nullptr},
  {"create_fixed", std::addressof(POA_CORBA::Repository::create_fixed_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_Repository_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (99);
static char _tao_CORBA_Repository_optable_pool [_tao_CORBA_Repository_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_Repository_allocator (_tao_CORBA_Repository_optable_pool, _tao_CORBA_Repository_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_Repository_optable (
    CORBA_Repository_operations,
    33,
    66,
    &_tao_CORBA_Repository_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::Repository::Repository ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_Repository_optable);
}

POA_CORBA::Repository::Repository (const Repository& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Container (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class lookup_id_Repository
    : public TAO::Upcall_Command
  {
  public:
    inline lookup_id_Repository (
      POA_CORBA::Repository * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Contained>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Contained> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->lookup_id (
          arg_1);
    }
  
  private:
    POA_CORBA::Repository * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Repository::lookup_id_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::Contained>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_search_id;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_search_id)
    };
  
  POA_CORBA::Repository * const impl =
    dynamic_cast<POA_CORBA::Repository *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  lookup_id_Repository command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class get_canonical_typecode_Repository
    : public TAO::Upcall_Command
  {
  public:
    inline get_canonical_typecode_Repository (
      POA_CORBA::Repository * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::TypeCode>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::TypeCode> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::TypeCode>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::TypeCode> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_canonical_typecode (
          arg_1);
    }
  
  private:
    POA_CORBA::Repository * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Repository::get_canonical_typecode_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::TypeCode>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::TypeCode>::in_arg_val _tao_tc;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_tc)
    };
  
  POA_CORBA::Repository * const impl =
    dynamic_cast<POA_CORBA::Repository *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_canonical_typecode_Repository command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class get_primitive_Repository
    : public TAO::Upcall_Command
  {
  public:
    inline get_primitive_Repository (
      POA_CORBA::Repository * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::PrimitiveDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::PrimitiveDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::PrimitiveKind>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::PrimitiveKind> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_primitive (
          arg_1);
    }
  
  private:
    POA_CORBA::Repository * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Repository::get_primitive_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::PrimitiveDef>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::PrimitiveKind>::in_arg_val _tao_kind;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_kind)
    };
  
  POA_CORBA::Repository * const impl =
    dynamic_cast<POA_CORBA::Repository *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_primitive_Repository command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_string_Repository
    : public TAO::Upcall_Command
  {
  public:
    inline create_string_Repository (
      POA_CORBA::Repository * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::StringDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::StringDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->create_string (
          arg_1);
    }
  
  private:
    POA_CORBA::Repository * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Repository::create_string_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::StringDef>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_bound;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_bound)
    };
  
  POA_CORBA::Repository * const impl =
    dynamic_cast<POA_CORBA::Repository *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_string_Repository command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_wstring_Repository
    : public TAO::Upcall_Command
  {
  public:
    inline create_wstring_Repository (
      POA_CORBA::Repository * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::WstringDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::WstringDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->create_wstring (
          arg_1);
    }
  
  private:
    POA_CORBA::Repository * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Repository::create_wstring_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::WstringDef>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_bound;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_bound)
    };
  
  POA_CORBA::Repository * const impl =
    dynamic_cast<POA_CORBA::Repository *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_wstring_Repository command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_sequence_Repository
    : public TAO::Upcall_Command
  {
  public:
    inline create_sequence_Repository (
      POA_CORBA::Repository * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::SequenceDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::SequenceDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->create_sequence (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CORBA::Repository * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Repository::create_sequence_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::SequenceDef>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_bound;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_element_type;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_bound),
      std::addressof(_tao_element_type)
    };
  
  POA_CORBA::Repository * const impl =
    dynamic_cast<POA_CORBA::Repository *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_sequence_Repository command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 3
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_array_Repository
    : public TAO::Upcall_Command
  {
  public:
    inline create_array_Repository (
      POA_CORBA::Repository * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ArrayDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ArrayDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->create_array (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CORBA::Repository * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Repository::create_array_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ArrayDef>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_length;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_element_type;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_length),
      std::addressof(_tao_element_type)
    };
  
  POA_CORBA::Repository * const impl =
    dynamic_cast<POA_CORBA::Repository *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_array_Repository command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 3
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_fixed_Repository
    : public TAO::Upcall_Command
  {
  public:
    inline create_fixed_Repository (
      POA_CORBA::Repository * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::FixedDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::FixedDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::UShort>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::UShort> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->create_fixed (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CORBA::Repository * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::Repository::create_fixed_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::FixedDef>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::UShort>::in_arg_val _tao_digits;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_scale;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_digits),
      std::addressof(_tao_scale)
    };
  
  POA_CORBA::Repository * const impl =
    dynamic_cast<POA_CORBA::Repository *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_fixed_Repository command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 3
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::Repository::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Container:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Repository:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::Repository::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/Repository:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::Repository::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::Repository *
POA_CORBA::Repository::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::Repository>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_ModuleDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::ModuleDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::ModuleDef::destroy_skel), nullptr},
  {"lookup", std::addressof(POA_CORBA::ModuleDef::lookup_skel), nullptr},
  {"contents", std::addressof(POA_CORBA::ModuleDef::contents_skel), nullptr},
  {"lookup_name", std::addressof(POA_CORBA::ModuleDef::lookup_name_skel), nullptr},
  {"describe_contents", std::addressof(POA_CORBA::ModuleDef::describe_contents_skel), nullptr},
  {"create_module", std::addressof(POA_CORBA::ModuleDef::create_module_skel), nullptr},
  {"create_constant", std::addressof(POA_CORBA::ModuleDef::create_constant_skel), nullptr},
  {"create_struct", std::addressof(POA_CORBA::ModuleDef::create_struct_skel), nullptr},
  {"create_union", std::addressof(POA_CORBA::ModuleDef::create_union_skel), nullptr},
  {"create_enum", std::addressof(POA_CORBA::ModuleDef::create_enum_skel), nullptr},
  {"create_alias", std::addressof(POA_CORBA::ModuleDef::create_alias_skel), nullptr},
  {"create_interface", std::addressof(POA_CORBA::ModuleDef::create_interface_skel), nullptr},
  {"create_value", std::addressof(POA_CORBA::ModuleDef::create_value_skel), nullptr},
  {"create_value_box", std::addressof(POA_CORBA::ModuleDef::create_value_box_skel), nullptr},
  {"create_exception", std::addressof(POA_CORBA::ModuleDef::create_exception_skel), nullptr},
  {"create_native", std::addressof(POA_CORBA::ModuleDef::create_native_skel), nullptr},
  {"create_abstract_interface", std::addressof(POA_CORBA::ModuleDef::create_abstract_interface_skel), nullptr},
  {"create_local_interface", std::addressof(POA_CORBA::ModuleDef::create_local_interface_skel), nullptr},
  {"create_ext_value", std::addressof(POA_CORBA::ModuleDef::create_ext_value_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::ModuleDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::ModuleDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::ModuleDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::ModuleDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::ModuleDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::ModuleDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::ModuleDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::ModuleDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::ModuleDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::ModuleDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::ModuleDef::move_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_ModuleDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (108);
static char _tao_CORBA_ModuleDef_optable_pool [_tao_CORBA_ModuleDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_ModuleDef_allocator (_tao_CORBA_ModuleDef_optable_pool, _tao_CORBA_ModuleDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_ModuleDef_optable (
    CORBA_ModuleDef_operations,
    36,
    72,
    &_tao_CORBA_ModuleDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::ModuleDef::ModuleDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_ModuleDef_optable);
}

POA_CORBA::ModuleDef::ModuleDef (const ModuleDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Container (rhs),
    POA_CORBA::Contained (rhs)
{
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::ModuleDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Container:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/ModuleDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::ModuleDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/ModuleDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::ModuleDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::ModuleDef *
POA_CORBA::ModuleDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::ModuleDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_ConstantDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::ConstantDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::ConstantDef::destroy_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::ConstantDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::ConstantDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::ConstantDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::ConstantDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::ConstantDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::ConstantDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::ConstantDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::ConstantDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::ConstantDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::ConstantDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::ConstantDef::move_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::ConstantDef::_get_type_skel), nullptr},
  {"_get_type_def", std::addressof(POA_CORBA::ConstantDef::_get_type_def_skel), nullptr},
  {"_set_type_def", std::addressof(POA_CORBA::ConstantDef::_set_type_def_skel), nullptr},
  {"_get_value", std::addressof(POA_CORBA::ConstantDef::_get_value_skel), nullptr},
  {"_set_value", std::addressof(POA_CORBA::ConstantDef::_set_value_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_ConstantDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (69);
static char _tao_CORBA_ConstantDef_optable_pool [_tao_CORBA_ConstantDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_ConstantDef_allocator (_tao_CORBA_ConstantDef_optable_pool, _tao_CORBA_ConstantDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_ConstantDef_optable (
    CORBA_ConstantDef_operations,
    23,
    46,
    &_tao_CORBA_ConstantDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::ConstantDef::ConstantDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_ConstantDef_optable);
}

POA_CORBA::ConstantDef::ConstantDef (const ConstantDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Contained (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_type_ConstantDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_type_ConstantDef (
      POA_CORBA::ConstantDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::TypeCode>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::TypeCode> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->type ();
    }
  
  private:
    POA_CORBA::ConstantDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ConstantDef::_get_type_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::TypeCode>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ConstantDef * const impl =
    dynamic_cast<POA_CORBA::ConstantDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_type_ConstantDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_type_def_ConstantDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_type_def_ConstantDef (
      POA_CORBA::ConstantDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::IDLType>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->type_def ();
    }
  
  private:
    POA_CORBA::ConstantDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ConstantDef::_get_type_def_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::IDLType>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ConstantDef * const impl =
    dynamic_cast<POA_CORBA::ConstantDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_type_def_ConstantDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_type_def_ConstantDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_type_def_ConstantDef (
      POA_CORBA::ConstantDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->type_def (
        arg_1);
    }
  
  private:
    POA_CORBA::ConstantDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ConstantDef::_set_type_def_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_type_def;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_type_def)
    };
  
  POA_CORBA::ConstantDef * const impl =
    dynamic_cast<POA_CORBA::ConstantDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_type_def_ConstantDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_value_ConstantDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_value_ConstantDef (
      POA_CORBA::ConstantDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Any>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->value ();
    }
  
  private:
    POA_CORBA::ConstantDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ConstantDef::_get_value_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::Any>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ConstantDef * const impl =
    dynamic_cast<POA_CORBA::ConstantDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_value_ConstantDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_value_ConstantDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_value_ConstantDef (
      POA_CORBA::ConstantDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->value (
        arg_1);
    }
  
  private:
    POA_CORBA::ConstantDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ConstantDef::_set_value_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_value;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_value)
    };
  
  POA_CORBA::ConstantDef * const impl =
    dynamic_cast<POA_CORBA::ConstantDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_value_ConstantDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::ConstantDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/ConstantDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::ConstantDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/ConstantDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::ConstantDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::ConstantDef *
POA_CORBA::ConstantDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::ConstantDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_StructDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::StructDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::StructDef::destroy_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::StructDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::StructDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::StructDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::StructDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::StructDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::StructDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::StructDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::StructDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::StructDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::StructDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::StructDef::move_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::StructDef::_get_type_skel), nullptr},
  {"lookup", std::addressof(POA_CORBA::StructDef::lookup_skel), nullptr},
  {"contents", std::addressof(POA_CORBA::StructDef::contents_skel), nullptr},
  {"lookup_name", std::addressof(POA_CORBA::StructDef::lookup_name_skel), nullptr},
  {"describe_contents", std::addressof(POA_CORBA::StructDef::describe_contents_skel), nullptr},
  {"create_module", std::addressof(POA_CORBA::StructDef::create_module_skel), nullptr},
  {"create_constant", std::addressof(POA_CORBA::StructDef::create_constant_skel), nullptr},
  {"create_struct", std::addressof(POA_CORBA::StructDef::create_struct_skel), nullptr},
  {"create_union", std::addressof(POA_CORBA::StructDef::create_union_skel), nullptr},
  {"create_enum", std::addressof(POA_CORBA::StructDef::create_enum_skel), nullptr},
  {"create_alias", std::addressof(POA_CORBA::StructDef::create_alias_skel), nullptr},
  {"create_interface", std::addressof(POA_CORBA::StructDef::create_interface_skel), nullptr},
  {"create_value", std::addressof(POA_CORBA::StructDef::create_value_skel), nullptr},
  {"create_value_box", std::addressof(POA_CORBA::StructDef::create_value_box_skel), nullptr},
  {"create_exception", std::addressof(POA_CORBA::StructDef::create_exception_skel), nullptr},
  {"create_native", std::addressof(POA_CORBA::StructDef::create_native_skel), nullptr},
  {"create_abstract_interface", std::addressof(POA_CORBA::StructDef::create_abstract_interface_skel), nullptr},
  {"create_local_interface", std::addressof(POA_CORBA::StructDef::create_local_interface_skel), nullptr},
  {"create_ext_value", std::addressof(POA_CORBA::StructDef::create_ext_value_skel), nullptr},
  {"_get_members", std::addressof(POA_CORBA::StructDef::_get_members_skel), nullptr},
  {"_set_members", std::addressof(POA_CORBA::StructDef::_set_members_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_StructDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (117);
static char _tao_CORBA_StructDef_optable_pool [_tao_CORBA_StructDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_StructDef_allocator (_tao_CORBA_StructDef_optable_pool, _tao_CORBA_StructDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_StructDef_optable (
    CORBA_StructDef_operations,
    39,
    78,
    &_tao_CORBA_StructDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::StructDef::StructDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_StructDef_optable);
}

POA_CORBA::StructDef::StructDef (const StructDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Contained (rhs),
    POA_CORBA::IDLType (rhs),
    POA_CORBA::TypedefDef (rhs),
    POA_CORBA::Container (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_members_StructDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_members_StructDef (
      POA_CORBA::StructDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::StructMemberSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::StructMemberSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->members ();
    }
  
  private:
    POA_CORBA::StructDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::StructDef::_get_members_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::StructMemberSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::StructDef * const impl =
    dynamic_cast<POA_CORBA::StructDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_members_StructDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_members_StructDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_members_StructDef (
      POA_CORBA::StructDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::StructMemberSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::StructMemberSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->members (
        arg_1);
    }
  
  private:
    POA_CORBA::StructDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::StructDef::_set_members_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::StructMemberSeq>::in_arg_val _tao_members;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_members)
    };
  
  POA_CORBA::StructDef * const impl =
    dynamic_cast<POA_CORBA::StructDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_members_StructDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::StructDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/TypedefDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Container:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/StructDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::StructDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/StructDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::StructDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::StructDef *
POA_CORBA::StructDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::StructDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_UnionDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::UnionDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::UnionDef::destroy_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::UnionDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::UnionDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::UnionDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::UnionDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::UnionDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::UnionDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::UnionDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::UnionDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::UnionDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::UnionDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::UnionDef::move_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::UnionDef::_get_type_skel), nullptr},
  {"lookup", std::addressof(POA_CORBA::UnionDef::lookup_skel), nullptr},
  {"contents", std::addressof(POA_CORBA::UnionDef::contents_skel), nullptr},
  {"lookup_name", std::addressof(POA_CORBA::UnionDef::lookup_name_skel), nullptr},
  {"describe_contents", std::addressof(POA_CORBA::UnionDef::describe_contents_skel), nullptr},
  {"create_module", std::addressof(POA_CORBA::UnionDef::create_module_skel), nullptr},
  {"create_constant", std::addressof(POA_CORBA::UnionDef::create_constant_skel), nullptr},
  {"create_struct", std::addressof(POA_CORBA::UnionDef::create_struct_skel), nullptr},
  {"create_union", std::addressof(POA_CORBA::UnionDef::create_union_skel), nullptr},
  {"create_enum", std::addressof(POA_CORBA::UnionDef::create_enum_skel), nullptr},
  {"create_alias", std::addressof(POA_CORBA::UnionDef::create_alias_skel), nullptr},
  {"create_interface", std::addressof(POA_CORBA::UnionDef::create_interface_skel), nullptr},
  {"create_value", std::addressof(POA_CORBA::UnionDef::create_value_skel), nullptr},
  {"create_value_box", std::addressof(POA_CORBA::UnionDef::create_value_box_skel), nullptr},
  {"create_exception", std::addressof(POA_CORBA::UnionDef::create_exception_skel), nullptr},
  {"create_native", std::addressof(POA_CORBA::UnionDef::create_native_skel), nullptr},
  {"create_abstract_interface", std::addressof(POA_CORBA::UnionDef::create_abstract_interface_skel), nullptr},
  {"create_local_interface", std::addressof(POA_CORBA::UnionDef::create_local_interface_skel), nullptr},
  {"create_ext_value", std::addressof(POA_CORBA::UnionDef::create_ext_value_skel), nullptr},
  {"_get_discriminator_type", std::addressof(POA_CORBA::UnionDef::_get_discriminator_type_skel), nullptr},
  {"_get_discriminator_type_def", std::addressof(POA_CORBA::UnionDef::_get_discriminator_type_def_skel), nullptr},
  {"_set_discriminator_type_def", std::addressof(POA_CORBA::UnionDef::_set_discriminator_type_def_skel), nullptr},
  {"_get_members", std::addressof(POA_CORBA::UnionDef::_get_members_skel), nullptr},
  {"_set_members", std::addressof(POA_CORBA::UnionDef::_set_members_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_UnionDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (126);
static char _tao_CORBA_UnionDef_optable_pool [_tao_CORBA_UnionDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_UnionDef_allocator (_tao_CORBA_UnionDef_optable_pool, _tao_CORBA_UnionDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_UnionDef_optable (
    CORBA_UnionDef_operations,
    42,
    84,
    &_tao_CORBA_UnionDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::UnionDef::UnionDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_UnionDef_optable);
}

POA_CORBA::UnionDef::UnionDef (const UnionDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Contained (rhs),
    POA_CORBA::IDLType (rhs),
    POA_CORBA::TypedefDef (rhs),
    POA_CORBA::Container (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_discriminator_type_UnionDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_discriminator_type_UnionDef (
      POA_CORBA::UnionDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::TypeCode>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::TypeCode> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->discriminator_type ();
    }
  
  private:
    POA_CORBA::UnionDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::UnionDef::_get_discriminator_type_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::TypeCode>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::UnionDef * const impl =
    dynamic_cast<POA_CORBA::UnionDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_discriminator_type_UnionDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_discriminator_type_def_UnionDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_discriminator_type_def_UnionDef (
      POA_CORBA::UnionDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::IDLType>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->discriminator_type_def ();
    }
  
  private:
    POA_CORBA::UnionDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::UnionDef::_get_discriminator_type_def_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::IDLType>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::UnionDef * const impl =
    dynamic_cast<POA_CORBA::UnionDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_discriminator_type_def_UnionDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_discriminator_type_def_UnionDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_discriminator_type_def_UnionDef (
      POA_CORBA::UnionDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->discriminator_type_def (
        arg_1);
    }
  
  private:
    POA_CORBA::UnionDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::UnionDef::_set_discriminator_type_def_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_discriminator_type_def;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_discriminator_type_def)
    };
  
  POA_CORBA::UnionDef * const impl =
    dynamic_cast<POA_CORBA::UnionDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_discriminator_type_def_UnionDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_members_UnionDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_members_UnionDef (
      POA_CORBA::UnionDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::UnionMemberSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::UnionMemberSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->members ();
    }
  
  private:
    POA_CORBA::UnionDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::UnionDef::_get_members_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::UnionMemberSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::UnionDef * const impl =
    dynamic_cast<POA_CORBA::UnionDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_members_UnionDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_members_UnionDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_members_UnionDef (
      POA_CORBA::UnionDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::UnionMemberSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::UnionMemberSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->members (
        arg_1);
    }
  
  private:
    POA_CORBA::UnionDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::UnionDef::_set_members_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::UnionMemberSeq>::in_arg_val _tao_members;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_members)
    };
  
  POA_CORBA::UnionDef * const impl =
    dynamic_cast<POA_CORBA::UnionDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_members_UnionDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::UnionDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/TypedefDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Container:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/UnionDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::UnionDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/UnionDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::UnionDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::UnionDef *
POA_CORBA::UnionDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::UnionDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_EnumDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::EnumDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::EnumDef::destroy_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::EnumDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::EnumDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::EnumDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::EnumDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::EnumDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::EnumDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::EnumDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::EnumDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::EnumDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::EnumDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::EnumDef::move_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::EnumDef::_get_type_skel), nullptr},
  {"_get_members", std::addressof(POA_CORBA::EnumDef::_get_members_skel), nullptr},
  {"_set_members", std::addressof(POA_CORBA::EnumDef::_set_members_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_EnumDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (63);
static char _tao_CORBA_EnumDef_optable_pool [_tao_CORBA_EnumDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_EnumDef_allocator (_tao_CORBA_EnumDef_optable_pool, _tao_CORBA_EnumDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_EnumDef_optable (
    CORBA_EnumDef_operations,
    21,
    42,
    &_tao_CORBA_EnumDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::EnumDef::EnumDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_EnumDef_optable);
}

POA_CORBA::EnumDef::EnumDef (const EnumDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Contained (rhs),
    POA_CORBA::IDLType (rhs),
    POA_CORBA::TypedefDef (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_members_EnumDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_members_EnumDef (
      POA_CORBA::EnumDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::EnumMemberSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::EnumMemberSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->members ();
    }
  
  private:
    POA_CORBA::EnumDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::EnumDef::_get_members_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::EnumMemberSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::EnumDef * const impl =
    dynamic_cast<POA_CORBA::EnumDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_members_EnumDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_members_EnumDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_members_EnumDef (
      POA_CORBA::EnumDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::EnumMemberSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::EnumMemberSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->members (
        arg_1);
    }
  
  private:
    POA_CORBA::EnumDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::EnumDef::_set_members_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::EnumMemberSeq>::in_arg_val _tao_members;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_members)
    };
  
  POA_CORBA::EnumDef * const impl =
    dynamic_cast<POA_CORBA::EnumDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_members_EnumDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::EnumDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/TypedefDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/EnumDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::EnumDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/EnumDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::EnumDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::EnumDef *
POA_CORBA::EnumDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::EnumDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_AliasDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::AliasDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::AliasDef::destroy_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::AliasDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::AliasDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::AliasDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::AliasDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::AliasDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::AliasDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::AliasDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::AliasDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::AliasDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::AliasDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::AliasDef::move_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::AliasDef::_get_type_skel), nullptr},
  {"_get_original_type_def", std::addressof(POA_CORBA::AliasDef::_get_original_type_def_skel), nullptr},
  {"_set_original_type_def", std::addressof(POA_CORBA::AliasDef::_set_original_type_def_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_AliasDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (63);
static char _tao_CORBA_AliasDef_optable_pool [_tao_CORBA_AliasDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_AliasDef_allocator (_tao_CORBA_AliasDef_optable_pool, _tao_CORBA_AliasDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_AliasDef_optable (
    CORBA_AliasDef_operations,
    21,
    42,
    &_tao_CORBA_AliasDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::AliasDef::AliasDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_AliasDef_optable);
}

POA_CORBA::AliasDef::AliasDef (const AliasDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Contained (rhs),
    POA_CORBA::IDLType (rhs),
    POA_CORBA::TypedefDef (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_original_type_def_AliasDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_original_type_def_AliasDef (
      POA_CORBA::AliasDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::IDLType>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->original_type_def ();
    }
  
  private:
    POA_CORBA::AliasDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::AliasDef::_get_original_type_def_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::IDLType>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::AliasDef * const impl =
    dynamic_cast<POA_CORBA::AliasDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_original_type_def_AliasDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_original_type_def_AliasDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_original_type_def_AliasDef (
      POA_CORBA::AliasDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->original_type_def (
        arg_1);
    }
  
  private:
    POA_CORBA::AliasDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::AliasDef::_set_original_type_def_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_original_type_def;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_original_type_def)
    };
  
  POA_CORBA::AliasDef * const impl =
    dynamic_cast<POA_CORBA::AliasDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_original_type_def_AliasDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::AliasDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/TypedefDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/AliasDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::AliasDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/AliasDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::AliasDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::AliasDef *
POA_CORBA::AliasDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::AliasDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_NativeDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::NativeDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::NativeDef::destroy_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::NativeDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::NativeDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::NativeDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::NativeDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::NativeDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::NativeDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::NativeDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::NativeDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::NativeDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::NativeDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::NativeDef::move_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::NativeDef::_get_type_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_NativeDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (57);
static char _tao_CORBA_NativeDef_optable_pool [_tao_CORBA_NativeDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_NativeDef_allocator (_tao_CORBA_NativeDef_optable_pool, _tao_CORBA_NativeDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_NativeDef_optable (
    CORBA_NativeDef_operations,
    19,
    38,
    &_tao_CORBA_NativeDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::NativeDef::NativeDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_NativeDef_optable);
}

POA_CORBA::NativeDef::NativeDef (const NativeDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Contained (rhs),
    POA_CORBA::IDLType (rhs),
    POA_CORBA::TypedefDef (rhs)
{
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::NativeDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/TypedefDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/NativeDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::NativeDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/NativeDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::NativeDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::NativeDef *
POA_CORBA::NativeDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::NativeDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_PrimitiveDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::PrimitiveDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::PrimitiveDef::destroy_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::PrimitiveDef::_get_type_skel), nullptr},
  {"_get_kind", std::addressof(POA_CORBA::PrimitiveDef::_get_kind_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_PrimitiveDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (27);
static char _tao_CORBA_PrimitiveDef_optable_pool [_tao_CORBA_PrimitiveDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_PrimitiveDef_allocator (_tao_CORBA_PrimitiveDef_optable_pool, _tao_CORBA_PrimitiveDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_PrimitiveDef_optable (
    CORBA_PrimitiveDef_operations,
    9,
    18,
    &_tao_CORBA_PrimitiveDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::PrimitiveDef::PrimitiveDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_PrimitiveDef_optable);
}

POA_CORBA::PrimitiveDef::PrimitiveDef (const PrimitiveDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::IDLType (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_kind_PrimitiveDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_kind_PrimitiveDef (
      POA_CORBA::PrimitiveDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::PrimitiveKind>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::PrimitiveKind> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->kind ();
    }
  
  private:
    POA_CORBA::PrimitiveDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::PrimitiveDef::_get_kind_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::PrimitiveKind>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::PrimitiveDef * const impl =
    dynamic_cast<POA_CORBA::PrimitiveDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_kind_PrimitiveDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::PrimitiveDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/PrimitiveDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::PrimitiveDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/PrimitiveDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::PrimitiveDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::PrimitiveDef *
POA_CORBA::PrimitiveDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::PrimitiveDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_StringDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::StringDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::StringDef::destroy_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::StringDef::_get_type_skel), nullptr},
  {"_get_bound", std::addressof(POA_CORBA::StringDef::_get_bound_skel), nullptr},
  {"_set_bound", std::addressof(POA_CORBA::StringDef::_set_bound_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_StringDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (30);
static char _tao_CORBA_StringDef_optable_pool [_tao_CORBA_StringDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_StringDef_allocator (_tao_CORBA_StringDef_optable_pool, _tao_CORBA_StringDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_StringDef_optable (
    CORBA_StringDef_operations,
    10,
    20,
    &_tao_CORBA_StringDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::StringDef::StringDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_StringDef_optable);
}

POA_CORBA::StringDef::StringDef (const StringDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::IDLType (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_bound_StringDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_bound_StringDef (
      POA_CORBA::StringDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ULong>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->bound ();
    }
  
  private:
    POA_CORBA::StringDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::StringDef::_get_bound_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ULong>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::StringDef * const impl =
    dynamic_cast<POA_CORBA::StringDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_bound_StringDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_bound_StringDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_bound_StringDef (
      POA_CORBA::StringDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->bound (
        arg_1);
    }
  
  private:
    POA_CORBA::StringDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::StringDef::_set_bound_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_bound;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_bound)
    };
  
  POA_CORBA::StringDef * const impl =
    dynamic_cast<POA_CORBA::StringDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_bound_StringDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::StringDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/StringDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::StringDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/StringDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::StringDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::StringDef *
POA_CORBA::StringDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::StringDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_WstringDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::WstringDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::WstringDef::destroy_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::WstringDef::_get_type_skel), nullptr},
  {"_get_bound", std::addressof(POA_CORBA::WstringDef::_get_bound_skel), nullptr},
  {"_set_bound", std::addressof(POA_CORBA::WstringDef::_set_bound_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_WstringDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (30);
static char _tao_CORBA_WstringDef_optable_pool [_tao_CORBA_WstringDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_WstringDef_allocator (_tao_CORBA_WstringDef_optable_pool, _tao_CORBA_WstringDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_WstringDef_optable (
    CORBA_WstringDef_operations,
    10,
    20,
    &_tao_CORBA_WstringDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::WstringDef::WstringDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_WstringDef_optable);
}

POA_CORBA::WstringDef::WstringDef (const WstringDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::IDLType (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_bound_WstringDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_bound_WstringDef (
      POA_CORBA::WstringDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ULong>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->bound ();
    }
  
  private:
    POA_CORBA::WstringDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::WstringDef::_get_bound_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ULong>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::WstringDef * const impl =
    dynamic_cast<POA_CORBA::WstringDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_bound_WstringDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_bound_WstringDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_bound_WstringDef (
      POA_CORBA::WstringDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->bound (
        arg_1);
    }
  
  private:
    POA_CORBA::WstringDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::WstringDef::_set_bound_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_bound;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_bound)
    };
  
  POA_CORBA::WstringDef * const impl =
    dynamic_cast<POA_CORBA::WstringDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_bound_WstringDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::WstringDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/WstringDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::WstringDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/WstringDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::WstringDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::WstringDef *
POA_CORBA::WstringDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::WstringDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_SequenceDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::SequenceDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::SequenceDef::destroy_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::SequenceDef::_get_type_skel), nullptr},
  {"_get_bound", std::addressof(POA_CORBA::SequenceDef::_get_bound_skel), nullptr},
  {"_set_bound", std::addressof(POA_CORBA::SequenceDef::_set_bound_skel), nullptr},
  {"_get_element_type", std::addressof(POA_CORBA::SequenceDef::_get_element_type_skel), nullptr},
  {"_get_element_type_def", std::addressof(POA_CORBA::SequenceDef::_get_element_type_def_skel), nullptr},
  {"_set_element_type_def", std::addressof(POA_CORBA::SequenceDef::_set_element_type_def_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_SequenceDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (39);
static char _tao_CORBA_SequenceDef_optable_pool [_tao_CORBA_SequenceDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_SequenceDef_allocator (_tao_CORBA_SequenceDef_optable_pool, _tao_CORBA_SequenceDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_SequenceDef_optable (
    CORBA_SequenceDef_operations,
    13,
    26,
    &_tao_CORBA_SequenceDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::SequenceDef::SequenceDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_SequenceDef_optable);
}

POA_CORBA::SequenceDef::SequenceDef (const SequenceDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::IDLType (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_bound_SequenceDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_bound_SequenceDef (
      POA_CORBA::SequenceDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ULong>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->bound ();
    }
  
  private:
    POA_CORBA::SequenceDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::SequenceDef::_get_bound_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ULong>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::SequenceDef * const impl =
    dynamic_cast<POA_CORBA::SequenceDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_bound_SequenceDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_bound_SequenceDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_bound_SequenceDef (
      POA_CORBA::SequenceDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->bound (
        arg_1);
    }
  
  private:
    POA_CORBA::SequenceDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::SequenceDef::_set_bound_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_bound;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_bound)
    };
  
  POA_CORBA::SequenceDef * const impl =
    dynamic_cast<POA_CORBA::SequenceDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_bound_SequenceDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_element_type_SequenceDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_element_type_SequenceDef (
      POA_CORBA::SequenceDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::TypeCode>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::TypeCode> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->element_type ();
    }
  
  private:
    POA_CORBA::SequenceDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::SequenceDef::_get_element_type_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::TypeCode>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::SequenceDef * const impl =
    dynamic_cast<POA_CORBA::SequenceDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_element_type_SequenceDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_element_type_def_SequenceDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_element_type_def_SequenceDef (
      POA_CORBA::SequenceDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::IDLType>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->element_type_def ();
    }
  
  private:
    POA_CORBA::SequenceDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::SequenceDef::_get_element_type_def_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::IDLType>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::SequenceDef * const impl =
    dynamic_cast<POA_CORBA::SequenceDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_element_type_def_SequenceDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_element_type_def_SequenceDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_element_type_def_SequenceDef (
      POA_CORBA::SequenceDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->element_type_def (
        arg_1);
    }
  
  private:
    POA_CORBA::SequenceDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::SequenceDef::_set_element_type_def_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_element_type_def;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_element_type_def)
    };
  
  POA_CORBA::SequenceDef * const impl =
    dynamic_cast<POA_CORBA::SequenceDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_element_type_def_SequenceDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::SequenceDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/SequenceDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::SequenceDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/SequenceDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::SequenceDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::SequenceDef *
POA_CORBA::SequenceDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::SequenceDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_ArrayDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::ArrayDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::ArrayDef::destroy_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::ArrayDef::_get_type_skel), nullptr},
  {"_get_length", std::addressof(POA_CORBA::ArrayDef::_get_length_skel), nullptr},
  {"_set_length", std::addressof(POA_CORBA::ArrayDef::_set_length_skel), nullptr},
  {"_get_element_type", std::addressof(POA_CORBA::ArrayDef::_get_element_type_skel), nullptr},
  {"_get_element_type_def", std::addressof(POA_CORBA::ArrayDef::_get_element_type_def_skel), nullptr},
  {"_set_element_type_def", std::addressof(POA_CORBA::ArrayDef::_set_element_type_def_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_ArrayDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (39);
static char _tao_CORBA_ArrayDef_optable_pool [_tao_CORBA_ArrayDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_ArrayDef_allocator (_tao_CORBA_ArrayDef_optable_pool, _tao_CORBA_ArrayDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_ArrayDef_optable (
    CORBA_ArrayDef_operations,
    13,
    26,
    &_tao_CORBA_ArrayDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::ArrayDef::ArrayDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_ArrayDef_optable);
}

POA_CORBA::ArrayDef::ArrayDef (const ArrayDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::IDLType (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_length_ArrayDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_length_ArrayDef (
      POA_CORBA::ArrayDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ULong>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->length ();
    }
  
  private:
    POA_CORBA::ArrayDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ArrayDef::_get_length_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ULong>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ArrayDef * const impl =
    dynamic_cast<POA_CORBA::ArrayDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_length_ArrayDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_length_ArrayDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_length_ArrayDef (
      POA_CORBA::ArrayDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->length (
        arg_1);
    }
  
  private:
    POA_CORBA::ArrayDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ArrayDef::_set_length_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_length;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_length)
    };
  
  POA_CORBA::ArrayDef * const impl =
    dynamic_cast<POA_CORBA::ArrayDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_length_ArrayDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_element_type_ArrayDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_element_type_ArrayDef (
      POA_CORBA::ArrayDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::TypeCode>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::TypeCode> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->element_type ();
    }
  
  private:
    POA_CORBA::ArrayDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ArrayDef::_get_element_type_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::TypeCode>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ArrayDef * const impl =
    dynamic_cast<POA_CORBA::ArrayDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_element_type_ArrayDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_element_type_def_ArrayDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_element_type_def_ArrayDef (
      POA_CORBA::ArrayDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::IDLType>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->element_type_def ();
    }
  
  private:
    POA_CORBA::ArrayDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ArrayDef::_get_element_type_def_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::IDLType>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ArrayDef * const impl =
    dynamic_cast<POA_CORBA::ArrayDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_element_type_def_ArrayDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_element_type_def_ArrayDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_element_type_def_ArrayDef (
      POA_CORBA::ArrayDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->element_type_def (
        arg_1);
    }
  
  private:
    POA_CORBA::ArrayDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ArrayDef::_set_element_type_def_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_element_type_def;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_element_type_def)
    };
  
  POA_CORBA::ArrayDef * const impl =
    dynamic_cast<POA_CORBA::ArrayDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_element_type_def_ArrayDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::ArrayDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/ArrayDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::ArrayDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/ArrayDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::ArrayDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::ArrayDef *
POA_CORBA::ArrayDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::ArrayDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_ExceptionDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::ExceptionDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::ExceptionDef::destroy_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::ExceptionDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::ExceptionDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::ExceptionDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::ExceptionDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::ExceptionDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::ExceptionDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::ExceptionDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::ExceptionDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::ExceptionDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::ExceptionDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::ExceptionDef::move_skel), nullptr},
  {"lookup", std::addressof(POA_CORBA::ExceptionDef::lookup_skel), nullptr},
  {"contents", std::addressof(POA_CORBA::ExceptionDef::contents_skel), nullptr},
  {"lookup_name", std::addressof(POA_CORBA::ExceptionDef::lookup_name_skel), nullptr},
  {"describe_contents", std::addressof(POA_CORBA::ExceptionDef::describe_contents_skel), nullptr},
  {"create_module", std::addressof(POA_CORBA::ExceptionDef::create_module_skel), nullptr},
  {"create_constant", std::addressof(POA_CORBA::ExceptionDef::create_constant_skel), nullptr},
  {"create_struct", std::addressof(POA_CORBA::ExceptionDef::create_struct_skel), nullptr},
  {"create_union", std::addressof(POA_CORBA::ExceptionDef::create_union_skel), nullptr},
  {"create_enum", std::addressof(POA_CORBA::ExceptionDef::create_enum_skel), nullptr},
  {"create_alias", std::addressof(POA_CORBA::ExceptionDef::create_alias_skel), nullptr},
  {"create_interface", std::addressof(POA_CORBA::ExceptionDef::create_interface_skel), nullptr},
  {"create_value", std::addressof(POA_CORBA::ExceptionDef::create_value_skel), nullptr},
  {"create_value_box", std::addressof(POA_CORBA::ExceptionDef::create_value_box_skel), nullptr},
  {"create_exception", std::addressof(POA_CORBA::ExceptionDef::create_exception_skel), nullptr},
  {"create_native", std::addressof(POA_CORBA::ExceptionDef::create_native_skel), nullptr},
  {"create_abstract_interface", std::addressof(POA_CORBA::ExceptionDef::create_abstract_interface_skel), nullptr},
  {"create_local_interface", std::addressof(POA_CORBA::ExceptionDef::create_local_interface_skel), nullptr},
  {"create_ext_value", std::addressof(POA_CORBA::ExceptionDef::create_ext_value_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::ExceptionDef::_get_type_skel), nullptr},
  {"_get_members", std::addressof(POA_CORBA::ExceptionDef::_get_members_skel), nullptr},
  {"_set_members", std::addressof(POA_CORBA::ExceptionDef::_set_members_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_ExceptionDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (117);
static char _tao_CORBA_ExceptionDef_optable_pool [_tao_CORBA_ExceptionDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_ExceptionDef_allocator (_tao_CORBA_ExceptionDef_optable_pool, _tao_CORBA_ExceptionDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_ExceptionDef_optable (
    CORBA_ExceptionDef_operations,
    39,
    78,
    &_tao_CORBA_ExceptionDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::ExceptionDef::ExceptionDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_ExceptionDef_optable);
}

POA_CORBA::ExceptionDef::ExceptionDef (const ExceptionDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Contained (rhs),
    POA_CORBA::Container (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_type_ExceptionDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_type_ExceptionDef (
      POA_CORBA::ExceptionDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::TypeCode>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::TypeCode> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->type ();
    }
  
  private:
    POA_CORBA::ExceptionDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ExceptionDef::_get_type_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::TypeCode>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ExceptionDef * const impl =
    dynamic_cast<POA_CORBA::ExceptionDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_type_ExceptionDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_members_ExceptionDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_members_ExceptionDef (
      POA_CORBA::ExceptionDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::StructMemberSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::StructMemberSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->members ();
    }
  
  private:
    POA_CORBA::ExceptionDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ExceptionDef::_get_members_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::StructMemberSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ExceptionDef * const impl =
    dynamic_cast<POA_CORBA::ExceptionDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_members_ExceptionDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_members_ExceptionDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_members_ExceptionDef (
      POA_CORBA::ExceptionDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::StructMemberSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::StructMemberSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->members (
        arg_1);
    }
  
  private:
    POA_CORBA::ExceptionDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ExceptionDef::_set_members_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::StructMemberSeq>::in_arg_val _tao_members;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_members)
    };
  
  POA_CORBA::ExceptionDef * const impl =
    dynamic_cast<POA_CORBA::ExceptionDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_members_ExceptionDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::ExceptionDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Container:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/ExceptionDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::ExceptionDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/ExceptionDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::ExceptionDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::ExceptionDef *
POA_CORBA::ExceptionDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::ExceptionDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_AttributeDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::AttributeDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::AttributeDef::destroy_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::AttributeDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::AttributeDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::AttributeDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::AttributeDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::AttributeDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::AttributeDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::AttributeDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::AttributeDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::AttributeDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::AttributeDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::AttributeDef::move_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::AttributeDef::_get_type_skel), nullptr},
  {"_get_type_def", std::addressof(POA_CORBA::AttributeDef::_get_type_def_skel), nullptr},
  {"_set_type_def", std::addressof(POA_CORBA::AttributeDef::_set_type_def_skel), nullptr},
  {"_get_mode", std::addressof(POA_CORBA::AttributeDef::_get_mode_skel), nullptr},
  {"_set_mode", std::addressof(POA_CORBA::AttributeDef::_set_mode_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_AttributeDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (69);
static char _tao_CORBA_AttributeDef_optable_pool [_tao_CORBA_AttributeDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_AttributeDef_allocator (_tao_CORBA_AttributeDef_optable_pool, _tao_CORBA_AttributeDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_AttributeDef_optable (
    CORBA_AttributeDef_operations,
    23,
    46,
    &_tao_CORBA_AttributeDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::AttributeDef::AttributeDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_AttributeDef_optable);
}

POA_CORBA::AttributeDef::AttributeDef (const AttributeDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Contained (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_type_AttributeDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_type_AttributeDef (
      POA_CORBA::AttributeDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::TypeCode>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::TypeCode> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->type ();
    }
  
  private:
    POA_CORBA::AttributeDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::AttributeDef::_get_type_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::TypeCode>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::AttributeDef * const impl =
    dynamic_cast<POA_CORBA::AttributeDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_type_AttributeDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_type_def_AttributeDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_type_def_AttributeDef (
      POA_CORBA::AttributeDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::IDLType>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->type_def ();
    }
  
  private:
    POA_CORBA::AttributeDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::AttributeDef::_get_type_def_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::IDLType>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::AttributeDef * const impl =
    dynamic_cast<POA_CORBA::AttributeDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_type_def_AttributeDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_type_def_AttributeDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_type_def_AttributeDef (
      POA_CORBA::AttributeDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->type_def (
        arg_1);
    }
  
  private:
    POA_CORBA::AttributeDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::AttributeDef::_set_type_def_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_type_def;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_type_def)
    };
  
  POA_CORBA::AttributeDef * const impl =
    dynamic_cast<POA_CORBA::AttributeDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_type_def_AttributeDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_mode_AttributeDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_mode_AttributeDef (
      POA_CORBA::AttributeDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::AttributeMode>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::AttributeMode> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->mode ();
    }
  
  private:
    POA_CORBA::AttributeDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::AttributeDef::_get_mode_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::AttributeMode>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::AttributeDef * const impl =
    dynamic_cast<POA_CORBA::AttributeDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_mode_AttributeDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_mode_AttributeDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_mode_AttributeDef (
      POA_CORBA::AttributeDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::AttributeMode>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::AttributeMode> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->mode (
        arg_1);
    }
  
  private:
    POA_CORBA::AttributeDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::AttributeDef::_set_mode_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::AttributeMode>::in_arg_val _tao_mode;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_mode)
    };
  
  POA_CORBA::AttributeDef * const impl =
    dynamic_cast<POA_CORBA::AttributeDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_mode_AttributeDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::AttributeDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/AttributeDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::AttributeDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/AttributeDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::AttributeDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::AttributeDef *
POA_CORBA::AttributeDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::AttributeDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_ExtAttributeDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::ExtAttributeDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::ExtAttributeDef::destroy_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::ExtAttributeDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::ExtAttributeDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::ExtAttributeDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::ExtAttributeDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::ExtAttributeDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::ExtAttributeDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::ExtAttributeDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::ExtAttributeDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::ExtAttributeDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::ExtAttributeDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::ExtAttributeDef::move_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::ExtAttributeDef::_get_type_skel), nullptr},
  {"_get_type_def", std::addressof(POA_CORBA::ExtAttributeDef::_get_type_def_skel), nullptr},
  {"_set_type_def", std::addressof(POA_CORBA::ExtAttributeDef::_set_type_def_skel), nullptr},
  {"_get_mode", std::addressof(POA_CORBA::ExtAttributeDef::_get_mode_skel), nullptr},
  {"_set_mode", std::addressof(POA_CORBA::ExtAttributeDef::_set_mode_skel), nullptr},
  {"_get_get_exceptions", std::addressof(POA_CORBA::ExtAttributeDef::_get_get_exceptions_skel), nullptr},
  {"_set_get_exceptions", std::addressof(POA_CORBA::ExtAttributeDef::_set_get_exceptions_skel), nullptr},
  {"_get_set_exceptions", std::addressof(POA_CORBA::ExtAttributeDef::_get_set_exceptions_skel), nullptr},
  {"_set_set_exceptions", std::addressof(POA_CORBA::ExtAttributeDef::_set_set_exceptions_skel), nullptr},
  {"describe_attribute", std::addressof(POA_CORBA::ExtAttributeDef::describe_attribute_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_ExtAttributeDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (84);
static char _tao_CORBA_ExtAttributeDef_optable_pool [_tao_CORBA_ExtAttributeDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_ExtAttributeDef_allocator (_tao_CORBA_ExtAttributeDef_optable_pool, _tao_CORBA_ExtAttributeDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_ExtAttributeDef_optable (
    CORBA_ExtAttributeDef_operations,
    28,
    56,
    &_tao_CORBA_ExtAttributeDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::ExtAttributeDef::ExtAttributeDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_ExtAttributeDef_optable);
}

POA_CORBA::ExtAttributeDef::ExtAttributeDef (const ExtAttributeDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Contained (rhs),
    POA_CORBA::AttributeDef (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_get_exceptions_ExtAttributeDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_get_exceptions_ExtAttributeDef (
      POA_CORBA::ExtAttributeDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ExcDescriptionSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ExcDescriptionSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_exceptions ();
    }
  
  private:
    POA_CORBA::ExtAttributeDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ExtAttributeDef::_get_get_exceptions_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ExcDescriptionSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ExtAttributeDef * const impl =
    dynamic_cast<POA_CORBA::ExtAttributeDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_get_exceptions_ExtAttributeDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_get_exceptions_ExtAttributeDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_get_exceptions_ExtAttributeDef (
      POA_CORBA::ExtAttributeDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ExcDescriptionSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ExcDescriptionSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_exceptions (
        arg_1);
    }
  
  private:
    POA_CORBA::ExtAttributeDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ExtAttributeDef::_set_get_exceptions_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ExcDescriptionSeq>::in_arg_val _tao_get_exceptions;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_get_exceptions)
    };
  
  POA_CORBA::ExtAttributeDef * const impl =
    dynamic_cast<POA_CORBA::ExtAttributeDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_get_exceptions_ExtAttributeDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_set_exceptions_ExtAttributeDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_set_exceptions_ExtAttributeDef (
      POA_CORBA::ExtAttributeDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ExcDescriptionSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ExcDescriptionSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->set_exceptions ();
    }
  
  private:
    POA_CORBA::ExtAttributeDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ExtAttributeDef::_get_set_exceptions_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ExcDescriptionSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ExtAttributeDef * const impl =
    dynamic_cast<POA_CORBA::ExtAttributeDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_set_exceptions_ExtAttributeDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_set_exceptions_ExtAttributeDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_set_exceptions_ExtAttributeDef (
      POA_CORBA::ExtAttributeDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ExcDescriptionSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ExcDescriptionSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->set_exceptions (
        arg_1);
    }
  
  private:
    POA_CORBA::ExtAttributeDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ExtAttributeDef::_set_set_exceptions_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ExcDescriptionSeq>::in_arg_val _tao_set_exceptions;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_set_exceptions)
    };
  
  POA_CORBA::ExtAttributeDef * const impl =
    dynamic_cast<POA_CORBA::ExtAttributeDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_set_exceptions_ExtAttributeDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class describe_attribute_ExtAttributeDef
    : public TAO::Upcall_Command
  {
  public:
    inline describe_attribute_ExtAttributeDef (
      POA_CORBA::ExtAttributeDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ExtAttributeDescription>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ExtAttributeDescription> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->describe_attribute ();
    }
  
  private:
    POA_CORBA::ExtAttributeDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::ExtAttributeDef::describe_attribute_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ExtAttributeDescription>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::ExtAttributeDef * const impl =
    dynamic_cast<POA_CORBA::ExtAttributeDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  describe_attribute_ExtAttributeDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::ExtAttributeDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/AttributeDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/ExtAttributeDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::ExtAttributeDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/ExtAttributeDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::ExtAttributeDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::ExtAttributeDef *
POA_CORBA::ExtAttributeDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::ExtAttributeDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_OperationDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::OperationDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::OperationDef::destroy_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::OperationDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::OperationDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::OperationDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::OperationDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::OperationDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::OperationDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::OperationDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::OperationDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::OperationDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::OperationDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::OperationDef::move_skel), nullptr},
  {"_get_result", std::addressof(POA_CORBA::OperationDef::_get_result_skel), nullptr},
  {"_get_result_def", std::addressof(POA_CORBA::OperationDef::_get_result_def_skel), nullptr},
  {"_set_result_def", std::addressof(POA_CORBA::OperationDef::_set_result_def_skel), nullptr},
  {"_get_params", std::addressof(POA_CORBA::OperationDef::_get_params_skel), nullptr},
  {"_set_params", std::addressof(POA_CORBA::OperationDef::_set_params_skel), nullptr},
  {"_get_mode", std::addressof(POA_CORBA::OperationDef::_get_mode_skel), nullptr},
  {"_set_mode", std::addressof(POA_CORBA::OperationDef::_set_mode_skel), nullptr},
  {"_get_contexts", std::addressof(POA_CORBA::OperationDef::_get_contexts_skel), nullptr},
  {"_set_contexts", std::addressof(POA_CORBA::OperationDef::_set_contexts_skel), nullptr},
  {"_get_exceptions", std::addressof(POA_CORBA::OperationDef::_get_exceptions_skel), nullptr},
  {"_set_exceptions", std::addressof(POA_CORBA::OperationDef::_set_exceptions_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_OperationDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (87);
static char _tao_CORBA_OperationDef_optable_pool [_tao_CORBA_OperationDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_OperationDef_allocator (_tao_CORBA_OperationDef_optable_pool, _tao_CORBA_OperationDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_OperationDef_optable (
    CORBA_OperationDef_operations,
    29,
    58,
    &_tao_CORBA_OperationDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::OperationDef::OperationDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_OperationDef_optable);
}

POA_CORBA::OperationDef::OperationDef (const OperationDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Contained (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_result_OperationDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_result_OperationDef (
      POA_CORBA::OperationDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::TypeCode>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::TypeCode> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->result ();
    }
  
  private:
    POA_CORBA::OperationDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::OperationDef::_get_result_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::TypeCode>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::OperationDef * const impl =
    dynamic_cast<POA_CORBA::OperationDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_result_OperationDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_result_def_OperationDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_result_def_OperationDef (
      POA_CORBA::OperationDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::IDLType>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->result_def ();
    }
  
  private:
    POA_CORBA::OperationDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::OperationDef::_get_result_def_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::IDLType>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::OperationDef * const impl =
    dynamic_cast<POA_CORBA::OperationDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_result_def_OperationDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_result_def_OperationDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_result_def_OperationDef (
      POA_CORBA::OperationDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->result_def (
        arg_1);
    }
  
  private:
    POA_CORBA::OperationDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::OperationDef::_set_result_def_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_result_def;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_result_def)
    };
  
  POA_CORBA::OperationDef * const impl =
    dynamic_cast<POA_CORBA::OperationDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_result_def_OperationDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_params_OperationDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_params_OperationDef (
      POA_CORBA::OperationDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ParDescriptionSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ParDescriptionSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->params ();
    }
  
  private:
    POA_CORBA::OperationDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::OperationDef::_get_params_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ParDescriptionSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::OperationDef * const impl =
    dynamic_cast<POA_CORBA::OperationDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_params_OperationDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_params_OperationDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_params_OperationDef (
      POA_CORBA::OperationDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ParDescriptionSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ParDescriptionSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->params (
        arg_1);
    }
  
  private:
    POA_CORBA::OperationDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::OperationDef::_set_params_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ParDescriptionSeq>::in_arg_val _tao_params;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_params)
    };
  
  POA_CORBA::OperationDef * const impl =
    dynamic_cast<POA_CORBA::OperationDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_params_OperationDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_mode_OperationDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_mode_OperationDef (
      POA_CORBA::OperationDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::OperationMode>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::OperationMode> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->mode ();
    }
  
  private:
    POA_CORBA::OperationDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::OperationDef::_get_mode_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::OperationMode>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::OperationDef * const impl =
    dynamic_cast<POA_CORBA::OperationDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_mode_OperationDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_mode_OperationDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_mode_OperationDef (
      POA_CORBA::OperationDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::OperationMode>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::OperationMode> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->mode (
        arg_1);
    }
  
  private:
    POA_CORBA::OperationDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::OperationDef::_set_mode_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::OperationMode>::in_arg_val _tao_mode;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_mode)
    };
  
  POA_CORBA::OperationDef * const impl =
    dynamic_cast<POA_CORBA::OperationDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_mode_OperationDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_contexts_OperationDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_contexts_OperationDef (
      POA_CORBA::OperationDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ContextIdSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ContextIdSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->contexts ();
    }
  
  private:
    POA_CORBA::OperationDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::OperationDef::_get_contexts_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ContextIdSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::OperationDef * const impl =
    dynamic_cast<POA_CORBA::OperationDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_contexts_OperationDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_contexts_OperationDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_contexts_OperationDef (
      POA_CORBA::OperationDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ContextIdSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ContextIdSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->contexts (
        arg_1);
    }
  
  private:
    POA_CORBA::OperationDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::OperationDef::_set_contexts_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ContextIdSeq>::in_arg_val _tao_contexts;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_contexts)
    };
  
  POA_CORBA::OperationDef * const impl =
    dynamic_cast<POA_CORBA::OperationDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_contexts_OperationDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_exceptions_OperationDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_exceptions_OperationDef (
      POA_CORBA::OperationDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ExceptionDefSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ExceptionDefSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->exceptions ();
    }
  
  private:
    POA_CORBA::OperationDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::OperationDef::_get_exceptions_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ExceptionDefSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::OperationDef * const impl =
    dynamic_cast<POA_CORBA::OperationDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_exceptions_OperationDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_exceptions_OperationDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_exceptions_OperationDef (
      POA_CORBA::OperationDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ExceptionDefSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ExceptionDefSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->exceptions (
        arg_1);
    }
  
  private:
    POA_CORBA::OperationDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::OperationDef::_set_exceptions_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ExceptionDefSeq>::in_arg_val _tao_exceptions;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_exceptions)
    };
  
  POA_CORBA::OperationDef * const impl =
    dynamic_cast<POA_CORBA::OperationDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_exceptions_OperationDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::OperationDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/OperationDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::OperationDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/OperationDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::OperationDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::OperationDef *
POA_CORBA::OperationDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::OperationDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_InterfaceDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::InterfaceDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::InterfaceDef::destroy_skel), nullptr},
  {"lookup", std::addressof(POA_CORBA::InterfaceDef::lookup_skel), nullptr},
  {"contents", std::addressof(POA_CORBA::InterfaceDef::contents_skel), nullptr},
  {"lookup_name", std::addressof(POA_CORBA::InterfaceDef::lookup_name_skel), nullptr},
  {"describe_contents", std::addressof(POA_CORBA::InterfaceDef::describe_contents_skel), nullptr},
  {"create_module", std::addressof(POA_CORBA::InterfaceDef::create_module_skel), nullptr},
  {"create_constant", std::addressof(POA_CORBA::InterfaceDef::create_constant_skel), nullptr},
  {"create_struct", std::addressof(POA_CORBA::InterfaceDef::create_struct_skel), nullptr},
  {"create_union", std::addressof(POA_CORBA::InterfaceDef::create_union_skel), nullptr},
  {"create_enum", std::addressof(POA_CORBA::InterfaceDef::create_enum_skel), nullptr},
  {"create_alias", std::addressof(POA_CORBA::InterfaceDef::create_alias_skel), nullptr},
  {"create_interface", std::addressof(POA_CORBA::InterfaceDef::create_interface_skel), nullptr},
  {"create_value", std::addressof(POA_CORBA::InterfaceDef::create_value_skel), nullptr},
  {"create_value_box", std::addressof(POA_CORBA::InterfaceDef::create_value_box_skel), nullptr},
  {"create_exception", std::addressof(POA_CORBA::InterfaceDef::create_exception_skel), nullptr},
  {"create_native", std::addressof(POA_CORBA::InterfaceDef::create_native_skel), nullptr},
  {"create_abstract_interface", std::addressof(POA_CORBA::InterfaceDef::create_abstract_interface_skel), nullptr},
  {"create_local_interface", std::addressof(POA_CORBA::InterfaceDef::create_local_interface_skel), nullptr},
  {"create_ext_value", std::addressof(POA_CORBA::InterfaceDef::create_ext_value_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::InterfaceDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::InterfaceDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::InterfaceDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::InterfaceDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::InterfaceDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::InterfaceDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::InterfaceDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::InterfaceDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::InterfaceDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::InterfaceDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::InterfaceDef::move_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::InterfaceDef::_get_type_skel), nullptr},
  {"_get_base_interfaces", std::addressof(POA_CORBA::InterfaceDef::_get_base_interfaces_skel), nullptr},
  {"_set_base_interfaces", std::addressof(POA_CORBA::InterfaceDef::_set_base_interfaces_skel), nullptr},
  {"is_a", std::addressof(POA_CORBA::InterfaceDef::is_a_skel), nullptr},
  {"describe_interface", std::addressof(POA_CORBA::InterfaceDef::describe_interface_skel), nullptr},
  {"create_attribute", std::addressof(POA_CORBA::InterfaceDef::create_attribute_skel), nullptr},
  {"create_operation", std::addressof(POA_CORBA::InterfaceDef::create_operation_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_InterfaceDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (129);
static char _tao_CORBA_InterfaceDef_optable_pool [_tao_CORBA_InterfaceDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_InterfaceDef_allocator (_tao_CORBA_InterfaceDef_optable_pool, _tao_CORBA_InterfaceDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_InterfaceDef_optable (
    CORBA_InterfaceDef_operations,
    43,
    86,
    &_tao_CORBA_InterfaceDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::InterfaceDef::InterfaceDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_InterfaceDef_optable);
}

POA_CORBA::InterfaceDef::InterfaceDef (const InterfaceDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Container (rhs),
    POA_CORBA::Contained (rhs),
    POA_CORBA::IDLType (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _get_base_interfaces_InterfaceDef
    : public TAO::Upcall_Command
  {
  public:
    inline _get_base_interfaces_InterfaceDef (
      POA_CORBA::InterfaceDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::InterfaceDefSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::InterfaceDefSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->base_interfaces ();
    }
  
  private:
    POA_CORBA::InterfaceDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::InterfaceDef::_get_base_interfaces_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::InterfaceDefSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::InterfaceDef * const impl =
    dynamic_cast<POA_CORBA::InterfaceDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_base_interfaces_InterfaceDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class _set_base_interfaces_InterfaceDef
    : public TAO::Upcall_Command
  {
  public:
    inline _set_base_interfaces_InterfaceDef (
      POA_CORBA::InterfaceDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::InterfaceDefSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::InterfaceDefSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->base_interfaces (
        arg_1);
    }
  
  private:
    POA_CORBA::InterfaceDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::InterfaceDef::_set_base_interfaces_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::InterfaceDefSeq>::in_arg_val _tao_base_interfaces;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_base_interfaces)
    };
  
  POA_CORBA::InterfaceDef * const impl =
    dynamic_cast<POA_CORBA::InterfaceDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_base_interfaces_InterfaceDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class is_a_InterfaceDef
    : public TAO::Upcall_Command
  {
  public:
    inline is_a_InterfaceDef (
      POA_CORBA::InterfaceDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->is_a (
          arg_1);
    }
  
  private:
    POA_CORBA::InterfaceDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::InterfaceDef::is_a_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_interface_id;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_interface_id)
    };
  
  POA_CORBA::InterfaceDef * const impl =
    dynamic_cast<POA_CORBA::InterfaceDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  is_a_InterfaceDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class describe_interface_InterfaceDef
    : public TAO::Upcall_Command
  {
  public:
    inline describe_interface_InterfaceDef (
      POA_CORBA::InterfaceDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::InterfaceDef::FullInterfaceDescription>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::InterfaceDef::FullInterfaceDescription> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->describe_interface ();
    }
  
  private:
    POA_CORBA::InterfaceDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::InterfaceDef::describe_interface_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::InterfaceDef::FullInterfaceDescription>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::InterfaceDef * const impl =
    dynamic_cast<POA_CORBA::InterfaceDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  describe_interface_InterfaceDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_attribute_InterfaceDef
    : public TAO::Upcall_Command
  {
  public:
    inline create_attribute_InterfaceDef (
      POA_CORBA::InterfaceDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::AttributeDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::AttributeDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          4);
        
      TAO::SArg_Traits< ::CORBA::AttributeMode>::in_arg_type arg_5 =
        TAO::Portable_Server::get_in_arg< ::CORBA::AttributeMode> (
          this->operation_details_,
          this->args_,
          5);
        
      retval =
        this->servant_->create_attribute (
          arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5);
    }
  
  private:
    POA_CORBA::InterfaceDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::InterfaceDef::create_attribute_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::AttributeDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_type;
  TAO::SArg_Traits< ::CORBA::AttributeMode>::in_arg_val _tao_mode;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version),
      std::addressof(_tao_type),
      std::addressof(_tao_mode)
    };
  
  POA_CORBA::InterfaceDef * const impl =
    dynamic_cast<POA_CORBA::InterfaceDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_attribute_InterfaceDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 6
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_operation_InterfaceDef
    : public TAO::Upcall_Command
  {
  public:
    inline create_operation_InterfaceDef (
      POA_CORBA::InterfaceDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::OperationDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::OperationDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          4);
        
      TAO::SArg_Traits< ::CORBA::OperationMode>::in_arg_type arg_5 =
        TAO::Portable_Server::get_in_arg< ::CORBA::OperationMode> (
          this->operation_details_,
          this->args_,
          5);
        
      TAO::SArg_Traits< ::CORBA::ParDescriptionSeq>::in_arg_type arg_6 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ParDescriptionSeq> (
          this->operation_details_,
          this->args_,
          6);
        
      TAO::SArg_Traits< ::CORBA::ExceptionDefSeq>::in_arg_type arg_7 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ExceptionDefSeq> (
          this->operation_details_,
          this->args_,
          7);
        
      TAO::SArg_Traits< ::CORBA::ContextIdSeq>::in_arg_type arg_8 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ContextIdSeq> (
          this->operation_details_,
          this->args_,
          8);
        
      retval =
        this->servant_->create_operation (
          arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5
          , arg_6
          , arg_7
          , arg_8);
    }
  
  private:
    POA_CORBA::InterfaceDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::InterfaceDef::create_operation_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::OperationDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_result;
  TAO::SArg_Traits< ::CORBA::OperationMode>::in_arg_val _tao_mode;
  TAO::SArg_Traits< ::CORBA::ParDescriptionSeq>::in_arg_val _tao_params;
  TAO::SArg_Traits< ::CORBA::ExceptionDefSeq>::in_arg_val _tao_exceptions;
  TAO::SArg_Traits< ::CORBA::ContextIdSeq>::in_arg_val _tao_contexts;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version),
      std::addressof(_tao_result),
      std::addressof(_tao_mode),
      std::addressof(_tao_params),
      std::addressof(_tao_exceptions),
      std::addressof(_tao_contexts)
    };
  
  POA_CORBA::InterfaceDef * const impl =
    dynamic_cast<POA_CORBA::InterfaceDef *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_operation_InterfaceDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 9
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::InterfaceDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Container:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/InterfaceDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::InterfaceDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/InterfaceDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::InterfaceDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::InterfaceDef *
POA_CORBA::InterfaceDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::InterfaceDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_InterfaceAttrExtension_operations [] = {
  {"describe_ext_interface", std::addressof(POA_CORBA::InterfaceAttrExtension::describe_ext_interface_skel), nullptr},
  {"create_ext_attribute", std::addressof(POA_CORBA::InterfaceAttrExtension::create_ext_attribute_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_InterfaceAttrExtension_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (21);
static char _tao_CORBA_InterfaceAttrExtension_optable_pool [_tao_CORBA_InterfaceAttrExtension_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_InterfaceAttrExtension_allocator (_tao_CORBA_InterfaceAttrExtension_optable_pool, _tao_CORBA_InterfaceAttrExtension_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_InterfaceAttrExtension_optable (
    CORBA_InterfaceAttrExtension_operations,
    7,
    14,
    &_tao_CORBA_InterfaceAttrExtension_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::InterfaceAttrExtension::InterfaceAttrExtension ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_InterfaceAttrExtension_optable);
}

POA_CORBA::InterfaceAttrExtension::InterfaceAttrExtension (const InterfaceAttrExtension& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class describe_ext_interface_InterfaceAttrExtension
    : public TAO::Upcall_Command
  {
  public:
    inline describe_ext_interface_InterfaceAttrExtension (
      POA_CORBA::InterfaceAttrExtension * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->describe_ext_interface ();
    }
  
  private:
    POA_CORBA::InterfaceAttrExtension * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::InterfaceAttrExtension::describe_ext_interface_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::InterfaceAttrExtension::ExtFullInterfaceDescription>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_CORBA::InterfaceAttrExtension * const impl =
    dynamic_cast<POA_CORBA::InterfaceAttrExtension *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  describe_ext_interface_InterfaceAttrExtension command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CORBA
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class create_ext_attribute_InterfaceAttrExtension
    : public TAO::Upcall_Command
  {
  public:
    inline create_ext_attribute_InterfaceAttrExtension (
      POA_CORBA::InterfaceAttrExtension * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ExtAttributeDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ExtAttributeDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::CORBA::IDLType> (
          this->operation_details_,
          this->args_,
          4);
        
      TAO::SArg_Traits< ::CORBA::AttributeMode>::in_arg_type arg_5 =
        TAO::Portable_Server::get_in_arg< ::CORBA::AttributeMode> (
          this->operation_details_,
          this->args_,
          5);
        
      TAO::SArg_Traits< ::CORBA::ExceptionDefSeq>::in_arg_type arg_6 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ExceptionDefSeq> (
          this->operation_details_,
          this->args_,
          6);
        
      TAO::SArg_Traits< ::CORBA::ExceptionDefSeq>::in_arg_type arg_7 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ExceptionDefSeq> (
          this->operation_details_,
          this->args_,
          7);
        
      retval =
        this->servant_->create_ext_attribute (
          arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5
          , arg_6
          , arg_7);
    }
  
  private:
    POA_CORBA::InterfaceAttrExtension * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_CORBA::InterfaceAttrExtension::create_ext_attribute_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::CORBA::ExtAttributeDef>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< char *>::in_arg_val _tao_version;
  TAO::SArg_Traits< ::CORBA::IDLType>::in_arg_val _tao_type;
  TAO::SArg_Traits< ::CORBA::AttributeMode>::in_arg_val _tao_mode;
  TAO::SArg_Traits< ::CORBA::ExceptionDefSeq>::in_arg_val _tao_get_exceptions;
  TAO::SArg_Traits< ::CORBA::ExceptionDefSeq>::in_arg_val _tao_set_exceptions;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_id),
      std::addressof(_tao_name),
      std::addressof(_tao_version),
      std::addressof(_tao_type),
      std::addressof(_tao_mode),
      std::addressof(_tao_get_exceptions),
      std::addressof(_tao_set_exceptions)
    };
  
  POA_CORBA::InterfaceAttrExtension * const impl =
    dynamic_cast<POA_CORBA::InterfaceAttrExtension *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_ext_attribute_InterfaceAttrExtension command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 8
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::InterfaceAttrExtension::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/InterfaceAttrExtension:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::InterfaceAttrExtension::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/InterfaceAttrExtension:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::InterfaceAttrExtension::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::InterfaceAttrExtension *
POA_CORBA::InterfaceAttrExtension::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::InterfaceAttrExtension>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_ExtInterfaceDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::ExtInterfaceDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::ExtInterfaceDef::destroy_skel), nullptr},
  {"lookup", std::addressof(POA_CORBA::ExtInterfaceDef::lookup_skel), nullptr},
  {"contents", std::addressof(POA_CORBA::ExtInterfaceDef::contents_skel), nullptr},
  {"lookup_name", std::addressof(POA_CORBA::ExtInterfaceDef::lookup_name_skel), nullptr},
  {"describe_contents", std::addressof(POA_CORBA::ExtInterfaceDef::describe_contents_skel), nullptr},
  {"create_module", std::addressof(POA_CORBA::ExtInterfaceDef::create_module_skel), nullptr},
  {"create_constant", std::addressof(POA_CORBA::ExtInterfaceDef::create_constant_skel), nullptr},
  {"create_struct", std::addressof(POA_CORBA::ExtInterfaceDef::create_struct_skel), nullptr},
  {"create_union", std::addressof(POA_CORBA::ExtInterfaceDef::create_union_skel), nullptr},
  {"create_enum", std::addressof(POA_CORBA::ExtInterfaceDef::create_enum_skel), nullptr},
  {"create_alias", std::addressof(POA_CORBA::ExtInterfaceDef::create_alias_skel), nullptr},
  {"create_interface", std::addressof(POA_CORBA::ExtInterfaceDef::create_interface_skel), nullptr},
  {"create_value", std::addressof(POA_CORBA::ExtInterfaceDef::create_value_skel), nullptr},
  {"create_value_box", std::addressof(POA_CORBA::ExtInterfaceDef::create_value_box_skel), nullptr},
  {"create_exception", std::addressof(POA_CORBA::ExtInterfaceDef::create_exception_skel), nullptr},
  {"create_native", std::addressof(POA_CORBA::ExtInterfaceDef::create_native_skel), nullptr},
  {"create_abstract_interface", std::addressof(POA_CORBA::ExtInterfaceDef::create_abstract_interface_skel), nullptr},
  {"create_local_interface", std::addressof(POA_CORBA::ExtInterfaceDef::create_local_interface_skel), nullptr},
  {"create_ext_value", std::addressof(POA_CORBA::ExtInterfaceDef::create_ext_value_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::ExtInterfaceDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::ExtInterfaceDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::ExtInterfaceDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::ExtInterfaceDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::ExtInterfaceDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::ExtInterfaceDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::ExtInterfaceDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::ExtInterfaceDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::ExtInterfaceDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::ExtInterfaceDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::ExtInterfaceDef::move_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::ExtInterfaceDef::_get_type_skel), nullptr},
  {"_get_base_interfaces", std::addressof(POA_CORBA::ExtInterfaceDef::_get_base_interfaces_skel), nullptr},
  {"_set_base_interfaces", std::addressof(POA_CORBA::ExtInterfaceDef::_set_base_interfaces_skel), nullptr},
  {"is_a", std::addressof(POA_CORBA::ExtInterfaceDef::is_a_skel), nullptr},
  {"describe_interface", std::addressof(POA_CORBA::ExtInterfaceDef::describe_interface_skel), nullptr},
  {"create_attribute", std::addressof(POA_CORBA::ExtInterfaceDef::create_attribute_skel), nullptr},
  {"create_operation", std::addressof(POA_CORBA::ExtInterfaceDef::create_operation_skel), nullptr},
  {"describe_ext_interface", std::addressof(POA_CORBA::ExtInterfaceDef::describe_ext_interface_skel), nullptr},
  {"create_ext_attribute", std::addressof(POA_CORBA::ExtInterfaceDef::create_ext_attribute_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_ExtInterfaceDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (135);
static char _tao_CORBA_ExtInterfaceDef_optable_pool [_tao_CORBA_ExtInterfaceDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_ExtInterfaceDef_allocator (_tao_CORBA_ExtInterfaceDef_optable_pool, _tao_CORBA_ExtInterfaceDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_ExtInterfaceDef_optable (
    CORBA_ExtInterfaceDef_operations,
    45,
    90,
    &_tao_CORBA_ExtInterfaceDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::ExtInterfaceDef::ExtInterfaceDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_ExtInterfaceDef_optable);
}

POA_CORBA::ExtInterfaceDef::ExtInterfaceDef (const ExtInterfaceDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Container (rhs),
    POA_CORBA::Contained (rhs),
    POA_CORBA::IDLType (rhs),
    POA_CORBA::InterfaceDef (rhs),
    POA_CORBA::InterfaceAttrExtension (rhs)
{
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::ExtInterfaceDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Container:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/InterfaceDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/InterfaceAttrExtension:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/ExtInterfaceDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::ExtInterfaceDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/ExtInterfaceDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::ExtInterfaceDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::ExtInterfaceDef *
POA_CORBA::ExtInterfaceDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::ExtInterfaceDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_AbstractInterfaceDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::AbstractInterfaceDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::AbstractInterfaceDef::destroy_skel), nullptr},
  {"lookup", std::addressof(POA_CORBA::AbstractInterfaceDef::lookup_skel), nullptr},
  {"contents", std::addressof(POA_CORBA::AbstractInterfaceDef::contents_skel), nullptr},
  {"lookup_name", std::addressof(POA_CORBA::AbstractInterfaceDef::lookup_name_skel), nullptr},
  {"describe_contents", std::addressof(POA_CORBA::AbstractInterfaceDef::describe_contents_skel), nullptr},
  {"create_module", std::addressof(POA_CORBA::AbstractInterfaceDef::create_module_skel), nullptr},
  {"create_constant", std::addressof(POA_CORBA::AbstractInterfaceDef::create_constant_skel), nullptr},
  {"create_struct", std::addressof(POA_CORBA::AbstractInterfaceDef::create_struct_skel), nullptr},
  {"create_union", std::addressof(POA_CORBA::AbstractInterfaceDef::create_union_skel), nullptr},
  {"create_enum", std::addressof(POA_CORBA::AbstractInterfaceDef::create_enum_skel), nullptr},
  {"create_alias", std::addressof(POA_CORBA::AbstractInterfaceDef::create_alias_skel), nullptr},
  {"create_interface", std::addressof(POA_CORBA::AbstractInterfaceDef::create_interface_skel), nullptr},
  {"create_value", std::addressof(POA_CORBA::AbstractInterfaceDef::create_value_skel), nullptr},
  {"create_value_box", std::addressof(POA_CORBA::AbstractInterfaceDef::create_value_box_skel), nullptr},
  {"create_exception", std::addressof(POA_CORBA::AbstractInterfaceDef::create_exception_skel), nullptr},
  {"create_native", std::addressof(POA_CORBA::AbstractInterfaceDef::create_native_skel), nullptr},
  {"create_abstract_interface", std::addressof(POA_CORBA::AbstractInterfaceDef::create_abstract_interface_skel), nullptr},
  {"create_local_interface", std::addressof(POA_CORBA::AbstractInterfaceDef::create_local_interface_skel), nullptr},
  {"create_ext_value", std::addressof(POA_CORBA::AbstractInterfaceDef::create_ext_value_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::AbstractInterfaceDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::AbstractInterfaceDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::AbstractInterfaceDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::AbstractInterfaceDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::AbstractInterfaceDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::AbstractInterfaceDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::AbstractInterfaceDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::AbstractInterfaceDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::AbstractInterfaceDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::AbstractInterfaceDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::AbstractInterfaceDef::move_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::AbstractInterfaceDef::_get_type_skel), nullptr},
  {"_get_base_interfaces", std::addressof(POA_CORBA::AbstractInterfaceDef::_get_base_interfaces_skel), nullptr},
  {"_set_base_interfaces", std::addressof(POA_CORBA::AbstractInterfaceDef::_set_base_interfaces_skel), nullptr},
  {"is_a", std::addressof(POA_CORBA::AbstractInterfaceDef::is_a_skel), nullptr},
  {"describe_interface", std::addressof(POA_CORBA::AbstractInterfaceDef::describe_interface_skel), nullptr},
  {"create_attribute", std::addressof(POA_CORBA::AbstractInterfaceDef::create_attribute_skel), nullptr},
  {"create_operation", std::addressof(POA_CORBA::AbstractInterfaceDef::create_operation_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_AbstractInterfaceDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (129);
static char _tao_CORBA_AbstractInterfaceDef_optable_pool [_tao_CORBA_AbstractInterfaceDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_AbstractInterfaceDef_allocator (_tao_CORBA_AbstractInterfaceDef_optable_pool, _tao_CORBA_AbstractInterfaceDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_AbstractInterfaceDef_optable (
    CORBA_AbstractInterfaceDef_operations,
    43,
    86,
    &_tao_CORBA_AbstractInterfaceDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::AbstractInterfaceDef::AbstractInterfaceDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_AbstractInterfaceDef_optable);
}

POA_CORBA::AbstractInterfaceDef::AbstractInterfaceDef (const AbstractInterfaceDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Container (rhs),
    POA_CORBA::Contained (rhs),
    POA_CORBA::IDLType (rhs),
    POA_CORBA::InterfaceDef (rhs)
{
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::AbstractInterfaceDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Container:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/InterfaceDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/AbstractInterfaceDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::AbstractInterfaceDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/AbstractInterfaceDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::AbstractInterfaceDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::AbstractInterfaceDef *
POA_CORBA::AbstractInterfaceDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::AbstractInterfaceDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_ExtAbstractInterfaceDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::destroy_skel), nullptr},
  {"lookup", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::lookup_skel), nullptr},
  {"contents", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::contents_skel), nullptr},
  {"lookup_name", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::lookup_name_skel), nullptr},
  {"describe_contents", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::describe_contents_skel), nullptr},
  {"create_module", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::create_module_skel), nullptr},
  {"create_constant", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::create_constant_skel), nullptr},
  {"create_struct", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::create_struct_skel), nullptr},
  {"create_union", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::create_union_skel), nullptr},
  {"create_enum", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::create_enum_skel), nullptr},
  {"create_alias", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::create_alias_skel), nullptr},
  {"create_interface", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::create_interface_skel), nullptr},
  {"create_value", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::create_value_skel), nullptr},
  {"create_value_box", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::create_value_box_skel), nullptr},
  {"create_exception", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::create_exception_skel), nullptr},
  {"create_native", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::create_native_skel), nullptr},
  {"create_abstract_interface", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::create_abstract_interface_skel), nullptr},
  {"create_local_interface", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::create_local_interface_skel), nullptr},
  {"create_ext_value", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::create_ext_value_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::move_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::_get_type_skel), nullptr},
  {"_get_base_interfaces", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::_get_base_interfaces_skel), nullptr},
  {"_set_base_interfaces", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::_set_base_interfaces_skel), nullptr},
  {"is_a", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::is_a_skel), nullptr},
  {"describe_interface", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::describe_interface_skel), nullptr},
  {"create_attribute", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::create_attribute_skel), nullptr},
  {"create_operation", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::create_operation_skel), nullptr},
  {"describe_ext_interface", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::describe_ext_interface_skel), nullptr},
  {"create_ext_attribute", std::addressof(POA_CORBA::ExtAbstractInterfaceDef::create_ext_attribute_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_ExtAbstractInterfaceDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (135);
static char _tao_CORBA_ExtAbstractInterfaceDef_optable_pool [_tao_CORBA_ExtAbstractInterfaceDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_ExtAbstractInterfaceDef_allocator (_tao_CORBA_ExtAbstractInterfaceDef_optable_pool, _tao_CORBA_ExtAbstractInterfaceDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_ExtAbstractInterfaceDef_optable (
    CORBA_ExtAbstractInterfaceDef_operations,
    45,
    90,
    &_tao_CORBA_ExtAbstractInterfaceDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::ExtAbstractInterfaceDef::ExtAbstractInterfaceDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_ExtAbstractInterfaceDef_optable);
}

POA_CORBA::ExtAbstractInterfaceDef::ExtAbstractInterfaceDef (const ExtAbstractInterfaceDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Container (rhs),
    POA_CORBA::Contained (rhs),
    POA_CORBA::IDLType (rhs),
    POA_CORBA::InterfaceDef (rhs),
    POA_CORBA::AbstractInterfaceDef (rhs),
    POA_CORBA::InterfaceAttrExtension (rhs)
{
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::ExtAbstractInterfaceDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Container:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/InterfaceDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/AbstractInterfaceDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/InterfaceAttrExtension:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/ExtAbstractInterfaceDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::ExtAbstractInterfaceDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/ExtAbstractInterfaceDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::ExtAbstractInterfaceDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::ExtAbstractInterfaceDef *
POA_CORBA::ExtAbstractInterfaceDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::ExtAbstractInterfaceDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_LocalInterfaceDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::LocalInterfaceDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::LocalInterfaceDef::destroy_skel), nullptr},
  {"lookup", std::addressof(POA_CORBA::LocalInterfaceDef::lookup_skel), nullptr},
  {"contents", std::addressof(POA_CORBA::LocalInterfaceDef::contents_skel), nullptr},
  {"lookup_name", std::addressof(POA_CORBA::LocalInterfaceDef::lookup_name_skel), nullptr},
  {"describe_contents", std::addressof(POA_CORBA::LocalInterfaceDef::describe_contents_skel), nullptr},
  {"create_module", std::addressof(POA_CORBA::LocalInterfaceDef::create_module_skel), nullptr},
  {"create_constant", std::addressof(POA_CORBA::LocalInterfaceDef::create_constant_skel), nullptr},
  {"create_struct", std::addressof(POA_CORBA::LocalInterfaceDef::create_struct_skel), nullptr},
  {"create_union", std::addressof(POA_CORBA::LocalInterfaceDef::create_union_skel), nullptr},
  {"create_enum", std::addressof(POA_CORBA::LocalInterfaceDef::create_enum_skel), nullptr},
  {"create_alias", std::addressof(POA_CORBA::LocalInterfaceDef::create_alias_skel), nullptr},
  {"create_interface", std::addressof(POA_CORBA::LocalInterfaceDef::create_interface_skel), nullptr},
  {"create_value", std::addressof(POA_CORBA::LocalInterfaceDef::create_value_skel), nullptr},
  {"create_value_box", std::addressof(POA_CORBA::LocalInterfaceDef::create_value_box_skel), nullptr},
  {"create_exception", std::addressof(POA_CORBA::LocalInterfaceDef::create_exception_skel), nullptr},
  {"create_native", std::addressof(POA_CORBA::LocalInterfaceDef::create_native_skel), nullptr},
  {"create_abstract_interface", std::addressof(POA_CORBA::LocalInterfaceDef::create_abstract_interface_skel), nullptr},
  {"create_local_interface", std::addressof(POA_CORBA::LocalInterfaceDef::create_local_interface_skel), nullptr},
  {"create_ext_value", std::addressof(POA_CORBA::LocalInterfaceDef::create_ext_value_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::LocalInterfaceDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::LocalInterfaceDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::LocalInterfaceDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::LocalInterfaceDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::LocalInterfaceDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::LocalInterfaceDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::LocalInterfaceDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::LocalInterfaceDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::LocalInterfaceDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::LocalInterfaceDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::LocalInterfaceDef::move_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::LocalInterfaceDef::_get_type_skel), nullptr},
  {"_get_base_interfaces", std::addressof(POA_CORBA::LocalInterfaceDef::_get_base_interfaces_skel), nullptr},
  {"_set_base_interfaces", std::addressof(POA_CORBA::LocalInterfaceDef::_set_base_interfaces_skel), nullptr},
  {"is_a", std::addressof(POA_CORBA::LocalInterfaceDef::is_a_skel), nullptr},
  {"describe_interface", std::addressof(POA_CORBA::LocalInterfaceDef::describe_interface_skel), nullptr},
  {"create_attribute", std::addressof(POA_CORBA::LocalInterfaceDef::create_attribute_skel), nullptr},
  {"create_operation", std::addressof(POA_CORBA::LocalInterfaceDef::create_operation_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_LocalInterfaceDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (129);
static char _tao_CORBA_LocalInterfaceDef_optable_pool [_tao_CORBA_LocalInterfaceDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_LocalInterfaceDef_allocator (_tao_CORBA_LocalInterfaceDef_optable_pool, _tao_CORBA_LocalInterfaceDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_LocalInterfaceDef_optable (
    CORBA_LocalInterfaceDef_operations,
    43,
    86,
    &_tao_CORBA_LocalInterfaceDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::LocalInterfaceDef::LocalInterfaceDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_LocalInterfaceDef_optable);
}

POA_CORBA::LocalInterfaceDef::LocalInterfaceDef (const LocalInterfaceDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Container (rhs),
    POA_CORBA::Contained (rhs),
    POA_CORBA::IDLType (rhs),
    POA_CORBA::InterfaceDef (rhs)
{
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::LocalInterfaceDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Container:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/InterfaceDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalInterfaceDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::LocalInterfaceDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/LocalInterfaceDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::LocalInterfaceDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::LocalInterfaceDef *
POA_CORBA::LocalInterfaceDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::LocalInterfaceDef>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry CORBA_ExtLocalInterfaceDef_operations [] = {
  {"_get_def_kind", std::addressof(POA_CORBA::ExtLocalInterfaceDef::_get_def_kind_skel), nullptr},
  {"destroy", std::addressof(POA_CORBA::ExtLocalInterfaceDef::destroy_skel), nullptr},
  {"lookup", std::addressof(POA_CORBA::ExtLocalInterfaceDef::lookup_skel), nullptr},
  {"contents", std::addressof(POA_CORBA::ExtLocalInterfaceDef::contents_skel), nullptr},
  {"lookup_name", std::addressof(POA_CORBA::ExtLocalInterfaceDef::lookup_name_skel), nullptr},
  {"describe_contents", std::addressof(POA_CORBA::ExtLocalInterfaceDef::describe_contents_skel), nullptr},
  {"create_module", std::addressof(POA_CORBA::ExtLocalInterfaceDef::create_module_skel), nullptr},
  {"create_constant", std::addressof(POA_CORBA::ExtLocalInterfaceDef::create_constant_skel), nullptr},
  {"create_struct", std::addressof(POA_CORBA::ExtLocalInterfaceDef::create_struct_skel), nullptr},
  {"create_union", std::addressof(POA_CORBA::ExtLocalInterfaceDef::create_union_skel), nullptr},
  {"create_enum", std::addressof(POA_CORBA::ExtLocalInterfaceDef::create_enum_skel), nullptr},
  {"create_alias", std::addressof(POA_CORBA::ExtLocalInterfaceDef::create_alias_skel), nullptr},
  {"create_interface", std::addressof(POA_CORBA::ExtLocalInterfaceDef::create_interface_skel), nullptr},
  {"create_value", std::addressof(POA_CORBA::ExtLocalInterfaceDef::create_value_skel), nullptr},
  {"create_value_box", std::addressof(POA_CORBA::ExtLocalInterfaceDef::create_value_box_skel), nullptr},
  {"create_exception", std::addressof(POA_CORBA::ExtLocalInterfaceDef::create_exception_skel), nullptr},
  {"create_native", std::addressof(POA_CORBA::ExtLocalInterfaceDef::create_native_skel), nullptr},
  {"create_abstract_interface", std::addressof(POA_CORBA::ExtLocalInterfaceDef::create_abstract_interface_skel), nullptr},
  {"create_local_interface", std::addressof(POA_CORBA::ExtLocalInterfaceDef::create_local_interface_skel), nullptr},
  {"create_ext_value", std::addressof(POA_CORBA::ExtLocalInterfaceDef::create_ext_value_skel), nullptr},
  {"_get_id", std::addressof(POA_CORBA::ExtLocalInterfaceDef::_get_id_skel), nullptr},
  {"_set_id", std::addressof(POA_CORBA::ExtLocalInterfaceDef::_set_id_skel), nullptr},
  {"_get_name", std::addressof(POA_CORBA::ExtLocalInterfaceDef::_get_name_skel), nullptr},
  {"_set_name", std::addressof(POA_CORBA::ExtLocalInterfaceDef::_set_name_skel), nullptr},
  {"_get_version", std::addressof(POA_CORBA::ExtLocalInterfaceDef::_get_version_skel), nullptr},
  {"_set_version", std::addressof(POA_CORBA::ExtLocalInterfaceDef::_set_version_skel), nullptr},
  {"_get_defined_in", std::addressof(POA_CORBA::ExtLocalInterfaceDef::_get_defined_in_skel), nullptr},
  {"_get_absolute_name", std::addressof(POA_CORBA::ExtLocalInterfaceDef::_get_absolute_name_skel), nullptr},
  {"_get_containing_repository", std::addressof(POA_CORBA::ExtLocalInterfaceDef::_get_containing_repository_skel), nullptr},
  {"describe", std::addressof(POA_CORBA::ExtLocalInterfaceDef::describe_skel), nullptr},
  {"move", std::addressof(POA_CORBA::ExtLocalInterfaceDef::move_skel), nullptr},
  {"_get_type", std::addressof(POA_CORBA::ExtLocalInterfaceDef::_get_type_skel), nullptr},
  {"_get_base_interfaces", std::addressof(POA_CORBA::ExtLocalInterfaceDef::_get_base_interfaces_skel), nullptr},
  {"_set_base_interfaces", std::addressof(POA_CORBA::ExtLocalInterfaceDef::_set_base_interfaces_skel), nullptr},
  {"is_a", std::addressof(POA_CORBA::ExtLocalInterfaceDef::is_a_skel), nullptr},
  {"describe_interface", std::addressof(POA_CORBA::ExtLocalInterfaceDef::describe_interface_skel), nullptr},
  {"create_attribute", std::addressof(POA_CORBA::ExtLocalInterfaceDef::create_attribute_skel), nullptr},
  {"create_operation", std::addressof(POA_CORBA::ExtLocalInterfaceDef::create_operation_skel), nullptr},
  {"describe_ext_interface", std::addressof(POA_CORBA::ExtLocalInterfaceDef::describe_ext_interface_skel), nullptr},
  {"create_ext_attribute", std::addressof(POA_CORBA::ExtLocalInterfaceDef::create_ext_attribute_skel), nullptr},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_CORBA_ExtLocalInterfaceDef_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (135);
static char _tao_CORBA_ExtLocalInterfaceDef_optable_pool [_tao_CORBA_ExtLocalInterfaceDef_optable_size];
static ACE_Static_Allocator_Base _tao_CORBA_ExtLocalInterfaceDef_allocator (_tao_CORBA_ExtLocalInterfaceDef_optable_pool, _tao_CORBA_ExtLocalInterfaceDef_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CORBA_ExtLocalInterfaceDef_optable (
    CORBA_ExtLocalInterfaceDef_operations,
    45,
    90,
    &_tao_CORBA_ExtLocalInterfaceDef_allocator
  );



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_CORBA::ExtLocalInterfaceDef::ExtLocalInterfaceDef ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_CORBA_ExtLocalInterfaceDef_optable);
}

POA_CORBA::ExtLocalInterfaceDef::ExtLocalInterfaceDef (const ExtLocalInterfaceDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CORBA::IRObject (rhs),
    POA_CORBA::Container (rhs),
    POA_CORBA::Contained (rhs),
    POA_CORBA::IDLType (rhs),
    POA_CORBA::InterfaceDef (rhs),
    POA_CORBA::LocalInterfaceDef (rhs),
    POA_CORBA::InterfaceAttrExtension (rhs)
{
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_CORBA::ExtLocalInterfaceDef::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:omg.org/CORBA/IRObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Container:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Contained:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/IDLType:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/InterfaceDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalInterfaceDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/InterfaceAttrExtension:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/ExtLocalInterfaceDef:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_CORBA::ExtLocalInterfaceDef::_interface_repository_id () const
{
  return "IDL:omg.org/CORBA/ExtLocalInterfaceDef:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_CORBA::ExtLocalInterfaceDef::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



CORBA::ExtLocalInterfaceDef *
POA_CORBA::ExtLocalInterfaceDef::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::CORBA::ExtLocalInterfaceDef>::unchecked_narrow (obj.in ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* ifndef */

