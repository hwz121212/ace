// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v3.0.7
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_codegen.cpp:622

#ifndef _TAO_IDL_IMPLREPOS_UQI1UC_CPP_
#define _TAO_IDL_IMPLREPOS_UQI1UC_CPP_


#include "ImplRepoS.h"
#include "tao/PortableServer/Operation_Table_Dynamic_Hash.h"
#include "tao/PortableServer/Direct_Collocation_Upcall_Wrapper.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"
#include "cstring"

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



static const TAO_operation_db_entry ImplementationRepository_ServerInformationIterator_operations [] = {
  {"next_n", std::addressof(POA_ImplementationRepository::ServerInformationIterator::next_n_skel), std::addressof(POA_ImplementationRepository::_TAO_ServerInformationIterator_Direct_Proxy_Impl::next_n)},
  {"destroy", std::addressof(POA_ImplementationRepository::ServerInformationIterator::destroy_skel), std::addressof(POA_ImplementationRepository::_TAO_ServerInformationIterator_Direct_Proxy_Impl::destroy)},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_ImplementationRepository_ServerInformationIterator_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (21);
static char _tao_ImplementationRepository_ServerInformationIterator_optable_pool [_tao_ImplementationRepository_ServerInformationIterator_optable_size];
static ACE_Static_Allocator_Base _tao_ImplementationRepository_ServerInformationIterator_allocator (_tao_ImplementationRepository_ServerInformationIterator_optable_pool, _tao_ImplementationRepository_ServerInformationIterator_optable_size);
static TAO_Dynamic_Hash_OpTable tao_ImplementationRepository_ServerInformationIterator_optable (
    ImplementationRepository_ServerInformationIterator_operations,
    7,
    14,
    &_tao_ImplementationRepository_ServerInformationIterator_allocator
  );


///////////////////////////////////////////////////////////////////////
//                 Direct Proxy  Implementation
//

POA_ImplementationRepository::_TAO_ServerInformationIterator_Direct_Proxy_Impl::~_TAO_ServerInformationIterator_Direct_Proxy_Impl ()
{
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_ImplementationRepository::_TAO_ServerInformationIterator_Direct_Proxy_Impl::next_n (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_ImplementationRepository::ServerInformationIterator_ptr _tao_ptr = 
    dynamic_cast<POA_ImplementationRepository::ServerInformationIterator_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  ((TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val *) args[0])->arg () =
    _tao_ptr->next_n (
          ((TAO::Arg_Traits< ::CORBA::ULong>::in_arg_val *) args[1])->arg (),
          ((TAO::Arg_Traits< ::ImplementationRepository::ServerInformationList>::out_arg_val *) args[2])->arg ()
        );
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_ImplementationRepository::_TAO_ServerInformationIterator_Direct_Proxy_Impl::destroy (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument **)
  
{
  POA_ImplementationRepository::ServerInformationIterator_ptr _tao_ptr = 
    dynamic_cast<POA_ImplementationRepository::ServerInformationIterator_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->destroy (
      );
}



//
//           End Direct Proxy Implementation
///////////////////////////////////////////////////////////////////////


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_ImplementationRepository::ServerInformationIterator::ServerInformationIterator ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_ImplementationRepository_ServerInformationIterator_optable);
}

POA_ImplementationRepository::ServerInformationIterator::ServerInformationIterator (const ServerInformationIterator& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}


namespace POA_ImplementationRepository
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class next_n_ServerInformationIterator
    : public TAO::Upcall_Command
  {
  public:
    inline next_n_ServerInformationIterator (
      POA_ImplementationRepository::ServerInformationIterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::ImplementationRepository::ServerInformationList>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::ImplementationRepository::ServerInformationList> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->next_n (
          arg_1
          , arg_2);
    }
  
  private:
    POA_ImplementationRepository::ServerInformationIterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_ImplementationRepository::ServerInformationIterator::next_n_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_how_many;
  TAO::SArg_Traits< ::ImplementationRepository::ServerInformationList>::out_arg_val _tao_servers;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_how_many),
      std::addressof(_tao_servers)
    };
  
  POA_ImplementationRepository::ServerInformationIterator * const impl =
    dynamic_cast<POA_ImplementationRepository::ServerInformationIterator *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  next_n_ServerInformationIterator command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 3
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ImplementationRepository
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class destroy_ServerInformationIterator
    : public TAO::Upcall_Command
  {
  public:
    inline destroy_ServerInformationIterator (
      POA_ImplementationRepository::ServerInformationIterator * servant)
      : servant_ (servant)
    {
    }

    void execute () override
    {
      this->servant_->destroy ();
    }
  
  private:
    POA_ImplementationRepository::ServerInformationIterator * const servant_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_ImplementationRepository::ServerInformationIterator::destroy_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      std::addressof(retval)
    };
  
  POA_ImplementationRepository::ServerInformationIterator * const impl =
    dynamic_cast<POA_ImplementationRepository::ServerInformationIterator *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  destroy_ServerInformationIterator command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 1
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_ImplementationRepository::ServerInformationIterator::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:ImplementationRepository/ServerInformationIterator:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_ImplementationRepository::ServerInformationIterator::_interface_repository_id () const
{
  return "IDL:ImplementationRepository/ServerInformationIterator:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_ImplementationRepository::ServerInformationIterator::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



ImplementationRepository::ServerInformationIterator *
POA_ImplementationRepository::ServerInformationIterator::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::ImplementationRepository::ServerInformationIterator>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry ImplementationRepository_Administration_operations [] = {
  {"activate_server", std::addressof(POA_ImplementationRepository::Administration::activate_server_skel), std::addressof(POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::activate_server)},
  {"add_or_update_server", std::addressof(POA_ImplementationRepository::Administration::add_or_update_server_skel), std::addressof(POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::add_or_update_server)},
  {"remove_server", std::addressof(POA_ImplementationRepository::Administration::remove_server_skel), std::addressof(POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::remove_server)},
  {"shutdown_server", std::addressof(POA_ImplementationRepository::Administration::shutdown_server_skel), std::addressof(POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::shutdown_server)},
  {"server_is_running", std::addressof(POA_ImplementationRepository::Administration::server_is_running_skel), std::addressof(POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::server_is_running)},
  {"server_is_shutting_down", std::addressof(POA_ImplementationRepository::Administration::server_is_shutting_down_skel), std::addressof(POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::server_is_shutting_down)},
  {"find", std::addressof(POA_ImplementationRepository::Administration::find_skel), std::addressof(POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::find)},
  {"list", std::addressof(POA_ImplementationRepository::Administration::list_skel), std::addressof(POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::list)},
  {"shutdown", std::addressof(POA_ImplementationRepository::Administration::shutdown_skel), std::addressof(POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::shutdown)},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_ImplementationRepository_Administration_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (42);
static char _tao_ImplementationRepository_Administration_optable_pool [_tao_ImplementationRepository_Administration_optable_size];
static ACE_Static_Allocator_Base _tao_ImplementationRepository_Administration_allocator (_tao_ImplementationRepository_Administration_optable_pool, _tao_ImplementationRepository_Administration_optable_size);
static TAO_Dynamic_Hash_OpTable tao_ImplementationRepository_Administration_optable (
    ImplementationRepository_Administration_operations,
    14,
    28,
    &_tao_ImplementationRepository_Administration_allocator
  );


///////////////////////////////////////////////////////////////////////
//                 Direct Proxy  Implementation
//

POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::~_TAO_Administration_Direct_Proxy_Impl ()
{
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::activate_server (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_ImplementationRepository::Administration_ptr _tao_ptr = 
    dynamic_cast<POA_ImplementationRepository::Administration_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->activate_server (
        ((TAO::Arg_Traits< char *>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::add_or_update_server (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_ImplementationRepository::Administration_ptr _tao_ptr = 
    dynamic_cast<POA_ImplementationRepository::Administration_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->add_or_update_server (
        ((TAO::Arg_Traits< char *>::in_arg_val *) args[1])->arg (),
        ((TAO::Arg_Traits< ::ImplementationRepository::StartupOptions>::in_arg_val *) args[2])->arg ()
      );
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::remove_server (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_ImplementationRepository::Administration_ptr _tao_ptr = 
    dynamic_cast<POA_ImplementationRepository::Administration_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->remove_server (
        ((TAO::Arg_Traits< char *>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::shutdown_server (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_ImplementationRepository::Administration_ptr _tao_ptr = 
    dynamic_cast<POA_ImplementationRepository::Administration_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->shutdown_server (
        ((TAO::Arg_Traits< char *>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::server_is_running (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_ImplementationRepository::Administration_ptr _tao_ptr = 
    dynamic_cast<POA_ImplementationRepository::Administration_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->server_is_running (
        ((TAO::Arg_Traits< char *>::in_arg_val *) args[1])->arg (),
        ((TAO::Arg_Traits< char *>::in_arg_val *) args[2])->arg (),
        ((TAO::Arg_Traits< ::ImplementationRepository::ServerObject>::in_arg_val *) args[3])->arg ()
      );
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::server_is_shutting_down (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_ImplementationRepository::Administration_ptr _tao_ptr = 
    dynamic_cast<POA_ImplementationRepository::Administration_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->server_is_shutting_down (
        ((TAO::Arg_Traits< char *>::in_arg_val *) args[1])->arg ()
      );
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::find (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_ImplementationRepository::Administration_ptr _tao_ptr = 
    dynamic_cast<POA_ImplementationRepository::Administration_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->find (
        ((TAO::Arg_Traits< char *>::in_arg_val *) args[1])->arg (),
        ((TAO::Arg_Traits< ::ImplementationRepository::ServerInformation>::out_arg_val *) args[2])->arg ()
      );
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::list (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_ImplementationRepository::Administration_ptr _tao_ptr = 
    dynamic_cast<POA_ImplementationRepository::Administration_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->list (
        ((TAO::Arg_Traits< ::CORBA::ULong>::in_arg_val *) args[1])->arg (),
        ((TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val *) args[2])->arg (),
        ((TAO::Arg_Traits< ::ImplementationRepository::ServerInformationList>::out_arg_val *) args[3])->arg (),
        ((TAO::Arg_Traits< ::ImplementationRepository::ServerInformationIterator>::out_arg_val *) args[4])->arg ()
      );
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::shutdown (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_ImplementationRepository::Administration_ptr _tao_ptr = 
    dynamic_cast<POA_ImplementationRepository::Administration_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->shutdown (
        ((TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val *) args[1])->arg (),
        ((TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val *) args[2])->arg ()
      );
}



//
//           End Direct Proxy Implementation
///////////////////////////////////////////////////////////////////////


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_ImplementationRepository::Administration::Administration ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_ImplementationRepository_Administration_optable);
}

POA_ImplementationRepository::Administration::Administration (const Administration& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}


namespace POA_ImplementationRepository
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class activate_server_Administration
    : public TAO::Upcall_Command
  {
  public:
    inline activate_server_Administration (
      POA_ImplementationRepository::Administration * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->activate_server (
        arg_1);
    }
  
  private:
    POA_ImplementationRepository::Administration * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_ImplementationRepository::Administration::activate_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      ImplementationRepository::_tc_NotFound,
      ImplementationRepository::_tc_CannotActivate
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_server;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_server)
    };
  
  POA_ImplementationRepository::Administration * const impl =
    dynamic_cast<POA_ImplementationRepository::Administration *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  activate_server_Administration command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 2
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ImplementationRepository
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class add_or_update_server_Administration
    : public TAO::Upcall_Command
  {
  public:
    inline add_or_update_server_Administration (
      POA_ImplementationRepository::Administration * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::ImplementationRepository::StartupOptions>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::ImplementationRepository::StartupOptions> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->add_or_update_server (
        arg_1
        , arg_2);
    }
  
  private:
    POA_ImplementationRepository::Administration * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_ImplementationRepository::Administration::add_or_update_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      ImplementationRepository::_tc_NotFound
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_server;
  TAO::SArg_Traits< ::ImplementationRepository::StartupOptions>::in_arg_val _tao_options;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_server),
      std::addressof(_tao_options)
    };
  
  POA_ImplementationRepository::Administration * const impl =
    dynamic_cast<POA_ImplementationRepository::Administration *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  add_or_update_server_Administration command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 3
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ImplementationRepository
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class remove_server_Administration
    : public TAO::Upcall_Command
  {
  public:
    inline remove_server_Administration (
      POA_ImplementationRepository::Administration * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->remove_server (
        arg_1);
    }
  
  private:
    POA_ImplementationRepository::Administration * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_ImplementationRepository::Administration::remove_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      ImplementationRepository::_tc_NotFound
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_server;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_server)
    };
  
  POA_ImplementationRepository::Administration * const impl =
    dynamic_cast<POA_ImplementationRepository::Administration *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  remove_server_Administration command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ImplementationRepository
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class shutdown_server_Administration
    : public TAO::Upcall_Command
  {
  public:
    inline shutdown_server_Administration (
      POA_ImplementationRepository::Administration * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->shutdown_server (
        arg_1);
    }
  
  private:
    POA_ImplementationRepository::Administration * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_ImplementationRepository::Administration::shutdown_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      ImplementationRepository::_tc_NotFound
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_server;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_server)
    };
  
  POA_ImplementationRepository::Administration * const impl =
    dynamic_cast<POA_ImplementationRepository::Administration *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  shutdown_server_Administration command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ImplementationRepository
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class server_is_running_Administration
    : public TAO::Upcall_Command
  {
  public:
    inline server_is_running_Administration (
      POA_ImplementationRepository::Administration * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::ImplementationRepository::ServerObject>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::ImplementationRepository::ServerObject> (
          this->operation_details_,
          this->args_,
          3);
        
      this->servant_->server_is_running (
        arg_1
        , arg_2
        , arg_3);
    }
  
  private:
    POA_ImplementationRepository::Administration * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_ImplementationRepository::Administration::server_is_running_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      ImplementationRepository::_tc_NotFound
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_server;
  TAO::SArg_Traits< char *>::in_arg_val _tao_partial_ior;
  TAO::SArg_Traits< ::ImplementationRepository::ServerObject>::in_arg_val _tao_server_object;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_server),
      std::addressof(_tao_partial_ior),
      std::addressof(_tao_server_object)
    };
  
  POA_ImplementationRepository::Administration * const impl =
    dynamic_cast<POA_ImplementationRepository::Administration *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  server_is_running_Administration command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 4
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ImplementationRepository
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class server_is_shutting_down_Administration
    : public TAO::Upcall_Command
  {
  public:
    inline server_is_shutting_down_Administration (
      POA_ImplementationRepository::Administration * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->server_is_shutting_down (
        arg_1);
    }
  
  private:
    POA_ImplementationRepository::Administration * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_ImplementationRepository::Administration::server_is_shutting_down_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      ImplementationRepository::_tc_NotFound
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_server;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_server)
    };
  
  POA_ImplementationRepository::Administration * const impl =
    dynamic_cast<POA_ImplementationRepository::Administration *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  server_is_shutting_down_Administration command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 1
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ImplementationRepository
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class find_Administration
    : public TAO::Upcall_Command
  {
  public:
    inline find_Administration (
      POA_ImplementationRepository::Administration * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::ImplementationRepository::ServerInformation>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::ImplementationRepository::ServerInformation> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->find (
        arg_1
        , arg_2);
    }
  
  private:
    POA_ImplementationRepository::Administration * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_ImplementationRepository::Administration::find_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_server;
  TAO::SArg_Traits< ::ImplementationRepository::ServerInformation>::out_arg_val _tao_info;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_server),
      std::addressof(_tao_info)
    };
  
  POA_ImplementationRepository::Administration * const impl =
    dynamic_cast<POA_ImplementationRepository::Administration *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  find_Administration command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 3
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ImplementationRepository
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class list_Administration
    : public TAO::Upcall_Command
  {
  public:
    inline list_Administration (
      POA_ImplementationRepository::Administration * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::ImplementationRepository::ServerInformationList>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::ImplementationRepository::ServerInformationList> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::ImplementationRepository::ServerInformationIterator>::out_arg_type arg_4 =
        TAO::Portable_Server::get_out_arg< ::ImplementationRepository::ServerInformationIterator> (
          this->operation_details_,
          this->args_,
          4);
        
      this->servant_->list (
        arg_1
        , arg_2
        , arg_3
        , arg_4);
    }
  
  private:
    POA_ImplementationRepository::Administration * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_ImplementationRepository::Administration::list_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_how_many;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_determine_active_status;
  TAO::SArg_Traits< ::ImplementationRepository::ServerInformationList>::out_arg_val _tao_server_list;
  TAO::SArg_Traits< ::ImplementationRepository::ServerInformationIterator>::out_arg_val _tao_server_iterator;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_how_many),
      std::addressof(_tao_determine_active_status),
      std::addressof(_tao_server_list),
      std::addressof(_tao_server_iterator)
    };
  
  POA_ImplementationRepository::Administration * const impl =
    dynamic_cast<POA_ImplementationRepository::Administration *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  list_Administration command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 5
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ImplementationRepository
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class shutdown_Administration
    : public TAO::Upcall_Command
  {
  public:
    inline shutdown_Administration (
      POA_ImplementationRepository::Administration * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->shutdown (
        arg_1
        , arg_2);
    }
  
  private:
    POA_ImplementationRepository::Administration * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_ImplementationRepository::Administration::shutdown_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_activators;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_servers;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_activators),
      std::addressof(_tao_servers)
    };
  
  POA_ImplementationRepository::Administration * const impl =
    dynamic_cast<POA_ImplementationRepository::Administration *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  shutdown_Administration command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 3
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_ImplementationRepository::Administration::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:ImplementationRepository/Administration:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_ImplementationRepository::Administration::_interface_repository_id () const
{
  return "IDL:ImplementationRepository/Administration:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_ImplementationRepository::Administration::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



ImplementationRepository::Administration *
POA_ImplementationRepository::Administration::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::ImplementationRepository::Administration>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry ImplementationRepository_AdministrationExt_operations [] = {
  {"activate_server", std::addressof(POA_ImplementationRepository::AdministrationExt::activate_server_skel), std::addressof(POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::activate_server)},
  {"add_or_update_server", std::addressof(POA_ImplementationRepository::AdministrationExt::add_or_update_server_skel), std::addressof(POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::add_or_update_server)},
  {"remove_server", std::addressof(POA_ImplementationRepository::AdministrationExt::remove_server_skel), std::addressof(POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::remove_server)},
  {"shutdown_server", std::addressof(POA_ImplementationRepository::AdministrationExt::shutdown_server_skel), std::addressof(POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::shutdown_server)},
  {"server_is_running", std::addressof(POA_ImplementationRepository::AdministrationExt::server_is_running_skel), std::addressof(POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::server_is_running)},
  {"server_is_shutting_down", std::addressof(POA_ImplementationRepository::AdministrationExt::server_is_shutting_down_skel), std::addressof(POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::server_is_shutting_down)},
  {"find", std::addressof(POA_ImplementationRepository::AdministrationExt::find_skel), std::addressof(POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::find)},
  {"list", std::addressof(POA_ImplementationRepository::AdministrationExt::list_skel), std::addressof(POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::list)},
  {"shutdown", std::addressof(POA_ImplementationRepository::AdministrationExt::shutdown_skel), std::addressof(POA_ImplementationRepository::_TAO_Administration_Direct_Proxy_Impl::shutdown)},
  {"link_servers", std::addressof(POA_ImplementationRepository::AdministrationExt::link_servers_skel), std::addressof(POA_ImplementationRepository::_TAO_AdministrationExt_Direct_Proxy_Impl::link_servers)},
  {"kill_server", std::addressof(POA_ImplementationRepository::AdministrationExt::kill_server_skel), std::addressof(POA_ImplementationRepository::_TAO_AdministrationExt_Direct_Proxy_Impl::kill_server)},
  {"force_remove_server", std::addressof(POA_ImplementationRepository::AdministrationExt::force_remove_server_skel), std::addressof(POA_ImplementationRepository::_TAO_AdministrationExt_Direct_Proxy_Impl::force_remove_server)},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_ImplementationRepository_AdministrationExt_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (51);
static char _tao_ImplementationRepository_AdministrationExt_optable_pool [_tao_ImplementationRepository_AdministrationExt_optable_size];
static ACE_Static_Allocator_Base _tao_ImplementationRepository_AdministrationExt_allocator (_tao_ImplementationRepository_AdministrationExt_optable_pool, _tao_ImplementationRepository_AdministrationExt_optable_size);
static TAO_Dynamic_Hash_OpTable tao_ImplementationRepository_AdministrationExt_optable (
    ImplementationRepository_AdministrationExt_operations,
    17,
    34,
    &_tao_ImplementationRepository_AdministrationExt_allocator
  );


///////////////////////////////////////////////////////////////////////
//                 Direct Proxy  Implementation
//

POA_ImplementationRepository::_TAO_AdministrationExt_Direct_Proxy_Impl::~_TAO_AdministrationExt_Direct_Proxy_Impl ()
{
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_ImplementationRepository::_TAO_AdministrationExt_Direct_Proxy_Impl::link_servers (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_ImplementationRepository::AdministrationExt_ptr _tao_ptr = 
    dynamic_cast<POA_ImplementationRepository::AdministrationExt_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->link_servers (
        ((TAO::Arg_Traits< char *>::in_arg_val *) args[1])->arg (),
        ((TAO::Arg_Traits< ::CORBA::StringSeq>::in_arg_val *) args[2])->arg ()
      );
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_ImplementationRepository::_TAO_AdministrationExt_Direct_Proxy_Impl::kill_server (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_ImplementationRepository::AdministrationExt_ptr _tao_ptr = 
    dynamic_cast<POA_ImplementationRepository::AdministrationExt_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->kill_server (
        ((TAO::Arg_Traits< char *>::in_arg_val *) args[1])->arg (),
        ((TAO::Arg_Traits< ::CORBA::Short>::in_arg_val *) args[2])->arg ()
      );
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_ImplementationRepository::_TAO_AdministrationExt_Direct_Proxy_Impl::force_remove_server (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_ImplementationRepository::AdministrationExt_ptr _tao_ptr = 
    dynamic_cast<POA_ImplementationRepository::AdministrationExt_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->force_remove_server (
        ((TAO::Arg_Traits< char *>::in_arg_val *) args[1])->arg (),
        ((TAO::Arg_Traits< ::CORBA::Short>::in_arg_val *) args[2])->arg ()
      );
}



//
//           End Direct Proxy Implementation
///////////////////////////////////////////////////////////////////////


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_ImplementationRepository::AdministrationExt::AdministrationExt ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_ImplementationRepository_AdministrationExt_optable);
}

POA_ImplementationRepository::AdministrationExt::AdministrationExt (const AdministrationExt& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_ImplementationRepository::Administration (rhs)
{
}


namespace POA_ImplementationRepository
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class link_servers_AdministrationExt
    : public TAO::Upcall_Command
  {
  public:
    inline link_servers_AdministrationExt (
      POA_ImplementationRepository::AdministrationExt * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::StringSeq>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::StringSeq> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->link_servers (
        arg_1
        , arg_2);
    }
  
  private:
    POA_ImplementationRepository::AdministrationExt * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_ImplementationRepository::AdministrationExt::link_servers_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      ImplementationRepository::_tc_NotFound,
      ImplementationRepository::_tc_CannotComplete
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_server;
  TAO::SArg_Traits< ::CORBA::StringSeq>::in_arg_val _tao_peers;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_server),
      std::addressof(_tao_peers)
    };
  
  POA_ImplementationRepository::AdministrationExt * const impl =
    dynamic_cast<POA_ImplementationRepository::AdministrationExt *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  link_servers_AdministrationExt command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 3
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 2
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ImplementationRepository
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class kill_server_AdministrationExt
    : public TAO::Upcall_Command
  {
  public:
    inline kill_server_AdministrationExt (
      POA_ImplementationRepository::AdministrationExt * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->kill_server (
        arg_1
        , arg_2);
    }
  
  private:
    POA_ImplementationRepository::AdministrationExt * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_ImplementationRepository::AdministrationExt::kill_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      ImplementationRepository::_tc_NotFound,
      ImplementationRepository::_tc_CannotComplete
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_server;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_signum;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_server),
      std::addressof(_tao_signum)
    };
  
  POA_ImplementationRepository::AdministrationExt * const impl =
    dynamic_cast<POA_ImplementationRepository::AdministrationExt *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  kill_server_AdministrationExt command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 3
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 2
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ImplementationRepository
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class force_remove_server_AdministrationExt
    : public TAO::Upcall_Command
  {
  public:
    inline force_remove_server_AdministrationExt (
      POA_ImplementationRepository::AdministrationExt * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->force_remove_server (
        arg_1
        , arg_2);
    }
  
  private:
    POA_ImplementationRepository::AdministrationExt * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_ImplementationRepository::AdministrationExt::force_remove_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      ImplementationRepository::_tc_NotFound,
      ImplementationRepository::_tc_CannotComplete
    };
  
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_server;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_signum;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_server),
      std::addressof(_tao_signum)
    };
  
  POA_ImplementationRepository::AdministrationExt * const impl =
    dynamic_cast<POA_ImplementationRepository::AdministrationExt *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  force_remove_server_AdministrationExt command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 3
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , 2
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_ImplementationRepository::AdministrationExt::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:ImplementationRepository/Administration:1.0") == 0 ||
      std::strcmp (value, "IDL:ImplementationRepository/AdministrationExt:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_ImplementationRepository::AdministrationExt::_interface_repository_id () const
{
  return "IDL:ImplementationRepository/AdministrationExt:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_ImplementationRepository::AdministrationExt::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



ImplementationRepository::AdministrationExt *
POA_ImplementationRepository::AdministrationExt::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::ImplementationRepository::AdministrationExt>::unchecked_narrow (obj.in ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* ifndef */

