// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v3.0.7
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_codegen.cpp:363


#include "tao/IORTable/IORTable.h"
#include "tao/CDR.h"
#include "tao/SystemException.h"
#include "cstring"

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_exception\exception_cs.cpp:97

IORTable::AlreadyBound::AlreadyBound ()
  : ::CORBA::UserException (
        "IDL:IORTable/AlreadyBound:1.0",
        "AlreadyBound")
{
}

IORTable::AlreadyBound::AlreadyBound (const ::IORTable::AlreadyBound &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
}

IORTable::AlreadyBound&
IORTable::AlreadyBound::operator= (const ::IORTable::AlreadyBound &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

IORTable::AlreadyBound *
IORTable::AlreadyBound::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<AlreadyBound *> (_tao_excp);
}

const IORTable::AlreadyBound *
IORTable::AlreadyBound::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const AlreadyBound *> (_tao_excp);
}

::CORBA::Exception *IORTable::AlreadyBound::_alloc ()
{
  ::CORBA::Exception *retval {};
  ACE_NEW_RETURN (retval, ::IORTable::AlreadyBound, nullptr);
  return retval;
}

::CORBA::Exception *
IORTable::AlreadyBound::_tao_duplicate () const
{
  ::CORBA::Exception *result {};
  ACE_NEW_RETURN (result, ::IORTable::AlreadyBound (*this), nullptr);
  return result;
}

void IORTable::AlreadyBound::_raise () const
{
  throw *this;
}

void IORTable::AlreadyBound::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void IORTable::AlreadyBound::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_exception\exception_cs.cpp:97

IORTable::NotFound::NotFound ()
  : ::CORBA::UserException (
        "IDL:IORTable/NotFound:1.0",
        "NotFound")
{
}

IORTable::NotFound::NotFound (const ::IORTable::NotFound &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
}

IORTable::NotFound&
IORTable::NotFound::operator= (const ::IORTable::NotFound &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

IORTable::NotFound *
IORTable::NotFound::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NotFound *> (_tao_excp);
}

const IORTable::NotFound *
IORTable::NotFound::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NotFound *> (_tao_excp);
}

::CORBA::Exception *IORTable::NotFound::_alloc ()
{
  ::CORBA::Exception *retval {};
  ACE_NEW_RETURN (retval, ::IORTable::NotFound, nullptr);
  return retval;
}

::CORBA::Exception *
IORTable::NotFound::_tao_duplicate () const
{
  ::CORBA::Exception *result {};
  ACE_NEW_RETURN (result, ::IORTable::NotFound (*this), nullptr);
  return result;
}

void IORTable::NotFound::_raise () const
{
  throw *this;
}

void IORTable::NotFound::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void IORTable::NotFound::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_cs.cpp:47



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for IORTable::Table.

IORTable::Table_ptr
TAO::Objref_Traits<IORTable::Table>::duplicate (IORTable::Table_ptr p)
{
  return IORTable::Table::_duplicate (p);
}

void
TAO::Objref_Traits<IORTable::Table>::release (IORTable::Table_ptr p)
{
  ::CORBA::release (p);
}

IORTable::Table_ptr
TAO::Objref_Traits<IORTable::Table>::nil ()
{
  return IORTable::Table::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<IORTable::Table>::marshal (const IORTable::Table_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




IORTable::Table::Table ()
{}IORTable::Table_ptr
IORTable::Table::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return Table::_duplicate (
      dynamic_cast<Table_ptr> (_tao_objref));
}

IORTable::Table_ptr
IORTable::Table::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return Table::_duplicate (
      dynamic_cast<Table_ptr> (_tao_objref));
}

IORTable::Table_ptr
IORTable::Table::_nil ()
{
  return nullptr;
}

IORTable::Table_ptr
IORTable::Table::_duplicate (Table_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
IORTable::Table::_tao_release (Table_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
IORTable::Table::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:IORTable/Table:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* IORTable::Table::_interface_repository_id () const
{
  return "IDL:IORTable/Table:1.0";
}

::CORBA::Boolean
IORTable::Table::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_cs.cpp:47



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for IORTable::Locator.

IORTable::Locator_ptr
TAO::Objref_Traits<IORTable::Locator>::duplicate (IORTable::Locator_ptr p)
{
  return IORTable::Locator::_duplicate (p);
}

void
TAO::Objref_Traits<IORTable::Locator>::release (IORTable::Locator_ptr p)
{
  ::CORBA::release (p);
}

IORTable::Locator_ptr
TAO::Objref_Traits<IORTable::Locator>::nil ()
{
  return IORTable::Locator::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<IORTable::Locator>::marshal (const IORTable::Locator_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




IORTable::Locator::Locator ()
{}IORTable::Locator_ptr
IORTable::Locator::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return Locator::_duplicate (
      dynamic_cast<Locator_ptr> (_tao_objref));
}

IORTable::Locator_ptr
IORTable::Locator::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return Locator::_duplicate (
      dynamic_cast<Locator_ptr> (_tao_objref));
}

IORTable::Locator_ptr
IORTable::Locator::_nil ()
{
  return nullptr;
}

IORTable::Locator_ptr
IORTable::Locator::_duplicate (Locator_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
IORTable::Locator::_tao_release (Locator_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
IORTable::Locator::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:IORTable/Locator:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/LocalObject:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* IORTable::Locator::_interface_repository_id () const
{
  return "IDL:IORTable/Locator:1.0";
}

::CORBA::Boolean
IORTable::Locator::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_exception\cdr_op_cs.cpp:47



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IORTable::AlreadyBound &_tao_aggregate)
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    IORTable::AlreadyBound&)
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_exception\cdr_op_cs.cpp:47



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IORTable::NotFound &_tao_aggregate)
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    IORTable::NotFound&)
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


