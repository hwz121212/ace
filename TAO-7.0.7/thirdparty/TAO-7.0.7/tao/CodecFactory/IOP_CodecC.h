// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v3.0.7
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_codegen.cpp:148

#ifndef _TAO_PIDL_IOP_CODECC_IFIBXB_H_
#define _TAO_PIDL_IOP_CODECC_IFIBXB_H_

#include /**/ "ace/pre.h"

#ifndef TAO_CODECFACTORY_SAFE_INCLUDE
#error You should not include IOP_CodecC.h, use tao/CodecFactory/CodecFactory.h
#endif /* TAO_CODECFACTORY_SAFE_INCLUDE */

#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "tao/CodecFactory/codecfactory_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Typecode_typesA.h"
#include "tao/AnyTypeCode/OctetSeqA.h"
#include "tao/AnyTypeCode/CONV_FRAMEA.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/Typecode_typesC.h"
#include "tao/OctetSeqC.h"
#include "tao/CONV_FRAMEC.h"

#if TAO_MAJOR_VERSION != 3 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 7
#error This file should be regenerated with TAO_IDL
#endif

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_module\module_ch.cpp:34

namespace IOP
{
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_interface.cpp:747

  

#if !defined (_IOP_CODEC__VAR_OUT_CH_)
#define _IOP_CODEC__VAR_OUT_CH_

  class Codec;
  using Codec_ptr = Codec*;
  using Codec_var = TAO_Objref_Var_T<Codec>;
  using Codec_out = TAO_Objref_Out_T<Codec>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ch.cpp:39

  

  class TAO_CODECFACTORY_Export Codec
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_type.cpp:296

    using _ptr_type = Codec_ptr;
    using _var_type = Codec_var;
    using _out_type = Codec_out;

    // The static operations.
    static Codec_ptr _duplicate (Codec_ptr obj);

    static void _tao_release (Codec_ptr obj);

    static Codec_ptr _narrow (::CORBA::Object_ptr obj);
    static Codec_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Codec_ptr _nil ();
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_exception\exception_ch.cpp:40

    

    class TAO_CODECFACTORY_Export InvalidTypeForEncoding : public ::CORBA::UserException
    {
    public:

      InvalidTypeForEncoding ();
      InvalidTypeForEncoding (const InvalidTypeForEncoding &);
      ~InvalidTypeForEncoding () = default;

      InvalidTypeForEncoding &operator= (const InvalidTypeForEncoding &);

      static void _tao_any_destructor (void *);

      static InvalidTypeForEncoding *_downcast ( ::CORBA::Exception *);
      static const InvalidTypeForEncoding *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc ();

      virtual ::CORBA::Exception *_tao_duplicate () const;

      virtual void _raise () const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);

      virtual ::CORBA::TypeCode_ptr _tao_type () const;
    };
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_InvalidTypeForEncoding;
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_exception\exception_ch.cpp:40

    

    class TAO_CODECFACTORY_Export FormatMismatch : public ::CORBA::UserException
    {
    public:

      FormatMismatch ();
      FormatMismatch (const FormatMismatch &);
      ~FormatMismatch () = default;

      FormatMismatch &operator= (const FormatMismatch &);

      static void _tao_any_destructor (void *);

      static FormatMismatch *_downcast ( ::CORBA::Exception *);
      static const FormatMismatch *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc ();

      virtual ::CORBA::Exception *_tao_duplicate () const;

      virtual void _raise () const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);

      virtual ::CORBA::TypeCode_ptr _tao_type () const;
    };
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_FormatMismatch;
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_exception\exception_ch.cpp:40

    

    class TAO_CODECFACTORY_Export TypeMismatch : public ::CORBA::UserException
    {
    public:

      TypeMismatch ();
      TypeMismatch (const TypeMismatch &);
      ~TypeMismatch () = default;

      TypeMismatch &operator= (const TypeMismatch &);

      static void _tao_any_destructor (void *);

      static TypeMismatch *_downcast ( ::CORBA::Exception *);
      static const TypeMismatch *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc ();

      virtual ::CORBA::Exception *_tao_duplicate () const;

      virtual void _raise () const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);

      virtual ::CORBA::TypeCode_ptr _tao_type () const;
    };
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_TypeMismatch;

    virtual ::CORBA::OctetSeq * encode (
      const ::CORBA::Any & data) = 0;

    virtual ::CORBA::Any * decode (
      const ::CORBA::OctetSeq & data) = 0;

    virtual ::CORBA::OctetSeq * encode_value (
      const ::CORBA::Any & data) = 0;

    virtual ::CORBA::Any * decode_value (
      const ::CORBA::OctetSeq & data,
      ::CORBA::TypeCode_ptr tc) = 0;

    
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    Codec ();

    

    virtual ~Codec () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    Codec (const Codec &) = delete;
    Codec (Codec &&) = delete;
    Codec &operator= (const Codec &) = delete;
    Codec &operator= (Codec &&) = delete;
  };
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:33

  extern TAO_CODECFACTORY_Export ::CORBA::TypeCode_ptr const _tc_Codec;
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_typedef\typedef_ch.cpp:366

  typedef ::CORBA::Short EncodingFormat;
  typedef ::CORBA::Short_out EncodingFormat_out;
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:33

  extern TAO_CODECFACTORY_Export ::CORBA::TypeCode_ptr const _tc_EncodingFormat;
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_constant\constant_ch.cpp:34

  

  const CORBA::Short ENCODING_CDR_ENCAPS = 0;
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_type.cpp:257

  

  struct Encoding;
  using Encoding_var = ::TAO_Fixed_Var_T<Encoding>;
  using Encoding_out = Encoding&;

  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_structure\structure_ch.cpp:47

  

  struct TAO_CODECFACTORY_Export Encoding
  {
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_type.cpp:296

    
    using _var_type = Encoding_var;
    using _out_type = Encoding_out;

    static void _tao_any_destructor (void *);
    
    IOP::EncodingFormat format;
    ::CORBA::Octet major_version;
    ::CORBA::Octet minor_version;
  };
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:33

  extern TAO_CODECFACTORY_Export ::CORBA::TypeCode_ptr const _tc_Encoding;
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_type.cpp:257

  

  struct Encoding_1_2;
  using Encoding_1_2_var = ::TAO_Fixed_Var_T<Encoding_1_2>;
  using Encoding_1_2_out = Encoding_1_2&;

  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_structure\structure_ch.cpp:47

  

  struct TAO_CODECFACTORY_Export Encoding_1_2
  {
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_type.cpp:296

    
    using _var_type = Encoding_1_2_var;
    using _out_type = Encoding_1_2_out;

    static void _tao_any_destructor (void *);
    
    IOP::EncodingFormat format;
    ::CORBA::Octet major_version;
    ::CORBA::Octet minor_version;
    CONV_FRAME::CodeSetId char_codeset;
    CONV_FRAME::CodeSetId wchar_codeset;
  };
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:33

  extern TAO_CODECFACTORY_Export ::CORBA::TypeCode_ptr const _tc_Encoding_1_2;
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_interface.cpp:747

  

#if !defined (_IOP_CODECFACTORY__VAR_OUT_CH_)
#define _IOP_CODECFACTORY__VAR_OUT_CH_

  class CodecFactory;
  using CodecFactory_ptr = CodecFactory*;
  using CodecFactory_var = TAO_Objref_Var_T<CodecFactory>;
  using CodecFactory_out = TAO_Objref_Out_T<CodecFactory>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ch.cpp:39

  

  class TAO_CODECFACTORY_Export CodecFactory
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_type.cpp:296

    using _ptr_type = CodecFactory_ptr;
    using _var_type = CodecFactory_var;
    using _out_type = CodecFactory_out;

    // The static operations.
    static CodecFactory_ptr _duplicate (CodecFactory_ptr obj);

    static void _tao_release (CodecFactory_ptr obj);

    static CodecFactory_ptr _narrow (::CORBA::Object_ptr obj);
    static CodecFactory_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static CodecFactory_ptr _nil ();
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_exception\exception_ch.cpp:40

    

    class TAO_CODECFACTORY_Export UnknownEncoding : public ::CORBA::UserException
    {
    public:

      UnknownEncoding ();
      UnknownEncoding (const UnknownEncoding &);
      ~UnknownEncoding () = default;

      UnknownEncoding &operator= (const UnknownEncoding &);

      static void _tao_any_destructor (void *);

      static UnknownEncoding *_downcast ( ::CORBA::Exception *);
      static const UnknownEncoding *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc ();

      virtual ::CORBA::Exception *_tao_duplicate () const;

      virtual void _raise () const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);

      virtual ::CORBA::TypeCode_ptr _tao_type () const;
    };
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_UnknownEncoding;
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_exception\exception_ch.cpp:40

    

    class TAO_CODECFACTORY_Export UnsupportedCodeset : public ::CORBA::UserException
    {
    public:
      CONV_FRAME::CodeSetId codeset;

      UnsupportedCodeset ();
      UnsupportedCodeset (const UnsupportedCodeset &);
      ~UnsupportedCodeset () = default;

      UnsupportedCodeset &operator= (const UnsupportedCodeset &);

      static void _tao_any_destructor (void *);

      static UnsupportedCodeset *_downcast ( ::CORBA::Exception *);
      static const UnsupportedCodeset *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc ();

      virtual ::CORBA::Exception *_tao_duplicate () const;

      virtual void _raise () const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      // TAO_IDL - Generated from
      // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_exception\exception_ctor.cpp:50

      

      UnsupportedCodeset (
          CONV_FRAME::CodeSetId _tao_codeset);

      virtual ::CORBA::TypeCode_ptr _tao_type () const;
    };
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_UnsupportedCodeset;

    virtual ::IOP::Codec_ptr create_codec (
      const ::IOP::Encoding & enc) = 0;

    virtual ::IOP::Codec_ptr create_codec_with_codesets (
      const ::IOP::Encoding_1_2 & enc) = 0;

    
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    CodecFactory ();

    

    virtual ~CodecFactory () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    CodecFactory (const CodecFactory &) = delete;
    CodecFactory (CodecFactory &&) = delete;
    CodecFactory &operator= (const CodecFactory &) = delete;
    CodecFactory &operator= (CodecFactory &&) = delete;
  };
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:33

  extern TAO_CODECFACTORY_Export ::CORBA::TypeCode_ptr const _tc_CodecFactory;


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_module\module_ch.cpp:62


} // module IOP
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_arg_traits.cpp:64




TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::IOP::Encoding>
    : public
        Fixed_Size_Arg_Traits_T<
            ::IOP::Encoding,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_arg_traits.cpp:931

  

  template<>
  class Arg_Traits< ::IOP::Encoding_1_2>
    : public
        Fixed_Size_Arg_Traits_T<
            ::IOP::Encoding_1_2,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_traits.cpp:58




TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_IOP_CODEC__TRAITS_)
#define _IOP_CODEC__TRAITS_

  template<>
  struct TAO_CODECFACTORY_Export Objref_Traits< ::IOP::Codec>
  {
    static ::IOP::Codec_ptr duplicate (::IOP::Codec_ptr p);
    static void release (::IOP::Codec_ptr p);
    static ::IOP::Codec_ptr nil ();
    static ::CORBA::Boolean marshal (const ::IOP::Codec_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_IOP_CODECFACTORY__TRAITS_)
#define _IOP_CODECFACTORY__TRAITS_

  template<>
  struct TAO_CODECFACTORY_Export Objref_Traits< ::IOP::CodecFactory>
  {
    static ::IOP::CodecFactory_ptr duplicate (::IOP::CodecFactory_ptr p);
    static void release (::IOP::CodecFactory_ptr p);
    static ::IOP::CodecFactory_ptr nil ();
    static ::CORBA::Boolean marshal (const ::IOP::CodecFactory_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_structure\any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IOP
{
  TAO_CODECFACTORY_Export void operator<<= (::CORBA::Any &, const ::IOP::Encoding &); // copying version
  TAO_CODECFACTORY_Export void operator<<= (::CORBA::Any &, ::IOP::Encoding*); // noncopying version
  TAO_CODECFACTORY_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::IOP::Encoding *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_CODECFACTORY_Export void operator<<= (::CORBA::Any &, const IOP::Encoding &); // copying version
TAO_CODECFACTORY_Export void operator<<= (::CORBA::Any &, IOP::Encoding*); // noncopying version
TAO_CODECFACTORY_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const IOP::Encoding *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_structure\any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace IOP
{
  TAO_CODECFACTORY_Export void operator<<= (::CORBA::Any &, const ::IOP::Encoding_1_2 &); // copying version
  TAO_CODECFACTORY_Export void operator<<= (::CORBA::Any &, ::IOP::Encoding_1_2*); // noncopying version
  TAO_CODECFACTORY_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::IOP::Encoding_1_2 *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_CODECFACTORY_Export void operator<<= (::CORBA::Any &, const IOP::Encoding_1_2 &); // copying version
TAO_CODECFACTORY_Export void operator<<= (::CORBA::Any &, IOP::Encoding_1_2*); // noncopying version
TAO_CODECFACTORY_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const IOP::Encoding_1_2 *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_structure\cdr_op_ch.cpp:37



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_CODECFACTORY_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const IOP::Encoding &);
TAO_CODECFACTORY_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, IOP::Encoding &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_structure\cdr_op_ch.cpp:37



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_CODECFACTORY_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const IOP::Encoding_1_2 &);
TAO_CODECFACTORY_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, IOP::Encoding_1_2 &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_codegen.cpp:1639



TAO_END_VERSIONED_NAMESPACE_DECL

#include /**/ "ace/post.h"

#endif /* ifndef */

