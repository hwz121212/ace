// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v3.0.7
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_codegen.cpp:148

#ifndef _TAO_PIDL_POLLABLEC_QICQIM_H_
#define _TAO_PIDL_POLLABLEC_QICQIM_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "tao/Messaging/messaging_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 3 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 7
#error This file should be regenerated with TAO_IDL
#endif

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_module\module_ch.cpp:34

namespace CORBA
{
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_interface.cpp:747

  

#if !defined (_CORBA_POLLABLESET__VAR_OUT_CH_)
#define _CORBA_POLLABLESET__VAR_OUT_CH_

  class PollableSet;
  using PollableSet_ptr = PollableSet*;
  using PollableSet_var = TAO_Objref_Var_T<PollableSet>;
  using PollableSet_out = TAO_Objref_Out_T<PollableSet>;

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_interface.cpp:747

  

#if !defined (_CORBA_POLLABLE__VAR_OUT_CH_)
#define _CORBA_POLLABLE__VAR_OUT_CH_

  class Pollable;
  using Pollable_ptr = Pollable*;
  using Pollable_var = TAO_Objref_Var_T<Pollable>;
  using Pollable_out = TAO_Objref_Out_T<Pollable>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ch.cpp:39

  

  class TAO_Messaging_Export Pollable
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_type.cpp:296

    using _ptr_type = Pollable_ptr;
    using _var_type = Pollable_var;
    using _out_type = Pollable_out;

    // The static operations.
    static Pollable_ptr _duplicate (Pollable_ptr obj);

    static void _tao_release (Pollable_ptr obj);

    static Pollable_ptr _narrow (::CORBA::Object_ptr obj);
    static Pollable_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Pollable_ptr _nil ();

    virtual ::CORBA::Boolean is_ready (
      ::CORBA::ULong timeout) = 0;

    virtual ::CORBA::PollableSet_ptr create_pollable_set () = 0;

    
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    Pollable ();

    

    virtual ~Pollable () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    Pollable (const Pollable &) = delete;
    Pollable (Pollable &&) = delete;
    Pollable &operator= (const Pollable &) = delete;
    Pollable &operator= (Pollable &&) = delete;
  };
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:33

  extern TAO_Messaging_Export ::CORBA::TypeCode_ptr const _tc_Pollable;
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_interface.cpp:747

  

#if !defined (_CORBA_DIIPOLLABLE__VAR_OUT_CH_)
#define _CORBA_DIIPOLLABLE__VAR_OUT_CH_

  class DIIPollable;
  using DIIPollable_ptr = DIIPollable*;
  using DIIPollable_var = TAO_Objref_Var_T<DIIPollable>;
  using DIIPollable_out = TAO_Objref_Out_T<DIIPollable>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ch.cpp:39

  

  class TAO_Messaging_Export DIIPollable
    : public virtual ::CORBA::Pollable
  
  {
  public:
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_type.cpp:296

    using _ptr_type = DIIPollable_ptr;
    using _var_type = DIIPollable_var;
    using _out_type = DIIPollable_out;

    // The static operations.
    static DIIPollable_ptr _duplicate (DIIPollable_ptr obj);

    static void _tao_release (DIIPollable_ptr obj);

    static DIIPollable_ptr _narrow (::CORBA::Object_ptr obj);
    static DIIPollable_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static DIIPollable_ptr _nil ();

    
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    DIIPollable ();

    

    virtual ~DIIPollable () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    DIIPollable (const DIIPollable &) = delete;
    DIIPollable (DIIPollable &&) = delete;
    DIIPollable &operator= (const DIIPollable &) = delete;
    DIIPollable &operator= (DIIPollable &&) = delete;
  };
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:33

  extern TAO_Messaging_Export ::CORBA::TypeCode_ptr const _tc_DIIPollable;

  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ch.cpp:39

  

  class TAO_Messaging_Export PollableSet
    : public virtual ::CORBA::Object
  {
  public:
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_type.cpp:296

    using _ptr_type = PollableSet_ptr;
    using _var_type = PollableSet_var;
    using _out_type = PollableSet_out;

    // The static operations.
    static PollableSet_ptr _duplicate (PollableSet_ptr obj);

    static void _tao_release (PollableSet_ptr obj);

    static PollableSet_ptr _narrow (::CORBA::Object_ptr obj);
    static PollableSet_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PollableSet_ptr _nil ();
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_exception\exception_ch.cpp:40

    

    class TAO_Messaging_Export NoPossiblePollable : public ::CORBA::UserException
    {
    public:

      NoPossiblePollable ();
      NoPossiblePollable (const NoPossiblePollable &);
      ~NoPossiblePollable () = default;

      NoPossiblePollable &operator= (const NoPossiblePollable &);

      static void _tao_any_destructor (void *);

      static NoPossiblePollable *_downcast ( ::CORBA::Exception *);
      static const NoPossiblePollable *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc ();

      virtual ::CORBA::Exception *_tao_duplicate () const;

      virtual void _raise () const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);

      virtual ::CORBA::TypeCode_ptr _tao_type () const;
    };
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_NoPossiblePollable;
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_exception\exception_ch.cpp:40

    

    class TAO_Messaging_Export UnknownPollable : public ::CORBA::UserException
    {
    public:

      UnknownPollable ();
      UnknownPollable (const UnknownPollable &);
      ~UnknownPollable () = default;

      UnknownPollable &operator= (const UnknownPollable &);

      static void _tao_any_destructor (void *);

      static UnknownPollable *_downcast ( ::CORBA::Exception *);
      static const UnknownPollable *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc ();

      virtual ::CORBA::Exception *_tao_duplicate () const;

      virtual void _raise () const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);

      virtual ::CORBA::TypeCode_ptr _tao_type () const;
    };
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:33

    static ::CORBA::TypeCode_ptr const _tc_UnknownPollable;

    virtual ::CORBA::DIIPollable_ptr create_dii_pollable () = 0;

    virtual void add_pollable (
      ::CORBA::Pollable_ptr potential) = 0;

    virtual ::CORBA::Pollable_ptr get_ready_pollable (
      ::CORBA::ULong timeout) = 0;

    virtual void remove (
      ::CORBA::Pollable_ptr potential) = 0;

    virtual ::CORBA::UShort number_left () = 0;

    
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    PollableSet ();

    

    virtual ~PollableSet () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    PollableSet (const PollableSet &) = delete;
    PollableSet (PollableSet &&) = delete;
    PollableSet &operator= (const PollableSet &) = delete;
    PollableSet &operator= (PollableSet &&) = delete;
  };
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:33

  extern TAO_Messaging_Export ::CORBA::TypeCode_ptr const _tc_PollableSet;


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_module\module_ch.cpp:62


} // module CORBA
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_arg_traits.cpp:64




TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_traits.cpp:58




TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_CORBA_POLLABLE__TRAITS_)
#define _CORBA_POLLABLE__TRAITS_

  template<>
  struct TAO_Messaging_Export Objref_Traits< ::CORBA::Pollable>
  {
    static ::CORBA::Pollable_ptr duplicate (::CORBA::Pollable_ptr p);
    static void release (::CORBA::Pollable_ptr p);
    static ::CORBA::Pollable_ptr nil ();
    static ::CORBA::Boolean marshal (const ::CORBA::Pollable_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_CORBA_DIIPOLLABLE__TRAITS_)
#define _CORBA_DIIPOLLABLE__TRAITS_

  template<>
  struct TAO_Messaging_Export Objref_Traits< ::CORBA::DIIPollable>
  {
    static ::CORBA::DIIPollable_ptr duplicate (::CORBA::DIIPollable_ptr p);
    static void release (::CORBA::DIIPollable_ptr p);
    static ::CORBA::DIIPollable_ptr nil ();
    static ::CORBA::Boolean marshal (const ::CORBA::DIIPollable_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_CORBA_POLLABLESET__TRAITS_)
#define _CORBA_POLLABLESET__TRAITS_

  template<>
  struct TAO_Messaging_Export Objref_Traits< ::CORBA::PollableSet>
  {
    static ::CORBA::PollableSet_ptr duplicate (::CORBA::PollableSet_ptr p);
    static void release (::CORBA::PollableSet_ptr p);
    static ::CORBA::PollableSet_ptr nil ();
    static ::CORBA::Boolean marshal (const ::CORBA::PollableSet_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_codegen.cpp:1639



TAO_END_VERSIONED_NAMESPACE_DECL

#include /**/ "ace/post.h"

#endif /* ifndef */

