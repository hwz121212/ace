// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v3.0.7
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_codegen.cpp:622

#ifndef _TAO_IDL_MONITORS_CO5O9B_CPP_
#define _TAO_IDL_MONITORS_CO5O9B_CPP_


#include "MonitorS.h"
#include "tao/PortableServer/Operation_Table_Dynamic_Hash.h"
#include "tao/PortableServer/Direct_Collocation_Upcall_Wrapper.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"
#include "cstring"

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



static const TAO_operation_db_entry Monitor_Subscriber_operations [] = {
  {"push", std::addressof(POA_Monitor::Subscriber::push_skel), std::addressof(POA_Monitor::_TAO_Subscriber_Direct_Proxy_Impl::push)},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_Monitor_Subscriber_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (18);
static char _tao_Monitor_Subscriber_optable_pool [_tao_Monitor_Subscriber_optable_size];
static ACE_Static_Allocator_Base _tao_Monitor_Subscriber_allocator (_tao_Monitor_Subscriber_optable_pool, _tao_Monitor_Subscriber_optable_size);
static TAO_Dynamic_Hash_OpTable tao_Monitor_Subscriber_optable (
    Monitor_Subscriber_operations,
    6,
    12,
    &_tao_Monitor_Subscriber_allocator
  );


///////////////////////////////////////////////////////////////////////
//                 Direct Proxy  Implementation
//

POA_Monitor::_TAO_Subscriber_Direct_Proxy_Impl::~_TAO_Subscriber_Direct_Proxy_Impl ()
{
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_Monitor::_TAO_Subscriber_Direct_Proxy_Impl::push (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Monitor::Subscriber_ptr _tao_ptr = 
    dynamic_cast<POA_Monitor::Subscriber_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->push (
        ((TAO::Arg_Traits< ::Monitor::DataList>::in_arg_val *) args[1])->arg ()
      );
}



//
//           End Direct Proxy Implementation
///////////////////////////////////////////////////////////////////////


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_Monitor::Subscriber::Subscriber ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_Monitor_Subscriber_optable);
}

POA_Monitor::Subscriber::Subscriber (const Subscriber& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}


namespace POA_Monitor
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class push_Subscriber
    : public TAO::Upcall_Command
  {
  public:
    inline push_Subscriber (
      POA_Monitor::Subscriber * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Monitor::DataList>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Monitor::DataList> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->push (
        arg_1);
    }
  
  private:
    POA_Monitor::Subscriber * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_Monitor::Subscriber::push_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Monitor::DataList>::in_arg_val _tao_dil;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_dil)
    };
  
  POA_Monitor::Subscriber * const impl =
    dynamic_cast<POA_Monitor::Subscriber *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  push_Subscriber command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_Monitor::Subscriber::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:Monitor/Subscriber:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_Monitor::Subscriber::_interface_repository_id () const
{
  return "IDL:Monitor/Subscriber:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_Monitor::Subscriber::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



Monitor::Subscriber *
POA_Monitor::Subscriber::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::Monitor::Subscriber>::unchecked_narrow (obj.in ());
}

static const TAO_operation_db_entry Monitor_MC_operations [] = {
  {"get_statistic_names", std::addressof(POA_Monitor::MC::get_statistic_names_skel), std::addressof(POA_Monitor::_TAO_MC_Direct_Proxy_Impl::get_statistic_names)},
  {"get_statistics", std::addressof(POA_Monitor::MC::get_statistics_skel), std::addressof(POA_Monitor::_TAO_MC_Direct_Proxy_Impl::get_statistics)},
  {"get_and_clear_statistics", std::addressof(POA_Monitor::MC::get_and_clear_statistics_skel), std::addressof(POA_Monitor::_TAO_MC_Direct_Proxy_Impl::get_and_clear_statistics)},
  {"clear_statistics", std::addressof(POA_Monitor::MC::clear_statistics_skel), std::addressof(POA_Monitor::_TAO_MC_Direct_Proxy_Impl::clear_statistics)},
  {"register_constraint", std::addressof(POA_Monitor::MC::register_constraint_skel), std::addressof(POA_Monitor::_TAO_MC_Direct_Proxy_Impl::register_constraint)},
  {"unregister_constraints", std::addressof(POA_Monitor::MC::unregister_constraints_skel), std::addressof(POA_Monitor::_TAO_MC_Direct_Proxy_Impl::unregister_constraints)},
  {"_is_a", std::addressof(TAO_ServantBase::_is_a_thru_poa_skel), nullptr},
  {"_non_existent", std::addressof(TAO_ServantBase::_non_existent_thru_poa_skel), nullptr},
  {"_component", std::addressof(TAO_ServantBase::_component_thru_poa_skel), nullptr},
  {"_interface", std::addressof(TAO_ServantBase::_interface_skel), nullptr},
  {"_repository_id", std::addressof(TAO_ServantBase::_repository_id_thru_poa_skel), nullptr}
};

static const ::CORBA::Long _tao_Monitor_MC_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (33);
static char _tao_Monitor_MC_optable_pool [_tao_Monitor_MC_optable_size];
static ACE_Static_Allocator_Base _tao_Monitor_MC_allocator (_tao_Monitor_MC_optable_pool, _tao_Monitor_MC_optable_size);
static TAO_Dynamic_Hash_OpTable tao_Monitor_MC_optable (
    Monitor_MC_operations,
    11,
    22,
    &_tao_Monitor_MC_allocator
  );


///////////////////////////////////////////////////////////////////////
//                 Direct Proxy  Implementation
//

POA_Monitor::_TAO_MC_Direct_Proxy_Impl::~_TAO_MC_Direct_Proxy_Impl ()
{
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_Monitor::_TAO_MC_Direct_Proxy_Impl::get_statistic_names (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Monitor::MC_ptr _tao_ptr = 
    dynamic_cast<POA_Monitor::MC_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  ((TAO::Arg_Traits< ::Monitor::NameList>::ret_val *) args[0])->arg () =
    _tao_ptr->get_statistic_names (
          ((TAO::Arg_Traits< char *>::in_arg_val *) args[1])->arg ()
        );
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_Monitor::_TAO_MC_Direct_Proxy_Impl::get_statistics (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Monitor::MC_ptr _tao_ptr = 
    dynamic_cast<POA_Monitor::MC_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  ((TAO::Arg_Traits< ::Monitor::DataList>::ret_val *) args[0])->arg () =
    _tao_ptr->get_statistics (
          ((TAO::Arg_Traits< ::Monitor::NameList>::in_arg_val *) args[1])->arg ()
        );
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_Monitor::_TAO_MC_Direct_Proxy_Impl::get_and_clear_statistics (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Monitor::MC_ptr _tao_ptr = 
    dynamic_cast<POA_Monitor::MC_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  ((TAO::Arg_Traits< ::Monitor::DataList>::ret_val *) args[0])->arg () =
    _tao_ptr->get_and_clear_statistics (
          ((TAO::Arg_Traits< ::Monitor::NameList>::in_arg_val *) args[1])->arg ()
        );
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_Monitor::_TAO_MC_Direct_Proxy_Impl::clear_statistics (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Monitor::MC_ptr _tao_ptr = 
    dynamic_cast<POA_Monitor::MC_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  ((TAO::Arg_Traits< ::Monitor::NameList>::ret_val *) args[0])->arg () =
    _tao_ptr->clear_statistics (
          ((TAO::Arg_Traits< ::Monitor::NameList>::in_arg_val *) args[1])->arg ()
        );
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_Monitor::_TAO_MC_Direct_Proxy_Impl::register_constraint (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Monitor::MC_ptr _tao_ptr = 
    dynamic_cast<POA_Monitor::MC_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  ((TAO::Arg_Traits< ::Monitor::ConstraintStructList>::ret_val *) args[0])->arg () =
    _tao_ptr->register_constraint (
          ((TAO::Arg_Traits< ::Monitor::NameList>::in_arg_val *) args[1])->arg (),
          ((TAO::Arg_Traits< char *>::in_arg_val *) args[2])->arg (),
          ((TAO::Arg_Traits< ::Monitor::Subscriber>::in_arg_val *) args[3])->arg ()
        );
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\direct_proxy_impl_ss.cpp:56

void
POA_Monitor::_TAO_MC_Direct_Proxy_Impl::unregister_constraints (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args)
  
{
  POA_Monitor::MC_ptr _tao_ptr = 
    dynamic_cast<POA_Monitor::MC_ptr> (servant);
  if (!_tao_ptr)
    {
      throw ::CORBA::INTERNAL ();
    }
  
  _tao_ptr->unregister_constraints (
        ((TAO::Arg_Traits< ::Monitor::ConstraintStructList>::in_arg_val *) args[1])->arg ()
      );
}



//
//           End Direct Proxy Implementation
///////////////////////////////////////////////////////////////////////


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:89



POA_Monitor::MC::MC ()
  : TAO_ServantBase ()
{
  this->optable_ = std::addressof(tao_Monitor_MC_optable);
}

POA_Monitor::MC::MC (const MC& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}


namespace POA_Monitor
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class get_statistic_names_MC
    : public TAO::Upcall_Command
  {
  public:
    inline get_statistic_names_MC (
      POA_Monitor::MC * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Monitor::NameList>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::Monitor::NameList> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_statistic_names (
          arg_1);
    }
  
  private:
    POA_Monitor::MC * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_Monitor::MC::get_statistic_names_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::Monitor::NameList>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_filter;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_filter)
    };
  
  POA_Monitor::MC * const impl =
    dynamic_cast<POA_Monitor::MC *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_statistic_names_MC command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Monitor
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class get_statistics_MC
    : public TAO::Upcall_Command
  {
  public:
    inline get_statistics_MC (
      POA_Monitor::MC * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Monitor::DataList>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::Monitor::DataList> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::Monitor::NameList>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Monitor::NameList> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_statistics (
          arg_1);
    }
  
  private:
    POA_Monitor::MC * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_Monitor::MC::get_statistics_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::Monitor::DataList>::ret_val retval;
  TAO::SArg_Traits< ::Monitor::NameList>::in_arg_val _tao_names;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_names)
    };
  
  POA_Monitor::MC * const impl =
    dynamic_cast<POA_Monitor::MC *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_statistics_MC command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Monitor
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class get_and_clear_statistics_MC
    : public TAO::Upcall_Command
  {
  public:
    inline get_and_clear_statistics_MC (
      POA_Monitor::MC * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Monitor::DataList>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::Monitor::DataList> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::Monitor::NameList>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Monitor::NameList> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_and_clear_statistics (
          arg_1);
    }
  
  private:
    POA_Monitor::MC * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_Monitor::MC::get_and_clear_statistics_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::Monitor::DataList>::ret_val retval;
  TAO::SArg_Traits< ::Monitor::NameList>::in_arg_val _tao_names;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_names)
    };
  
  POA_Monitor::MC * const impl =
    dynamic_cast<POA_Monitor::MC *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_and_clear_statistics_MC command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Monitor
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class clear_statistics_MC
    : public TAO::Upcall_Command
  {
  public:
    inline clear_statistics_MC (
      POA_Monitor::MC * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Monitor::NameList>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::Monitor::NameList> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::Monitor::NameList>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Monitor::NameList> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->clear_statistics (
          arg_1);
    }
  
  private:
    POA_Monitor::MC * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_Monitor::MC::clear_statistics_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::Monitor::NameList>::ret_val retval;
  TAO::SArg_Traits< ::Monitor::NameList>::in_arg_val _tao_names;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_names)
    };
  
  POA_Monitor::MC * const impl =
    dynamic_cast<POA_Monitor::MC *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  clear_statistics_MC command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Monitor
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class register_constraint_MC
    : public TAO::Upcall_Command
  {
  public:
    inline register_constraint_MC (
      POA_Monitor::MC * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Monitor::ConstraintStructList>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::Monitor::ConstraintStructList> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::Monitor::NameList>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Monitor::NameList> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::Monitor::Subscriber>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::Monitor::Subscriber> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->register_constraint (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_Monitor::MC * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_Monitor::MC::register_constraint_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< ::Monitor::ConstraintStructList>::ret_val retval;
  TAO::SArg_Traits< ::Monitor::NameList>::in_arg_val _tao_names;
  TAO::SArg_Traits< char *>::in_arg_val _tao_cs;
  TAO::SArg_Traits< ::Monitor::Subscriber>::in_arg_val _tao_sub;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_names),
      std::addressof(_tao_cs),
      std::addressof(_tao_sub)
    };
  
  POA_Monitor::MC * const impl =
    dynamic_cast<POA_Monitor::MC *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  register_constraint_MC command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 4
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Monitor
{
  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:79

  class unregister_constraints_MC
    : public TAO::Upcall_Command
  {
  public:
    inline unregister_constraints_MC (
      POA_Monitor::MC * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    void execute () override
    {
      TAO::SArg_Traits< ::Monitor::ConstraintStructList>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Monitor::ConstraintStructList> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->unregister_constraints (
        arg_1);
    }
  
  private:
    POA_Monitor::MC * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_ss.cpp:167

void POA_Monitor::MC::unregister_constraints_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Monitor::ConstraintStructList>::in_arg_val _tao_constraint;

  TAO::Argument * const args[] =
    {
      std::addressof(retval),
      std::addressof(_tao_constraint)
    };
  
  POA_Monitor::MC * const impl =
    dynamic_cast<POA_Monitor::MC *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  unregister_constraints_MC command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , 2
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , nullptr
                         , 0
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}




// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:155





::CORBA::Boolean POA_Monitor::MC::_is_a (const char* value)
{
  return
    (
      std::strcmp (value, "IDL:Monitor/MC:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
    );
}

const char* POA_Monitor::MC::_interface_repository_id () const
{
  return "IDL:Monitor/MC:1.0";
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:403



void POA_Monitor::MC::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ss.cpp:354



Monitor::MC *
POA_Monitor::MC::_this ()
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp {};

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      nullptr);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  return TAO::Narrow_Utils< ::Monitor::MC>::unchecked_narrow (obj.in ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* ifndef */

