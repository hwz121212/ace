// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v3.0.7
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_codegen.cpp:148

#ifndef _TAO_PIDL_MONITORC_P70RCY_H_
#define _TAO_PIDL_MONITORC_P70RCY_H_

#include /**/ "ace/pre.h"

#ifndef TAO_MONITOR_SAFE_INCLUDE
#error You should not include MonitorC.h, use tao/Monitor/Monitor.h
#endif /* TAO_MONITOR_SAFE_INCLUDE */

#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "tao/Monitor/Monitor_export.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/Monitor/Monitor_TypesC.h"

#if TAO_MAJOR_VERSION != 3 || TAO_MINOR_VERSION != 0 || TAO_MICRO_VERSION != 7
#error This file should be regenerated with TAO_IDL
#endif

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_root\root_ch.cpp:155



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_module\module_ch.cpp:34

namespace Monitor
{
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_interface.cpp:747

  

#if !defined (_MONITOR_SUBSCRIBER__VAR_OUT_CH_)
#define _MONITOR_SUBSCRIBER__VAR_OUT_CH_

  class Subscriber;
  using Subscriber_ptr = Subscriber*;
  using Subscriber_var = TAO_Objref_Var_T<Subscriber>;
  using Subscriber_out = TAO_Objref_Out_T<Subscriber>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ch.cpp:39

  

  class TAO_Monitor_Export Subscriber
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Subscriber>;
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_type.cpp:296

    using _ptr_type = Subscriber_ptr;
    using _var_type = Subscriber_var;
    using _out_type = Subscriber_out;

    // The static operations.
    static Subscriber_ptr _duplicate (Subscriber_ptr obj);

    static void _tao_release (Subscriber_ptr obj);

    static Subscriber_ptr _narrow (::CORBA::Object_ptr obj);
    static Subscriber_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Subscriber_ptr _nil ();

    virtual void push (
      const ::Monitor::DataList & dil);

    
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Subscriber ();

    // Concrete non-local interface only.
    Subscriber (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Subscriber (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~Subscriber () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    Subscriber (const Subscriber &) = delete;
    Subscriber (Subscriber &&) = delete;
    Subscriber &operator= (const Subscriber &) = delete;
    Subscriber &operator= (Subscriber &&) = delete;
  };
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_interface.cpp:747

  

#if !defined (_MONITOR_MC__VAR_OUT_CH_)
#define _MONITOR_MC__VAR_OUT_CH_

  class MC;
  using MC_ptr = MC*;
  using MC_var = TAO_Objref_Var_T<MC>;
  using MC_out = TAO_Objref_Out_T<MC>;

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ch.cpp:39

  

  class TAO_Monitor_Export MC
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<MC>;
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_type.cpp:296

    using _ptr_type = MC_ptr;
    using _var_type = MC_var;
    using _out_type = MC_out;

    // The static operations.
    static MC_ptr _duplicate (MC_ptr obj);

    static void _tao_release (MC_ptr obj);

    static MC_ptr _narrow (::CORBA::Object_ptr obj);
    static MC_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static MC_ptr _nil ();

    virtual ::Monitor::NameList * get_statistic_names (
      const char * filter);

    virtual ::Monitor::DataList * get_statistics (
      const ::Monitor::NameList & names);

    virtual ::Monitor::DataList * get_and_clear_statistics (
      const ::Monitor::NameList & names);

    virtual ::Monitor::NameList * clear_statistics (
      const ::Monitor::NameList & names);

    virtual ::Monitor::ConstraintStructList * register_constraint (
      const ::Monitor::NameList & names,
      const char * cs,
      ::Monitor::Subscriber_ptr sub);

    virtual void unregister_constraints (
      const ::Monitor::ConstraintStructList & constraint);

    
    // TAO_IDL - Generated from
    // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_ch.cpp:135

    

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id () const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    MC ();

    // Concrete non-local interface only.
    MC (::IOP::IOR *ior, TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    MC (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = nullptr,
        TAO_ORB_Core *orb_core = nullptr);

    virtual ~MC () = default;
  
  private:
    // Private and unimplemented for concrete interfaces.
    MC (const MC &) = delete;
    MC (MC &&) = delete;
    MC &operator= (const MC &) = delete;
    MC &operator= (MC &&) = delete;
  };


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_module\module_ch.cpp:62


} // module Monitor
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_arg_traits.cpp:64




TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_arg_traits.cpp:142

  

#if !defined (_MONITOR_SUBSCRIBER__ARG_TRAITS_)
#define _MONITOR_SUBSCRIBER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Monitor::Subscriber>
    : public Object_Arg_Traits_T<
        ::Monitor::Subscriber_ptr,
        ::Monitor::Subscriber_var,
        ::Monitor::Subscriber_out,
        TAO::Objref_Traits<Monitor::Subscriber>,
        TAO::Any_Insert_Policy_Noop>
  {
  };

#endif /* end #if !defined */
  // TAO_IDL - Generated from
  // d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_arg_traits.cpp:142

  

#if !defined (_MONITOR_MC__ARG_TRAITS_)
#define _MONITOR_MC__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Monitor::MC>
    : public Object_Arg_Traits_T<
        ::Monitor::MC_ptr,
        ::Monitor::MC_var,
        ::Monitor::MC_out,
        TAO::Objref_Traits<Monitor::MC>,
        TAO::Any_Insert_Policy_Noop>
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_traits.cpp:58




TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_MONITOR_SUBSCRIBER__TRAITS_)
#define _MONITOR_SUBSCRIBER__TRAITS_

  template<>
  struct TAO_Monitor_Export Objref_Traits< ::Monitor::Subscriber>
  {
    static ::Monitor::Subscriber_ptr duplicate (::Monitor::Subscriber_ptr p);
    static void release (::Monitor::Subscriber_ptr p);
    static ::Monitor::Subscriber_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Monitor::Subscriber_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MONITOR_MC__TRAITS_)
#define _MONITOR_MC__TRAITS_

  template<>
  struct TAO_Monitor_Export Objref_Traits< ::Monitor::MC>
  {
    static ::Monitor::MC_ptr duplicate (::Monitor::MC_ptr p);
    static void release (::Monitor::MC_ptr p);
    static ::Monitor::MC_ptr nil ();
    static ::CORBA::Boolean marshal (const ::Monitor::MC_ptr p,TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\cdr_op_ch.cpp:40




TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Monitor_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Monitor::Subscriber_ptr );
TAO_Monitor_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Monitor::Subscriber_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\cdr_op_ch.cpp:40




TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Monitor_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Monitor::MC_ptr );
TAO_Monitor_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Monitor::MC_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_codegen.cpp:1639



TAO_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "MonitorC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

