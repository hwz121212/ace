// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v3.0.7
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_codegen.cpp:363


#include "CosConcurrencyControlC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "cstring"

#if !defined (__ACE_INLINE__)
#include "CosConcurrencyControlC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_typecode\enum_typecode.cpp:27

static char const * const _tao_enumerators_CosConcurrencyControl_lock_mode[] =
  {
    "read",
    "write",
    "upgrade",
    "intention_read",
    "intention_write"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_CosConcurrencyControl_lock_mode (
    "IDL:omg.org/CosConcurrencyControl/lock_mode:1.0",
    "lock_mode",
    _tao_enumerators_CosConcurrencyControl_lock_mode,
    5);
  

namespace CosConcurrencyControl
{
  ::CORBA::TypeCode_ptr const _tc_lock_mode =
    &_tao_tc_CosConcurrencyControl_lock_mode;
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_exception\exception_cs.cpp:97

CosConcurrencyControl::LockNotHeld::LockNotHeld ()
  : ::CORBA::UserException (
        "IDL:omg.org/CosConcurrencyControl/LockNotHeld:1.0",
        "LockNotHeld")
{
}

CosConcurrencyControl::LockNotHeld::LockNotHeld (const ::CosConcurrencyControl::LockNotHeld &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
}

CosConcurrencyControl::LockNotHeld&
CosConcurrencyControl::LockNotHeld::operator= (const ::CosConcurrencyControl::LockNotHeld &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosConcurrencyControl::LockNotHeld::_tao_any_destructor (void *_tao_void_pointer)
{
  LockNotHeld *_tao_tmp_pointer =
    static_cast<LockNotHeld *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosConcurrencyControl::LockNotHeld *
CosConcurrencyControl::LockNotHeld::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<LockNotHeld *> (_tao_excp);
}

const CosConcurrencyControl::LockNotHeld *
CosConcurrencyControl::LockNotHeld::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const LockNotHeld *> (_tao_excp);
}

::CORBA::Exception *CosConcurrencyControl::LockNotHeld::_alloc ()
{
  ::CORBA::Exception *retval {};
  ACE_NEW_RETURN (retval, ::CosConcurrencyControl::LockNotHeld, nullptr);
  return retval;
}

::CORBA::Exception *
CosConcurrencyControl::LockNotHeld::_tao_duplicate () const
{
  ::CORBA::Exception *result {};
  ACE_NEW_RETURN (result, ::CosConcurrencyControl::LockNotHeld (*this), nullptr);
  return result;
}

void CosConcurrencyControl::LockNotHeld::_raise () const
{
  throw *this;
}

void CosConcurrencyControl::LockNotHeld::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosConcurrencyControl::LockNotHeld::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosConcurrencyControl::LockNotHeld::_tao_type () const
{
  return ::CosConcurrencyControl::_tc_LockNotHeld;
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosConcurrencyControl_LockNotHeld = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosConcurrencyControl_LockNotHeld (
  ::CORBA::tk_except,
  "IDL:omg.org/CosConcurrencyControl/LockNotHeld:1.0",
  "LockNotHeld",
  _tao_fields_CosConcurrencyControl_LockNotHeld,
  0);


namespace CosConcurrencyControl
{
  ::CORBA::TypeCode_ptr const _tc_LockNotHeld =
    &_tao_tc_CosConcurrencyControl_LockNotHeld;
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_cs.cpp:47



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for CosConcurrencyControl::LockSet.

CosConcurrencyControl::LockSet_ptr
TAO::Objref_Traits<CosConcurrencyControl::LockSet>::duplicate (CosConcurrencyControl::LockSet_ptr p)
{
  return CosConcurrencyControl::LockSet::_duplicate (p);
}

void
TAO::Objref_Traits<CosConcurrencyControl::LockSet>::release (CosConcurrencyControl::LockSet_ptr p)
{
  ::CORBA::release (p);
}

CosConcurrencyControl::LockSet_ptr
TAO::Objref_Traits<CosConcurrencyControl::LockSet>::nil ()
{
  return CosConcurrencyControl::LockSet::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosConcurrencyControl::LockSet>::marshal (const CosConcurrencyControl::LockSet_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_cs.cpp:87

void
CosConcurrencyControl::LockSet::lock (
  ::CosConcurrencyControl::lock_mode mode)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosConcurrencyControl::lock_mode>::in_arg_val _tao_mode (mode);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_mode)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "lock",
      4,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_cs.cpp:87

::CORBA::Boolean
CosConcurrencyControl::LockSet::try_lock (
  ::CosConcurrencyControl::lock_mode mode)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosConcurrencyControl::lock_mode>::in_arg_val _tao_mode (mode);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_mode)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "try_lock",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_cs.cpp:87

void
CosConcurrencyControl::LockSet::unlock (
  ::CosConcurrencyControl::lock_mode mode)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosConcurrencyControl::lock_mode>::in_arg_val _tao_mode (mode);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_mode)
    };

  static TAO::Exception_Data
  _tao_CosConcurrencyControl_LockSet_unlock_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosConcurrencyControl/LockNotHeld:1.0",
        CosConcurrencyControl::LockNotHeld::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosConcurrencyControl::_tc_LockNotHeld
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "unlock",
      6,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_CosConcurrencyControl_LockSet_unlock_exceptiondata,
      1
    );
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_cs.cpp:87

void
CosConcurrencyControl::LockSet::change_mode (
  ::CosConcurrencyControl::lock_mode held_mode,
  ::CosConcurrencyControl::lock_mode new_mode)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosConcurrencyControl::lock_mode>::in_arg_val _tao_held_mode (held_mode);
  TAO::Arg_Traits< ::CosConcurrencyControl::lock_mode>::in_arg_val _tao_new_mode (new_mode);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_held_mode),
      std::addressof(_tao_new_mode)
    };

  static TAO::Exception_Data
  _tao_CosConcurrencyControl_LockSet_change_mode_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosConcurrencyControl/LockNotHeld:1.0",
        CosConcurrencyControl::LockNotHeld::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosConcurrencyControl::_tc_LockNotHeld
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      3,
      "change_mode",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (
      _tao_CosConcurrencyControl_LockSet_change_mode_exceptiondata,
      1
    );
}

CosConcurrencyControl::LockSet::LockSet ()
{
}
void
CosConcurrencyControl::LockSet::_tao_any_destructor (void *_tao_void_pointer)
{
  LockSet *_tao_tmp_pointer =
    static_cast<LockSet *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosConcurrencyControl::LockSet_ptr
CosConcurrencyControl::LockSet::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<LockSet>::narrow (_tao_objref, "IDL:omg.org/CosConcurrencyControl/LockSet:1.0");
}

CosConcurrencyControl::LockSet_ptr
CosConcurrencyControl::LockSet::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<LockSet>::unchecked_narrow (_tao_objref);
}

CosConcurrencyControl::LockSet_ptr
CosConcurrencyControl::LockSet::_nil ()
{
  return nullptr;
}

CosConcurrencyControl::LockSet_ptr
CosConcurrencyControl::LockSet::_duplicate (LockSet_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
CosConcurrencyControl::LockSet::_tao_release (LockSet_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosConcurrencyControl::LockSet::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/CosConcurrencyControl/LockSet:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosConcurrencyControl::LockSet::_interface_repository_id () const
{
  return "IDL:omg.org/CosConcurrencyControl/LockSet:1.0";
}

::CORBA::Boolean
CosConcurrencyControl::LockSet::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosConcurrencyControl_LockSet (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosConcurrencyControl/LockSet:1.0",
    "LockSet");
  

namespace CosConcurrencyControl
{
  ::CORBA::TypeCode_ptr const _tc_LockSet =
    &_tao_tc_CosConcurrencyControl_LockSet;
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\interface_cs.cpp:47



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for CosConcurrencyControl::LockSetFactory.

CosConcurrencyControl::LockSetFactory_ptr
TAO::Objref_Traits<CosConcurrencyControl::LockSetFactory>::duplicate (CosConcurrencyControl::LockSetFactory_ptr p)
{
  return CosConcurrencyControl::LockSetFactory::_duplicate (p);
}

void
TAO::Objref_Traits<CosConcurrencyControl::LockSetFactory>::release (CosConcurrencyControl::LockSetFactory_ptr p)
{
  ::CORBA::release (p);
}

CosConcurrencyControl::LockSetFactory_ptr
TAO::Objref_Traits<CosConcurrencyControl::LockSetFactory>::nil ()
{
  return CosConcurrencyControl::LockSetFactory::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosConcurrencyControl::LockSetFactory>::marshal (const CosConcurrencyControl::LockSetFactory_ptr p,TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_cs.cpp:87

::CosConcurrencyControl::LockSet_ptr
CosConcurrencyControl::LockSetFactory::create ()
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CosConcurrencyControl::LockSet>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      1,
      "create",
      6,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_operation\operation_cs.cpp:87

::CosConcurrencyControl::LockSet_ptr
CosConcurrencyControl::LockSetFactory::create_related (
  ::CosConcurrencyControl::LockSet_ptr which)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CosConcurrencyControl::LockSet>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosConcurrencyControl::LockSet>::in_arg_val _tao_which (which);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      std::addressof(_tao_retval),
      std::addressof(_tao_which)
    };

  TAO::Invocation_Adapter _invocation_call (
      this,
      _the_tao_operation_signature,
      2,
      "create_related",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _invocation_call.invoke (nullptr, 0);

  return _tao_retval.retn ();
}

CosConcurrencyControl::LockSetFactory::LockSetFactory ()
{
}
void
CosConcurrencyControl::LockSetFactory::_tao_any_destructor (void *_tao_void_pointer)
{
  LockSetFactory *_tao_tmp_pointer =
    static_cast<LockSetFactory *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosConcurrencyControl::LockSetFactory_ptr
CosConcurrencyControl::LockSetFactory::_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<LockSetFactory>::narrow (_tao_objref, "IDL:omg.org/CosConcurrencyControl/LockSetFactory:1.0");
}

CosConcurrencyControl::LockSetFactory_ptr
CosConcurrencyControl::LockSetFactory::_unchecked_narrow (::CORBA::Object_ptr _tao_objref)
{
  return TAO::Narrow_Utils<LockSetFactory>::unchecked_narrow (_tao_objref);
}

CosConcurrencyControl::LockSetFactory_ptr
CosConcurrencyControl::LockSetFactory::_nil ()
{
  return nullptr;
}

CosConcurrencyControl::LockSetFactory_ptr
CosConcurrencyControl::LockSetFactory::_duplicate (LockSetFactory_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
CosConcurrencyControl::LockSetFactory::_tao_release (LockSetFactory_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosConcurrencyControl::LockSetFactory::_is_a (const char *value)
{
  if (
      std::strcmp (value, "IDL:omg.org/CosConcurrencyControl/LockSetFactory:1.0") == 0 ||
      std::strcmp (value, "IDL:omg.org/CORBA/Object:1.0") == 0
      )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosConcurrencyControl::LockSetFactory::_interface_repository_id () const
{
  return "IDL:omg.org/CosConcurrencyControl/LockSetFactory:1.0";
}

::CORBA::Boolean
CosConcurrencyControl::LockSetFactory::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:68

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosConcurrencyControl_LockSetFactory (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosConcurrencyControl/LockSetFactory:1.0",
    "LockSetFactory");
  

namespace CosConcurrencyControl
{
  ::CORBA::TypeCode_ptr const _tc_LockSetFactory =
    &_tao_tc_CosConcurrencyControl_LockSetFactory;
}
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_enum\any_op_cs.cpp:34



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosConcurrencyControl
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosConcurrencyControl::lock_mode _tao_elem)
  {
    TAO::Any_Basic_Impl_T< ::CosConcurrencyControl::lock_mode>::insert (
        _tao_any,
        ::CosConcurrencyControl::_tc_lock_mode,
        _tao_elem);
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosConcurrencyControl::lock_mode &_tao_elem)
  {
    return
      TAO::Any_Basic_Impl_T< ::CosConcurrencyControl::lock_mode>::extract (
          _tao_any,
          ::CosConcurrencyControl::_tc_lock_mode,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    CosConcurrencyControl::lock_mode _tao_elem)
{
  TAO::Any_Basic_Impl_T<CosConcurrencyControl::lock_mode>::insert (
      _tao_any,
      CosConcurrencyControl::_tc_lock_mode,
      _tao_elem);
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosConcurrencyControl::lock_mode &_tao_elem)
{
  return
    TAO::Any_Basic_Impl_T<CosConcurrencyControl::lock_mode>::extract (
        _tao_any,
        CosConcurrencyControl::_tc_lock_mode,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_exception\any_op_cs.cpp:36



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosConcurrencyControl::LockNotHeld>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosConcurrencyControl
{
  

  /// Copying insertion.
  void operator<<= (
    ::CORBA::Any &_tao_any,
    const ::CosConcurrencyControl::LockNotHeld &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::CosConcurrencyControl::LockNotHeld>::insert_copy (
      _tao_any,
      ::CosConcurrencyControl::LockNotHeld::_tao_any_destructor,
      ::CosConcurrencyControl::_tc_LockNotHeld,
      _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
    ::CORBA::Any &_tao_any,
    ::CosConcurrencyControl::LockNotHeld *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::CosConcurrencyControl::LockNotHeld>::insert (
      _tao_any,
      ::CosConcurrencyControl::LockNotHeld::_tao_any_destructor,
      ::CosConcurrencyControl::_tc_LockNotHeld,
      _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::CosConcurrencyControl::LockNotHeld *&_tao_elem)
  {
    return TAO::Any_Dual_Impl_T< ::CosConcurrencyControl::LockNotHeld>::extract (
      _tao_any,
      ::CosConcurrencyControl::LockNotHeld::_tao_any_destructor,
      ::CosConcurrencyControl::_tc_LockNotHeld,
      _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const CosConcurrencyControl::LockNotHeld &_tao_elem)
{
  TAO::Any_Dual_Impl_T<CosConcurrencyControl::LockNotHeld>::insert_copy (
    _tao_any,
    CosConcurrencyControl::LockNotHeld::_tao_any_destructor,
    CosConcurrencyControl::_tc_LockNotHeld,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  CosConcurrencyControl::LockNotHeld *_tao_elem)
{
  TAO::Any_Dual_Impl_T<CosConcurrencyControl::LockNotHeld>::insert (
    _tao_any,
    CosConcurrencyControl::LockNotHeld::_tao_any_destructor,
    CosConcurrencyControl::_tc_LockNotHeld,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const CosConcurrencyControl::LockNotHeld *&_tao_elem)
{
  return TAO::Any_Dual_Impl_T<CosConcurrencyControl::LockNotHeld>::extract (
    _tao_any,
    CosConcurrencyControl::LockNotHeld::_tao_any_destructor,
    CosConcurrencyControl::_tc_LockNotHeld,
    _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\any_op_cs.cpp:37



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosConcurrencyControl::LockSet>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosConcurrencyControl
{
  

  /// Copying insertion.
  void
  operator<<= (
    ::CORBA::Any &_tao_any,
    LockSet_ptr _tao_elem)
  {
    LockSet_ptr _tao_objptr =
      LockSet::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
    ::CORBA::Any &_tao_any,
    LockSet_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<LockSet>::insert (
      _tao_any,
      LockSet::_tao_any_destructor,
      _tc_LockSet,
      *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      LockSet_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<LockSet>::extract (
          _tao_any,
          LockSet::_tao_any_destructor,
          _tc_LockSet,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  CosConcurrencyControl::LockSet_ptr _tao_elem)
{
  CosConcurrencyControl::LockSet_ptr _tao_objptr =
    CosConcurrencyControl::LockSet::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  CosConcurrencyControl::LockSet_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosConcurrencyControl::LockSet>::insert (
    _tao_any,
    CosConcurrencyControl::LockSet::_tao_any_destructor,
    CosConcurrencyControl::_tc_LockSet,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosConcurrencyControl::LockSet_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosConcurrencyControl::LockSet>::extract (
        _tao_any,
        CosConcurrencyControl::LockSet::_tao_any_destructor,
        CosConcurrencyControl::_tc_LockSet,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\any_op_cs.cpp:37



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosConcurrencyControl::LockSetFactory>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosConcurrencyControl
{
  

  /// Copying insertion.
  void
  operator<<= (
    ::CORBA::Any &_tao_any,
    LockSetFactory_ptr _tao_elem)
  {
    LockSetFactory_ptr _tao_objptr =
      LockSetFactory::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
    ::CORBA::Any &_tao_any,
    LockSetFactory_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<LockSetFactory>::insert (
      _tao_any,
      LockSetFactory::_tao_any_destructor,
      _tc_LockSetFactory,
      *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      LockSetFactory_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<LockSetFactory>::extract (
          _tao_any,
          LockSetFactory::_tao_any_destructor,
          _tc_LockSetFactory,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  CosConcurrencyControl::LockSetFactory_ptr _tao_elem)
{
  CosConcurrencyControl::LockSetFactory_ptr _tao_objptr =
    CosConcurrencyControl::LockSetFactory::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
  ::CORBA::Any &_tao_any,
  CosConcurrencyControl::LockSetFactory_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosConcurrencyControl::LockSetFactory>::insert (
    _tao_any,
    CosConcurrencyControl::LockSetFactory::_tao_any_destructor,
    CosConcurrencyControl::_tc_LockSetFactory,
    *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosConcurrencyControl::LockSetFactory_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosConcurrencyControl::LockSetFactory>::extract (
        _tao_any,
        CosConcurrencyControl::LockSetFactory::_tao_any_destructor,
        CosConcurrencyControl::_tc_LockSetFactory,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif
// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_enum\cdr_op_cs.cpp:29



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosConcurrencyControl::lock_mode _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosConcurrencyControl::lock_mode & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<CosConcurrencyControl::lock_mode> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_exception\cdr_op_cs.cpp:47



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosConcurrencyControl::LockNotHeld &_tao_aggregate)
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosConcurrencyControl::LockNotHeld&)
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\cdr_op_cs.cpp:50



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosConcurrencyControl::LockSet_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosConcurrencyControl::LockSet_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::CosConcurrencyControl::LockSet>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\hanwenzhi_code\ace\tao-7.0.7\thirdparty\tao-7.0.7\tao_idl\be\be_visitor_interface\cdr_op_cs.cpp:50



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosConcurrencyControl::LockSetFactory_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosConcurrencyControl::LockSetFactory_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  // Narrow to the right type.
  _tao_objref = TAO::Narrow_Utils< ::CosConcurrencyControl::LockSetFactory>::unchecked_narrow (obj.in ());

  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


